{
  "Appendix C: Derivable Traits": {
    "_translate": "<a class=\"header\" href=\"#appendix-c-derivable-traits\">附录 C: 可派生的特征</a>",
    "_note": ""
  },
  "In various places in the book, we’ve discussed the derive attribute, which you can apply to a struct or enum definition. The derive attribute generates code that will implement a trait with its own default implementation on the type you’ve annotated with the derive syntax.": {
    "_translate": "在书中的各个地方，我们讨论了<code>derive</code>属性，你可以将其应用于结构体或枚举定义。<code>derive</code>属性会生成代码，为使用<code>derive</code>语法标注的类型实现带有默认实现的特征。",
    "_note": ""
  },
  "In this appendix, we provide a reference of all the traits in the standard library that you can use with derive. Each section covers:": {
    "_translate": "在本附录中，我们提供了标准库中所有可以与<code>derive</code>一起使用的特质的参考。每个部分涵盖：",
    "_note": ""
  },
  "If you want different behavior from that provided by the derive attribute, consult the standard library documentation for each trait for details of how to manually implement them.": {
    "_translate": "如果您希望的行为与 <code>derive</code> 属性提供的不同，请查阅 <a href=\"../std/index.html\">标准库文档</a><!-- ignore --> 以获取有关如何手动实现每个 trait 的详细信息。",
    "_note": ""
  },
  "These traits listed here are the only ones defined by the standard library that can be implemented on your types using derive. Other traits defined in the standard library don’t have sensible default behavior, so it’s up to you to implement them in the way that makes sense for what you’re trying to accomplish.": {
    "_translate": "这里列出的这些特质是标准库中唯一可以使用<code>derive</code>在你的类型上实现的。标准库中定义的其他特质没有合理的默认行为，因此需要你自己以适合你目标的方式实现它们。",
    "_note": ""
  },
  "An example of a trait that can’t be derived is Display, which handles formatting for end users. You should always consider the appropriate way to display a type to an end user. What parts of the type should an end user be allowed to see? What parts would they find relevant? What format of the data would be most relevant to them? The Rust compiler doesn’t have this insight, so it can’t provide appropriate default behavior for you.": {
    "_translate": "一个不能派生的特征示例是<code>Display</code>，它处理面向用户的格式化。您应该始终考虑以适当的方式向最终用户显示类型。最终用户应该被允许看到类型的哪些部分？他们会觉得哪些部分相关？对他们来说，数据的哪种格式最相关？Rust编译器没有这种洞察力，因此无法为您提供适当的行为。",
    "_note": ""
  },
  "Debug for Programmer Output": {
    "_translate": "<a class=\"header\" href=\"#debug-for-programmer-output\"><code>Debug</code> 用于程序员输出</a>",
    "_note": ""
  },
  "The list of derivable traits provided in this appendix is not comprehensive: libraries can implement derive for their own traits, making the list of traits you can use derive with truly open-ended. Implementing derive involves using a procedural macro, which is covered in the “Macros” section of Chapter 20.": {
    "_translate": "本附录中提供的可派生特性列表并不全面：\n库可以为其自己的特性实现<code>derive</code>，使得你可以使用<code>derive</code>的特性列表真正开放。实现<code>derive</code>\n涉及使用过程宏，这在第20章的\n<a href=\"ch20-06-macros.html#macros\">“宏”</a><!-- ignore --> 部分中有所介绍。",
    "_note": ""
  },
  "The Debug trait enables debug formatting in format strings, which you indicate by adding :? within {} placeholders.": {
    "_translate": "<code>Debug</code> 特性在格式字符串中启用调试格式，你通过在 <code>{}</code> 占位符内添加 <code>:?</code> 来指示。",
    "_note": ""
  },
  "The Debug trait allows you to print instances of a type for debugging purposes, so you and other programmers using your type can inspect an instance at a particular point in a program’s execution.": {
    "_translate": "<code>Debug</code> 特性允许你为了调试目的打印某个类型的实例，这样你和其他使用你类型的程序员可以在程序执行的某个特定点检查一个实例。",
    "_note": ""
  },
  "The Debug trait is required, for example, in using the assert_eq! macro. This macro prints the values of instances given as arguments if the equality assertion fails so programmers can see why the two instances weren’t equal.": {
    "_translate": "<code>Debug</code> 特性在使用 <code>assert_eq!</code> 宏时是必需的。这个宏在等式断言失败时会打印出作为参数给出的实例的值，以便程序员可以看到为什么这两个实例不相等。",
    "_note": ""
  },
  "PartialEq and Eq for Equality Comparisons": {
    "_translate": "<a class=\"header\" href=\"#partialeq-and-eq-for-equality-comparisons\"><code>PartialEq</code> 和 <code>Eq</code> 用于等式比较</a>",
    "_note": ""
  },
  "The PartialEq trait allows you to compare instances of a type to check for equality and enables use of the == and != operators.": {
    "_translate": "<code>PartialEq</code> 特性允许你比较某个类型的实例以检查是否相等，并启用使用 <code>==</code> 和 <code>!=</code> 运算符。",
    "_note": ""
  },
  "Deriving PartialEq implements the eq method. When PartialEq is derived on structs, two instances are equal only if all fields are equal, and the instances are not equal if any fields are not equal. When derived on enums, each variant is equal to itself and not equal to the other variants.": {
    "_translate": "派生 <code>PartialEq</code> 实现了 <code>eq</code> 方法。当在结构体上派生 <code>PartialEq</code> 时，两个实例只有在 <em>所有</em> 字段都相等的情况下才相等，如果任何字段不相等，则实例不相等。当在枚举上派生时，每个变体仅与自身相等，与其他变体不相等。",
    "_note": ""
  },
  "The PartialEq trait is required, for example, with the use of the assert_eq! macro, which needs to be able to compare two instances of a type for equality.": {
    "_translate": "<code>PartialEq</code> 特性是必需的，例如，在使用 <code>assert_eq!</code> 宏时，该宏需要能够比较两个类型实例是否相等。",
    "_note": ""
  },
  "An example of when Eq is required is for keys in a HashMap<K, V> so the HashMap<K, V> can tell whether two keys are the same.": {
    "_translate": "一个需要 <code>Eq</code> 的例子是在 <code>HashMap&lt;K, V&gt;</code> 中的键，这样 <code>HashMap&lt;K, V&gt;</code> 就可以判断两个键是否相同。",
    "_note": ""
  },
  "PartialOrd and Ord for Ordering Comparisons": {
    "_translate": "<a class=\"header\" href=\"#partialord-and-ord-for-ordering-comparisons\"><code>PartialOrd</code> 和 <code>Ord</code> 用于排序比较</a>",
    "_note": ""
  },
  "The Eq trait has no methods. Its purpose is to signal that for every value of the annotated type, the value is equal to itself. The Eq trait can only be applied to types that also implement PartialEq, although not all types that implement PartialEq can implement Eq. One example of this is floating point number types: the implementation of floating point numbers states that two instances of the not-a-number (NaN) value are not equal to each other.": {
    "_translate": "<code>Eq</code> 特性没有方法。它的目的是表明对于注解类型的每个值，该值都等于自身。<code>Eq</code> 特性只能应用于也实现了 <code>PartialEq</code> 的类型，尽管并非所有实现了 <code>PartialEq</code> 的类型都能实现 <code>Eq</code>。一个例子是浮点数类型：浮点数的实现表明，两个非数字（<code>NaN</code>）值的实例彼此不相等。",
    "_note": ""
  },
  "The PartialOrd trait allows you to compare instances of a type for sorting purposes. A type that implements PartialOrd can be used with the <, >, <=, and >= operators. You can only apply the PartialOrd trait to types that also implement PartialEq.": {
    "_translate": "<code>PartialOrd</code> 特性允许你为了排序的目的比较某个类型实例。实现了 <code>PartialOrd</code> 的类型可以使用 <code>&lt;</code>、<code>&gt;</code>、<code>&lt;=</code> 和 <code>&gt;=</code> 运算符。你只能将 <code>PartialOrd</code> 特性应用于也实现了 <code>PartialEq</code> 的类型。",
    "_note": ""
  },
  "When derived on structs, PartialOrd compares two instances by comparing the value in each field in the order in which the fields appear in the struct definition. When derived on enums, variants of the enum declared earlier in the enum definition are considered less than the variants listed later.": {
    "_translate": "当在结构体上派生时，<code>PartialOrd</code> 通过按结构体定义中字段出现的顺序比较每个字段的值来比较两个实例。当在枚举上派生时，枚举定义中较早声明的变体被认为小于后面列出的变体。",
    "_note": ""
  },
  "Deriving PartialOrd implements the partial_cmp method, which returns an Option<Ordering> that will be None when the values given don’t produce an ordering. An example of a value that doesn’t produce an ordering, even though most values of that type can be compared, is the not-a-number (NaN) floating point value. Calling partial_cmp with any floating point number and the NaN floating point value will return None.": {
    "_translate": "派生 <code>PartialOrd</code> 实现了 <code>partial_cmp</code> 方法，该方法返回一个 <code>Option&lt;Ordering&gt;</code>，当给定的值无法产生排序时，该值将为 <code>None</code>。一个无法产生排序的值的例子是，即使该类型的大多数值可以比较，但不是数字（<code>NaN</code>）浮点值。使用任何浮点数和 <code>NaN</code> 浮点值调用 <code>partial_cmp</code> 将返回 <code>None</code>。",
    "_note": ""
  },
  "The PartialOrd trait is required, for example, for the gen_range method from the rand crate that generates a random value in the range specified by a range expression.": {
    "_translate": "<code>PartialOrd</code> 特性是必需的，例如，对于 <code>rand</code> 库中的 <code>gen_range</code> 方法，该方法生成一个在由范围表达式指定的范围内随机值。",
    "_note": ""
  },
  "An example of when Ord is required is when storing values in a BTreeSet<T>, a data structure that stores data based on the sort order of the values.": {
    "_translate": "一个需要 <code>Ord</code> 的例子是在 <code>BTreeSet&lt;T&gt;</code> 中存储值，这是一种根据值的排序顺序存储数据的数据结构。",
    "_note": ""
  },
  "Clone and Copy for Duplicating Values": {
    "_translate": "<a class=\"header\" href=\"#clone-and-copy-for-duplicating-values\"><code>Clone</code> 和 <code>Copy</code> 用于复制值</a>",
    "_note": ""
  },
  "The Ord trait allows you to know that for any two values of the annotated type, a valid ordering will exist. The Ord trait implements the cmp method, which returns an Ordering rather than an Option<Ordering> because a valid ordering will always be possible. You can only apply the Ord trait to types that also implement PartialOrd and Eq (and Eq requires PartialEq). When derived on structs and enums, cmp behaves the same way as the derived implementation for partial_cmp does with PartialOrd.": {
    "_translate": "<code>Ord</code> 特性允许你知道对于任何两个标注类型的值，都存在一个有效的排序。<code>Ord</code> 特性实现了 <code>cmp</code> 方法，该方法返回一个 <code>Ordering</code> 而不是一个 <code>Option&lt;Ordering&gt;</code>，因为总是可以有一个有效的排序。你只能将 <code>Ord</code> 特性应用于也实现了 <code>PartialOrd</code> 和 <code>Eq</code> 的类型（而 <code>Eq</code> 需要 <code>PartialEq</code>）。当在结构体和枚举上派生时，<code>cmp</code> 的行为与 <code>PartialOrd</code> 的派生实现中的 <code>partial_cmp</code> 相同。",
    "_note": ""
  },
  "Deriving Clone implements the clone method, which when implemented for the whole type, calls clone on each of the parts of the type. This means all the fields or values in the type must also implement Clone to derive Clone.": {
    "_translate": "派生 <code>Clone</code> 实现了 <code>clone</code> 方法，当为整个类型实现时，会调用类型中每个部分的 <code>clone</code>。这意味着类型中的所有字段或值也必须实现 <code>Clone</code> 才能派生 <code>Clone</code>。",
    "_note": ""
  },
  "The Clone trait allows you to explicitly create a deep copy of a value, and the duplication process might involve running arbitrary code and copying heap data. See the “Ways Variables and Data Interact: Clone” section in Chapter 4 for more information on Clone.": {
    "_translate": "<code>Clone</code> 特性允许你显式地创建一个值的深拷贝，复制过程可能涉及运行任意代码和复制堆数据。有关 <code>Clone</code> 的更多信息，请参见第 4 章的 <a href=\"ch04-01-what-is-ownership.html#ways-variables-and-data-interact-clone\">“变量和数据交互方式：Clone”</a><!-- ignore --> 部分。",
    "_note": ""
  },
  "An example of when Clone is required is when calling the to_vec method on a slice. The slice doesn’t own the type instances it contains, but the vector returned from to_vec will need to own its instances, so to_vec calls clone on each item. Thus, the type stored in the slice must implement Clone.": {
    "_translate": "一个需要 <code>Clone</code> 的例子是在切片上调用 <code>to_vec</code> 方法时。切片不拥有它包含的类型实例，但 <code>to_vec</code> 返回的向量需要拥有其实例，因此 <code>to_vec</code> 会对每个项目调用 <code>clone</code>。因此，存储在切片中的类型必须实现 <code>Clone</code>。",
    "_note": ""
  },
  "The Copy trait allows you to duplicate a value by only copying bits stored on the stack; no arbitrary code is necessary. See the “Stack-Only Data: Copy” section in Chapter 4 for more information on Copy.": {
    "_translate": "<code>Copy</code> 特性允许你通过仅复制栈上存储的位来复制一个值；不需要任意代码。有关 <code>Copy</code> 的更多信息，请参见第 4 章的 <a href=\"ch04-01-what-is-ownership.html#stack-only-data-copy\">“仅栈数据：Copy”</a><!-- ignore --> 部分。",
    "_note": ""
  },
  "The Copy trait doesn’t define any methods to prevent programmers from overloading those methods and violating the assumption that no arbitrary code is being run. That way, all programmers can assume that copying a value will be very fast.": {
    "_translate": "<code>Copy</code> 特性没有定义任何方法，以防止程序员重载这些方法并违反不运行任意代码的假设。这样，所有程序员都可以假设复制一个值将非常快。",
    "_note": ""
  },
  "You can derive Copy on any type whose parts all implement Copy. A type that implements Copy must also implement Clone, because a type that implements Copy has a trivial implementation of Clone that performs the same task as Copy.": {
    "_translate": "您可以为所有部分都实现了<code>Copy</code>的任何类型派生<code>Copy</code>。实现<code>Copy</code>的类型还必须实现<code>Clone</code>，因为实现<code>Copy</code>的类型具有与<code>Copy</code>执行相同任务的平凡的<code>Clone</code>实现。",
    "_note": ""
  },
  "The Copy trait is rarely required; types that implement Copy have optimizations available, meaning you don’t have to call clone, which makes the code more concise.": {
    "_translate": "<code>Copy</code> 特性很少需要；实现了 <code>Copy</code> 的类型有可用的优化，这意味着你不需要调用 <code>clone</code>，从而使代码更加简洁。",
    "_note": ""
  },
  "Everything possible with Copy you can also accomplish with Clone, but the code might be slower or have to use clone in places.": {
    "_translate": "您可以使用 <code>Clone</code> 实现 <code>Copy</code> 能做的一切，但代码可能会更慢或需要在某些地方使用 <code>clone</code>。",
    "_note": ""
  },
  "Hash for Mapping a Value to a Value of Fixed Size": {
    "_translate": "<a class=\"header\" href=\"#hash-for-mapping-a-value-to-a-value-of-fixed-size\"><code>Hash</code> 用于将值映射到固定大小的值</a>",
    "_note": ""
  },
  "The Hash trait allows you to take an instance of a type of arbitrary size and map that instance to a value of fixed size using a hash function. Deriving Hash implements the hash method. The derived implementation of the hash method combines the result of calling hash on each of the parts of the type, meaning all fields or values must also implement Hash to derive Hash.": {
    "_translate": "<code>Hash</code> 特性允许你将任意大小类型的实例映射到使用哈希函数的固定大小的值。派生 <code>Hash</code> 实现了 <code>hash</code> 方法。派生的 <code>hash</code> 方法实现将调用类型每个部分的 <code>hash</code> 的结果组合起来，这意味着所有字段或值也必须实现 <code>Hash</code> 才能派生 <code>Hash</code>。",
    "_note": ""
  },
  "An example of when Hash is required is in storing keys in a HashMap<K, V> to store data efficiently.": {
    "_translate": "一个需要 <code>Hash</code> 的例子是在 <code>HashMap&lt;K, V&gt;</code> 中存储键以高效地存储数据。",
    "_note": ""
  },
  "Default for Default Values": {
    "_translate": "<a class=\"header\" href=\"#default-for-default-values\"><code>Default</code> 用于默认值</a>",
    "_note": ""
  },
  "The Default trait allows you to create a default value for a type. Deriving Default implements the default function. The derived implementation of the default function calls the default function on each part of the type, meaning all fields or values in the type must also implement Default to derive Default.": {
    "_translate": "<code>Default</code> 特性允许你为类型创建一个默认值。派生 <code>Default</code> 会实现 <code>default</code> 函数。派生的 <code>default</code> 函数实现会调用类型每个部分的 <code>default</code> 函数，这意味着类型中的所有字段或值也必须实现 <code>Default</code> 才能派生 <code>Default</code>。",
    "_note": ""
  },
  "The Default::default function is commonly used in combination with the struct update syntax discussed in the “Creating Instances From Other Instances With Struct Update Syntax” section in Chapter 5. You can customize a few fields of a struct and then set and use a default value for the rest of the fields by using ..Default::default().": {
    "_translate": "<code>Default::default</code> 函数通常与结构体更新语法结合使用，相关内容在第 5 章的 <a href=\"ch05-01-defining-structs.html#creating-instances-from-other-instances-with-struct-update-syntax\">“使用结构体更新语法从其他实例创建实例”</a><!-- ignore -->\n部分中讨论。你可以自定义结构体的几个字段，然后使用 <code>..Default::default()</code> 为其余字段设置和使用默认值。",
    "_note": ""
  },
  "The Default trait is required when you use the method unwrap_or_default on Option<T> instances, for example. If the Option<T> is None, the method unwrap_or_default will return the result of Default::default for the type T stored in the Option<T>.": {
    "_translate": "当在 <code>Option&lt;T&gt;</code> 实例上使用 <code>unwrap_or_default</code> 方法时，需要 <code>Default</code> 特性。例如，如果 <code>Option&lt;T&gt;</code> 是 <code>None</code>，则 <code>unwrap_or_default</code> 方法将返回 <code>Option&lt;T&gt;</code> 中存储的类型 <code>T</code> 的 <code>Default::default</code> 结果。",
    "_note": ""
  },
  "C - Derivable Traits - The Rust Programming Language": {
    "_translate": "C - 可派生的特征 - 《Rust编程语言》",
    "_note": ""
  },
  "What the implementation of the trait provided by derive does": {
    "_translate": "<code>derive</code> 提供的特征实现的作用",
    "_note": ""
  },
  "What operators and methods deriving this trait will enable": {
    "_translate": "实现这个特质将启用哪些运算符和方法，输出翻译直接，不添加任何额外的文本。绝对不要添加原始翻译内容中没有的符号或标签。记住，保留所有 HTML 标签和属性，仅翻译内容！",
    "_note": ""
  },
  "What implementing the trait signifies about the type": {
    "_translate": "实现该特征对类型的意义",
    "_note": ""
  },
  "The conditions in which you’re allowed or not allowed to implement the trait": {
    "_translate": "允许或不允许实现该特征的条件。",
    "_note": ""
  },
  "Examples of operations that require the trait": {
    "_translate": "需要特征的操作示例，",
    "_note": ""
  },
  "Deriving PartialOrd implements the partial_cmp method, which returns an Option<Ordering> that will be None when the values given don’t produce an ordering. An example of a value that doesn’t produce an ordering, even though most values of that type can be compared, is the NaN floating point value. Calling partial_cmp with any floating point number and the NaN floating point value will return None.": {
    "_translate": "派生 <code>PartialOrd</code> 实现了 <code>partial_cmp</code> 方法，该方法返回一个 <code>Option&lt;Ordering&gt;</code>，当给定的值无法产生排序时，该值将为 <code>None</code>。一个无法产生排序的值的例子是 <code>NaN</code> 浮点值，即使该类型的大多数值可以进行比较。使用任何浮点数和 <code>NaN</code> 浮点值调用 <code>partial_cmp</code> 都将返回 <code>None</code>。",
    "_note": ""
  },
  "The Clone trait allows you to explicitly create a deep copy of a value, and the duplication process might involve running arbitrary code and copying heap data. See Variables and Data Interacting with Clone” in Chapter 4 for more information on Clone.": {
    "_translate": "<code>Clone</code> 特性允许你显式地创建一个值的深拷贝，复制过程可能涉及运行任意代码和复制堆数据。有关 <code>Clone</code> 的更多信息，请参见第 4 章的“<a href=\"ch04-01-what-is-ownership.html#variables-and-data-interacting-with-clone\">变量和数据与 Clone 交互</a>”部分。",
    "_note": ""
  },
  "The Copy trait allows you to duplicate a value by only copying bits stored on the stack; no arbitrary code is necessary. See “Stack-Only Data: Copy” in Chapter 4 for more information on Copy.": {
    "_translate": "<code>Copy</code> 特性允许你通过仅复制栈上存储的位来复制一个值；不需要任意代码。有关 <code>Copy</code> 的更多信息，请参见第 4 章的 <a href=\"ch04-01-what-is-ownership.html#stack-only-data-copy\">“仅栈数据：Copy”</a><!-- ignore -->。",
    "_note": ""
  },
  "The Default::default function is commonly used in combination with the struct update syntax discussed in “Creating Instances From Other Instances With Struct Update Syntax” in Chapter 5. You can customize a few fields of a struct and then set and use a default value for the rest of the fields by using ..Default::default().": {
    "_translate": "<code>Default::default</code> 函数通常与结构体更新语法结合使用，该语法在第 5 章的 <a href=\"ch05-01-defining-structs.html#creating-instances-from-other-instances-with-struct-update-syntax\">“使用结构体更新语法从其他实例创建实例”</a><!--\nignore --> 中讨论。你可以自定义结构体的几个字段，然后使用 <code>..Default::default()</code> 为其余字段设置和使用默认值。",
    "_note": ""
  },
  "If you want different behavior from that provided by the derive attribute, consult the standard library documentation for each trait for details on how to manually implement them.": {
    "_translate": "如果您希望的行为与 <code>derive</code> 属性提供的不同，\n请参阅 <a href=\"../std/index.html\">标准库文档</a><!-- ignore -->\n以了解如何手动实现每个特征的详细信息。",
    "_note": ""
  },
  "The traits listed here are the only ones defined by the standard library that can be implemented on your types using derive. Other traits defined in the standard library don’t have sensible default behavior, so it’s up to you to implement them in the way that makes sense for what you’re trying to accomplish.": {
    "_translate": "这里列出的特征是标准库中唯一可以使用<code>derive</code>在你的类型上实现的特征。标准库中定义的其他特征没有合理的默认行为，因此需要你自己以适合你目标的方式实现它们。",
    "_note": ""
  },
  "The Debug trait is required, for example, in the use of the assert_eq! macro. This macro prints the values of instances given as arguments if the equality assertion fails so programmers can see why the two instances weren’t equal.": {
    "_translate": "<code>Debug</code> 特性在使用 <code>assert_eq!</code> 宏时是必需的。这个宏在等式断言失败时会打印出作为参数给出的实例的值，以便程序员可以看到为什么这两个实例不相等。",
    "_note": ""
  },
  "An example of when Clone is required is when calling the to_vec method on a slice. The slice doesn’t own the type instances it contains, but the vector returned from to_vec will need to own its instances, so to_vec calls clone on each item. Thus the type stored in the slice must implement Clone.": {
    "_translate": "一个需要 <code>Clone</code> 的例子是在切片上调用 <code>to_vec</code> 方法时。切片不拥有它包含的类型实例，但 <code>to_vec</code> 返回的向量需要拥有其实例，因此 <code>to_vec</code> 会对每个项目调用 <code>clone</code>。因此，存储在切片中的类型必须实现 <code>Clone</code>。",
    "_note": ""
  },
  "Deriving PartialOrd implements the partial_cmp method, which returns an Option<Ordering> that will be None when the values given don’t produce an ordering. An example of a value that doesn’t produce an ordering, even though most values of that type can be compared, is the not-a-number (NaN) floating point value. Calling partial_cmp with any floating-point number and the NaN floating-point value will return None.": {
    "_translate": "派生 <code>PartialOrd</code> 实现了 <code>partial_cmp</code> 方法，该方法返回一个 <code>Option&lt;Ordering&gt;</code>，当给定的值无法产生排序时，该值将为 <code>None</code>。一个无法产生排序的值的例子是浮点数中的非数字（<code>NaN</code>）值，即使该类型的大多数值可以进行比较。使用任何浮点数和 <code>NaN</code> 浮点数调用 <code>partial_cmp</code> 都将返回 <code>None</code>。",
    "_note": ""
  },
  "The Default::default function is commonly used in combination with the struct update syntax discussed in “Creating Instances from Other Instances with Struct Update Syntax” in Chapter 5. You can customize a few fields of a struct and then set and use a default value for the rest of the fields by using ..Default::default().": {
    "_translate": "<code>Default::default</code> 函数通常与结构体更新语法结合使用，相关内容在 <a href=\"ch05-01-defining-structs.html#creating-instances-from-other-instances-with-struct-update-syntax\">“使用结构体更新语法从其他实例创建实例”</a> 一节中有讨论。你可以自定义结构体的几个字段，然后使用 <code>..Default::default()</code> 为其余字段设置和使用默认值。",
    "_note": ""
  },
  "The Debug trait is required, for example, in the use of the assert_eq! macro. This macro prints the values of instances given as arguments if the equality assertion fails so that programmers can see why the two instances weren’t equal.": {
    "_translate": "<code>Debug</code> 特性在使用 <code>assert_eq!</code> 宏时是必需的。这个宏在等式断言失败时会打印出作为参数给出的实例的值，以便程序员可以看到为什么这两个实例不相等。",
    "_note": ""
  },
  "The list of derivable traits provided in this appendix is not comprehensive: Libraries can implement derive for their own traits, making the list of traits you can use derive with truly open ended. Implementing derive involves using a procedural macro, which is covered in the “Custom derive Macros” section in Chapter 20.": {
    "_translate": "本附录中提供的可派生特征列表并不全面：\n库可以为其自己的特征实现<code>derive</code>，使您可以使用<code>derive</code>的特征列表真正开放。实现<code>derive</code>\n涉及使用过程宏，这在第20章的<a href=\"ch20-05-macros.html#custom-derive-macros\">“自定义<code>derive</code>\n宏”</a>部分中介绍。",
    "_note": ""
  },
  "An example of when Eq is required is for keys in a HashMap<K, V> so that the HashMap<K, V> can tell whether two keys are the same.": {
    "_translate": "一个需要 <code>Eq</code> 的例子是在 <code>HashMap&lt;K, V&gt;</code> 中的键，以便 <code>HashMap&lt;K, V&gt;</code> 可以判断两个键是否相同。",
    "_note": ""
  },
  "The Eq trait has no methods. Its purpose is to signal that for every value of the annotated type, the value is equal to itself. The Eq trait can only be applied to types that also implement PartialEq, although not all types that implement PartialEq can implement Eq. One example of this is floating-point number types: The implementation of floating-point numbers states that two instances of the not-a-number (NaN) value are not equal to each other.": {
    "_translate": "<code>Eq</code> 特性没有方法。它的目的是表明对于标注类型的每个值，该值都等于自身。<code>Eq</code> 特性只能应用于也实现了 <code>PartialEq</code> 的类型，尽管并非所有实现了 <code>PartialEq</code> 的类型都能实现 <code>Eq</code>。一个例子是浮点数类型：浮点数的实现规定两个非数字（<code>NaN</code>）值实例彼此不相等。",
    "_note": ""
  },
  "The Clone trait allows you to explicitly create a deep copy of a value, and the duplication process might involve running arbitrary code and copying heap data. See the “Variables and Data Interacting with Clone” section in Chapter 4 for more information on Clone.": {
    "_translate": "<code>Clone</code> 特性允许你显式地创建一个值的深拷贝，复制过程可能涉及运行任意代码和复制堆数据。有关 <code>Clone</code> 的更多信息，请参见第 4 章的 <a href=\"ch04-01-what-is-ownership.html#variables-and-data-interacting-with-clone\">“变量和数据与 Clone 交互”</a><!-- ignore --> 部分。",
    "_note": ""
  },
  "Deriving PartialOrd implements the partial_cmp method, which returns an Option<Ordering> that will be None when the values given don’t produce an ordering. An example of a value that doesn’t produce an ordering, even though most values of that type can be compared, is the NaN floating point value. Calling partial_cmp with any floating-point number and the NaN floating-point value will return None.": {
    "_translate": "派生 <code>PartialOrd</code> 实现了 <code>partial_cmp</code> 方法，该方法返回一个 <code>Option&lt;Ordering&gt;</code>，当给定的值无法产生排序时，该值将为 <code>None</code>。一个无法产生排序的值的例子是 <code>NaN</code> 浮点值，即使该类型的大多数值可以进行比较。使用任何浮点数和 <code>NaN</code> 浮点值调用 <code>partial_cmp</code> 都将返回 <code>None</code>。",
    "_note": ""
  },
  "You can derive Copy on any type whose parts all implement Copy. A type that implements Copy must also implement Clone because a type that implements Copy has a trivial implementation of Clone that performs the same task as Copy.": {
    "_translate": "你可以为所有部分都实现了<code>Copy</code>的任何类型派生<code>Copy</code>。一个实现了<code>Copy</code>的类型也必须实现<code>Clone</code>，因为一个实现了<code>Copy</code>的类型有一个简单的<code>Clone</code>实现，其执行的任务与<code>Copy</code>相同。",
    "_note": ""
  },
  "The Default::default function is commonly used in combination with the struct update syntax discussed in the “Creating Instances from Other Instances with Struct Update Syntax” section in Chapter 5. You can customize a few fields of a struct and then set and use a default value for the rest of the fields by using ..Default::default().": {
    "_translate": "<code>Default::default</code> 函数通常与结构体更新语法结合使用，相关内容在第 5 章的 <a href=\"ch05-01-defining-structs.html#creating-instances-from-other-instances-with-struct-update-syntax\">“使用结构体更新语法从其他实例创建实例”</a> 部分中讨论。你可以自定义结构体的几个字段，然后使用 <code>..Default::default()</code> 为其余字段设置和使用默认值。",
    "_note": ""
  }
}