{
  "Hello, World!": {
    "_translate": "<a class=\"header\" href=\"#hello-world\">你好，世界！</a>",
    "_note": ""
  },
  "Now that you’ve installed Rust, it’s time to write your first Rust program. It’s traditional when learning a new language to write a little program that prints the text Hello, world! to the screen, so we’ll do the same here!": {
    "_translate": "现在你已经安装了 Rust，是时候编写你的第一个 Rust 程序了。\n学习新语言时，传统上会编写一个将文本 <code>Hello, world!</code> 打印到屏幕上的小程序，所以我们这里也这样做！",
    "_note": ""
  },
  "Creating a Project Directory": {
    "_translate": "<a class=\"header\" href=\"#creating-a-project-directory\">创建项目目录</a>",
    "_note": ""
  },
  "You’ll start by making a directory to store your Rust code. It doesn’t matter to Rust where your code lives, but for the exercises and projects in this book, we suggest making a projects directory in your home directory and keeping all your projects there.": {
    "_translate": "你将首先创建一个目录来存储你的Rust代码。Rust并不关心你的代码存放在哪里，但对于本书中的练习和项目，我们建议在你的主目录中创建一个<em>projects</em>目录，并将所有项目保存在那里。",
    "_note": ""
  },
  "Note: This book assumes basic familiarity with the command line. Rust makes no specific demands about your editing or tooling or where your code lives, so if you prefer to use an integrated development environment (IDE) instead of the command line, feel free to use your favorite IDE. Many IDEs now have some degree of Rust support; check the IDE’s documentation for details. The Rust team has been focusing on enabling great IDE support via rust-analyzer. See Appendix D for more details.": {
    "_translate": "注意：本书假定读者对命令行有基本的了解。Rust 对你的编辑器或工具没有特定的要求，也不限制代码的存放位置，因此，如果你更喜欢使用集成开发环境（IDE）而不是命令行，可以自由选择你最喜欢的 IDE。许多 IDE 现在都提供一定程度的 Rust 支持；请查阅 IDE 的文档以获取详细信息。Rust 团队一直致力于通过 <code>rust-analyzer</code> 提供出色的 IDE 支持。有关更多详细信息，请参阅 <a href=\"appendix-04-useful-development-tools.html\">附录 D</a><!-- ignore -->。",
    "_note": ""
  },
  "For Linux, macOS, and PowerShell on Windows, enter this:": {
    "_translate": "对于 Linux、macOS 和 Windows 上的 PowerShell，请输入以下内容：",
    "_note": ""
  },
  "Open a terminal and enter the following commands to make a projects directory and a directory for the “Hello, world!” project within the projects directory.": {
    "_translate": "打开终端并输入以下命令以创建一个 <em>projects</em> 目录和在 <em>projects</em> 目录内的 “Hello, world!” 项目目录。",
    "_note": ""
  },
  "For Windows CMD, enter this:": {
    "_translate": "对于 Windows CMD，输入这个:",
    "_note": ""
  },
  "Writing and Running a Rust Program": {
    "_translate": "<a class=\"header\" href=\"#writing-and-running-a-rust-program\">编写和运行一个 Rust 程序</a>",
    "_note": ""
  },
  "Next, make a new source file and call it main.rs. Rust files always end with the .rs extension. If you’re using more than one word in your filename, the convention is to use an underscore to separate them. For example, use hello_world.rs rather than helloworld.rs.": {
    "_translate": "接下来，创建一个新的源文件并将其命名为<em>main.rs</em>。Rust 文件总是以 <em>.rs</em> 扩展名结尾。如果你的文件名包含多个单词，惯例是使用下划线将它们分隔开。例如，使用 <em>hello_world.rs</em> 而不是 <em>helloworld.rs</em>。",
    "_note": ""
  },
  "Now open the main.rs file you just created and enter the code in Listing 1-1.": {
    "_translate": "现在打开你刚刚创建的<em>main.rs</em>文件，并输入列表1-1中的代码。",
    "_note": ""
  },
  "On Windows, enter the command .\\main.exe instead of ./main:": {
    "_translate": "在 Windows 上，输入命令 <code>.\\main.exe</code> 而不是 <code>./main</code>：",
    "_note": ""
  },
  "Save the file and go back to your terminal window in the ~/projects/hello_world directory. On Linux or macOS, enter the following commands to compile and run the file:": {
    "_translate": "保存文件并返回到 <em>~/projects/hello_world</em> 目录下的终端窗口。在 Linux 或 macOS 上，输入以下命令来编译和运行文件：",
    "_note": ""
  },
  "Regardless of your operating system, the string Hello, world! should print to the terminal. If you don’t see this output, refer back to the “Troubleshooting” part of the Installation section for ways to get help.": {
    "_translate": "无论您使用的是哪种操作系统，字符串<code>Hello, world!</code>都应该打印到终端。如果您没有看到此输出，请参阅<a href=\"ch01-01-installation.html#troubleshooting\">“故障排除”</a><!-- ignore -->部分的安装章节以获取帮助。",
    "_note": ""
  },
  "If Hello, world! did print, congratulations! You’ve officially written a Rust program. That makes you a Rust programmer—welcome!": {
    "_translate": "如果 <code>Hello, world!</code> 确实打印出来了，恭喜！您已经正式编写了一个 Rust 程序。这使您成为了一名 Rust 程序员——欢迎！",
    "_note": ""
  },
  "Anatomy of a Rust Program": {
    "_translate": "<a class=\"header\" href=\"#anatomy-of-a-rust-program\">Rust 程序的结构</a>",
    "_note": ""
  },
  "Let’s review this “Hello, world!” program in detail. Here’s the first piece of the puzzle:": {
    "_translate": "让我们详细回顾这个“Hello, world！”程序。这是第一个谜题部分：",
    "_note": ""
  },
  "These lines define a function named main. The main function is special: it is always the first code that runs in every executable Rust program. Here, the first line declares a function named main that has no parameters and returns nothing. If there were parameters, they would go inside the parentheses ().": {
    "_translate": "这些行定义了一个名为<code>main</code>的函数。<code>main</code>函数是特殊的：它是每个可执行Rust程序中首先运行的代码。在这里，第一行声明了一个名为<code>main</code>的函数，该函数没有参数且不返回任何值。如果有参数，它们将放在括号<code>()</code>内。",
    "_note": ""
  },
  "The function body is wrapped in {}. Rust requires curly brackets around all function bodies. It’s good style to place the opening curly bracket on the same line as the function declaration, adding one space in between.": {
    "_translate": "函数体被包裹在 <code>{}</code> 中。Rust 要求所有函数体都用大括号包围。最好将开始的大括号放在与函数声明相同的行上，并在中间添加一个空格。",
    "_note": ""
  },
  "The body of the main function holds the following code:": {
    "_translate": "<code>main</code> 函数的主体包含以下代码：",
    "_note": ""
  },
  "This line does all the work in this little program: it prints text to the screen. There are four important details to notice here.": {
    "_translate": "这行代码完成了这个小程序的所有工作：它将文本打印到屏幕上。这里有四个重要的细节需要注意。",
    "_note": ""
  },
  "First, Rust style is to indent with four spaces, not a tab.": {
    "_translate": "首先，Rust 的风格是使用四个空格缩进，而不是制表符。",
    "_note": ""
  },
  "Note: If you want to stick to a standard style across Rust projects, you can use an automatic formatter tool called rustfmt to format your code in a particular style (more on rustfmt in Appendix D). The Rust team has included this tool with the standard Rust distribution, as rustc is, so it should already be installed on your computer!": {
    "_translate": "注意：如果您希望在 Rust 项目中保持一致的风格，可以使用一个名为 <code>rustfmt</code> 的自动格式化工具来将代码格式化为特定风格（更多关于 <code>rustfmt</code> 的内容请参见 <a href=\"appendix-04-useful-development-tools.html\">附录 D</a><!-- ignore -->）。Rust 团队已将此工具包含在标准的 Rust 分发包中，就像 <code>rustc</code> 一样，因此它应该已经安装在您的计算机上！",
    "_note": ""
  },
  "Third, you see the \"Hello, world!\" string. We pass this string as an argument to println!, and the string is printed to the screen.": {
    "_translate": "第三，您看到 <code>\"Hello, world!\"</code> 字符串。我们将这个字符串作为参数传递给 <code>println!</code>，然后字符串会被打印到屏幕上。",
    "_note": ""
  },
  "Second, println! calls a Rust macro. If it had called a function instead, it would be entered as println (without the !). We’ll discuss Rust macros in more detail in Chapter 20. For now, you just need to know that using a ! means that you’re calling a macro instead of a normal function and that macros don’t always follow the same rules as functions.": {
    "_translate": "第二，<code>println!</code> 调用了一个 Rust 宏。如果它调用的是一个函数，那么它将被写为 <code>println</code>（没有 <code>!</code>）。我们将在第 20 章详细讨论 Rust 宏。现在，你只需要知道使用 <code>!</code> 意味着你调用的是一个宏而不是普通函数，并且宏并不总是遵循与函数相同的规则。",
    "_note": ""
  },
  "Fourth, we end the line with a semicolon (;), which indicates that this expression is over and the next one is ready to begin. Most lines of Rust code end with a semicolon.": {
    "_translate": "第四，我们在行末加上分号（<code>;</code>），这表示该表达式已结束，下一个表达式可以开始。大多数 Rust 代码行以分号结尾。",
    "_note": ""
  },
  "Compiling and Running Are Separate Steps": {
    "_translate": "<a class=\"header\" href=\"#compiling-and-running-are-separate-steps\">编译和运行是分开的步骤</a>",
    "_note": ""
  },
  "You’ve just run a newly created program, so let’s examine each step in the process.": {
    "_translate": "您刚刚运行了一个新创建的程序，所以让我们来检查过程中的每一步。",
    "_note": ""
  },
  "Before running a Rust program, you must compile it using the Rust compiler by entering the rustc command and passing it the name of your source file, like this:": {
    "_translate": "在运行 Rust 程序之前，您必须使用 Rust 编译器通过输入 <code>rustc</code> 命令并传递您的源文件名来编译它，如下所示：",
    "_note": ""
  },
  "If you have a C or C++ background, you’ll notice that this is similar to gcc or clang. After compiling successfully, Rust outputs a binary executable.": {
    "_translate": "如果你有 C 或 C++ 背景，你会注意到这与 <code>gcc</code> 或 <code>clang</code> 类似。编译成功后，Rust 会输出一个二进制可执行文件。",
    "_note": ""
  },
  "On Linux, macOS, and PowerShell on Windows, you can see the executable by entering the ls command in your shell:": {
    "_translate": "在 Linux、macOS 和 Windows 上的 PowerShell 中，您可以通过在 shell 中输入 <code>ls</code> 命令来查看可执行文件：",
    "_note": ""
  },
  "On Linux and macOS, you’ll see two files. With PowerShell on Windows, you’ll see the same three files that you would see using CMD. With CMD on Windows, you would enter the following:": {
    "_translate": "在 Linux 和 macOS 上，您会看到两个文件。使用 Windows 上的 PowerShell，您会看到与使用 CMD 时相同的三个文件。使用 Windows 上的 CMD，您会输入以下内容：",
    "_note": ""
  },
  "This shows the source code file with the .rs extension, the executable file (main.exe on Windows, but main on all other platforms), and, when using Windows, a file containing debugging information with the .pdb extension. From here, you run the main or main.exe file, like this:": {
    "_translate": "这显示了带有 <em>.rs</em> 扩展名的源代码文件，可执行文件\n(<em>main.exe</em> 在 Windows 上，但在所有其他平台上为 <em>main</em>)，以及在使用\nWindows 时，包含调试信息的文件，扩展名为 <em>.pdb</em>。\n从这里，您运行 <em>main</em> 或 <em>main.exe</em> 文件，如下所示：",
    "_note": ""
  },
  "If your main.rs is your “Hello, world!” program, this line prints Hello, world! to your terminal.": {
    "_translate": "如果你的 <em>main.rs</em> 是你的“Hello, world!” 程序，这行代码会将 <code>Hello, world!</code> 打印到你的终端。",
    "_note": ""
  },
  "Just compiling with rustc is fine for simple programs, but as your project grows, you’ll want to manage all the options and make it easy to share your code. Next, we’ll introduce you to the Cargo tool, which will help you write real-world Rust programs.": {
    "_translate": "只需使用<code>rustc</code>编译对于简单的程序来说已经足够，但随着项目的增长，您将希望管理所有选项并使分享代码变得容易。接下来，我们将向您介绍Cargo工具，它将帮助您编写实际的Rust程序。",
    "_note": ""
  },
  "If you’re more familiar with a dynamic language, such as Ruby, Python, or JavaScript, you might not be used to compiling and running a program as separate steps. Rust is an ahead-of-time compiled language, meaning you can compile a program and give the executable to someone else, and they can run it even without having Rust installed. If you give someone a .rb, .py, or .js file, they need to have a Ruby, Python, or JavaScript implementation installed (respectively). But in those languages, you only need one command to compile and run your program. Everything is a trade-off in language design.": {
    "_translate": "如果你更熟悉像 Ruby、Python 或 JavaScript 这样的动态语言，你可能不习惯将编译和运行程序作为单独的步骤。Rust 是一种<em>提前编译</em>语言，这意味着你可以编译一个程序并将可执行文件交给其他人，即使他们没有安装 Rust 也可以运行它。如果你给某人一个<em>.rb</em>、<em>.py</em> 或 <em>.js</em> 文件，他们需要分别安装 Ruby、Python 或 JavaScript 的实现。但在这些语言中，你只需要一个命令就可以编译和运行你的程序。语言设计中的每件事都是权衡。",
    "_note": ""
  },
  "Hello, World! - The Rust Programming Language": {
    "_translate": "你好，世界！ - The Rust Programming Language",
    "_note": ""
  },
  "Second, you see the \"Hello, world!\" string. We pass this string as an argument to println!, and the string is printed to the screen.": {
    "_translate": "其次，您看到 <code>\"Hello, world!\"</code> 字符串。我们将这个字符串作为参数传递给 <code>println!</code>，然后字符串会被打印到屏幕上。",
    "_note": ""
  },
  "First, println! calls a Rust macro. If it had called a function instead, it would be entered as println (without the !). We’ll discuss Rust macros in more detail in Chapter 20. For now, you just need to know that using a ! means that you’re calling a macro instead of a normal function and that macros don’t always follow the same rules as functions.": {
    "_translate": "首先，<code>println!</code> 调用了一个 Rust 宏。如果它调用的是一个函数，那么它将被写为 <code>println</code>（没有 <code>!</code>）。我们将在第 20 章详细讨论 Rust 宏。现在，你只需要知道使用 <code>!</code> 意味着你调用的是一个宏而不是普通函数，并且宏并不总是遵循与函数相同的规则。",
    "_note": ""
  },
  "Third, we end the line with a semicolon (;), which indicates that this expression is over and the next one is ready to begin. Most lines of Rust code end with a semicolon.": {
    "_translate": "第三，我们在行末加上分号（<code>;</code>），这表示该表达式已结束，下一个表达式可以开始。大多数 Rust 代码行以分号结尾。",
    "_note": ""
  },
  "This line does all the work in this little program: it prints text to the screen. There are three important details to notice here.": {
    "_translate": "这行代码完成了这个小程序的所有工作：它将文本打印到屏幕上。这里有三个重要的细节需要注意。",
    "_note": ""
  },
  "On Windows, enter the command .\\main instead of ./main:": {
    "_translate": "在 Windows 上，输入命令 <code>.\\main</code> 而不是 <code>./main</code>：",
    "_note": ""
  },
  "First, println! calls a Rust macro. If it had called a function instead, it would be entered as println (without the !). Rust macros are a way to write code that generates code to extend Rust syntax, and we’ll discuss them in more detail in Chapter 20. For now, you just need to know that using a ! means that you’re calling a macro instead of a normal function and that macros don’t always follow the same rules as functions.": {
    "_translate": "首先，<code>println!</code> 调用了一个 Rust 宏。如果它调用的是一个函数，那么它将被写为 <code>println</code>（没有 <code>!</code>）。Rust 宏是一种编写生成代码的代码以扩展 Rust 语法的方式，我们将在 <a href=\"ch20-05-macros.html\">第 20 章</a><!-- ignore --> 中更详细地讨论它们。现在，你只需要知道使用 <code>!</code> 意味着你调用的是一个宏而不是一个普通函数，并且宏并不总是遵循与函数相同的规则。",
    "_note": ""
  },
  "Project Directory Setup": {
    "_translate": "<a class=\"header\" href=\"#project-directory-setup\">项目目录设置</a>",
    "_note": ""
  },
  "Rust Program Basics": {
    "_translate": "<a class=\"header\" href=\"#rust-program-basics\">Rust 程序基础</a>",
    "_note": ""
  },
  "Note: This book assumes basic familiarity with the command line. Rust makes no specific demands about your editing or tooling or where your code lives, so if you prefer to use an IDE instead of the command line, feel free to use your favorite IDE. Many IDEs now have some degree of Rust support; check the IDE’s documentation for details. The Rust team has been focusing on enabling great IDE support via rust-analyzer. See Appendix D for more details.": {
    "_translate": "注意：本书假定读者对命令行有基本的了解。Rust 对你的编辑器、工具或代码存放位置没有特定要求，因此，如果你更喜欢使用 IDE 而不是命令行，可以自由选择你最喜欢的 IDE。许多 IDE 现在都提供一定程度的 Rust 支持；请查阅 IDE 的文档以获取详细信息。Rust 团队一直致力于通过 <code>rust-analyzer</code> 提供出色的 IDE 支持。有关更多详细信息，请参阅 <a href=\"appendix-04-useful-development-tools.html\">附录 D</a><!-- ignore -->。",
    "_note": ""
  },
  "The Anatomy of a Rust Program": {
    "_translate": "<a class=\"header\" href=\"#the-anatomy-of-a-rust-program\">Rust 程序的结构</a>",
    "_note": ""
  },
  "This line does all the work in this little program: It prints text to the screen. There are three important details to notice here.": {
    "_translate": "这行代码完成了这个小程序的所有工作：它将文本打印到屏幕上。这里有三个重要的细节需要注意。",
    "_note": ""
  },
  "These lines define a function named main. The main function is special: It is always the first code that runs in every executable Rust program. Here, the first line declares a function named main that has no parameters and returns nothing. If there were parameters, they would go inside the parentheses (()).": {
    "_translate": "这些行定义了一个名为 <code>main</code> 的函数。 <code>main</code> 函数是特殊的：它是每个可执行 Rust 程序中首先运行的代码。在这里，第一行声明了一个名为 <code>main</code> 的函数，该函数没有参数且不返回任何值。如果有参数，它们将放在括号 (<code>()</code>) 内。",
    "_note": ""
  },
  "Compilation and Execution": {
    "_translate": "<a class=\"header\" href=\"#compilation-and-execution\">编译和执行</a>",
    "_note": ""
  },
  "Third, we end the line with a semicolon (;), which indicates that this expression is over, and the next one is ready to begin. Most lines of Rust code end with a semicolon.": {
    "_translate": "第三，我们在行末加上分号（<code>;</code>），这表示该表达式已结束，下一个表达式可以开始。大多数 Rust 代码行以分号结尾。",
    "_note": ""
  }
}