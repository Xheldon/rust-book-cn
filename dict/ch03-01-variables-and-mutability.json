{
  "Variables and Mutability": {
    "_translate": "<a class=\"header\" href=\"#variables-and-mutability\">变量和可变性</a>",
    "_note": ""
  },
  "When a variable is immutable, once a value is bound to a name, you can’t change that value. To illustrate this, generate a new project called variables in your projects directory by using cargo new variables.": {
    "_translate": "当变量是不可变的，一旦一个值被绑定到一个名称，你就不能改变这个值。为了说明这一点，请在你的<em>projects</em>目录中使用<code>cargo new variables</code>生成一个名为<em>variables</em>的新项目。",
    "_note": ""
  },
  "As mentioned in the “Storing Values with Variables” section, by default, variables are immutable. This is one of many nudges Rust gives you to write your code in a way that takes advantage of the safety and easy concurrency that Rust offers. However, you still have the option to make your variables mutable. Let’s explore how and why Rust encourages you to favor immutability and why sometimes you might want to opt out.": {
    "_translate": "如<a href=\"ch02-00-guessing-game-tutorial.html#storing-values-with-variables\">“使用变量存储值”</a><!-- ignore -->部分所述，默认情况下，变量是不可变的。这是 Rust 为了让你以利用 Rust 提供的安全性和易于并发的方式编写代码而给予的许多提示之一。然而，你仍然可以选择将变量设为可变的。让我们探讨 Rust 为什么鼓励你倾向于不可变性，以及为什么有时你可能想要选择退出。",
    "_note": ""
  },
  "Then, in your new variables directory, open src/main.rs and replace its code with the following code, which won’t compile just yet:": {
    "_translate": "然后，在您的新 <em>variables</em> 目录中，打开 <em>src/main.rs</em> 并将其代码替换为以下代码，这些代码暂时还无法编译：",
    "_note": ""
  },
  "Filename: src/main.rs": {
    "_translate": "<span class=\"filename\">文件名: src/main.rs</span>",
    "_note": ""
  },
  "Save and run the program using cargo run. You should receive an error message regarding an immutability error, as shown in this output:": {
    "_translate": "使用 <code>cargo run</code> 保存并运行程序。您应该会收到一个关于不可变性的错误消息，如下所示：",
    "_note": ""
  },
  "This example shows how the compiler helps you find errors in your programs. Compiler errors can be frustrating, but really they only mean your program isn’t safely doing what you want it to do yet; they do not mean that you’re not a good programmer! Experienced Rustaceans still get compiler errors.": {
    "_translate": "这个例子展示了编译器如何帮助你找到程序中的错误。\n编译器错误可能会令人沮丧，但事实上它们只意味着你的程序还没有安全地完成你想要它做的事情；它们并<em>不</em>意味着你不是一个好程序员！有经验的 Rustaceans 仍然会遇到编译器错误。",
    "_note": ""
  },
  "You received the error message cannot assign twice to immutable variable `x` because you tried to assign a second value to the immutable x variable.": {
    "_translate": "您收到错误消息 <code>cannot assign twice to immutable variable `x`</code> 是因为您尝试给不可变的 <code>x</code> 变量赋第二个值。",
    "_note": ""
  },
  "It’s important that we get compile-time errors when we attempt to change a value that’s designated as immutable because this very situation can lead to bugs. If one part of our code operates on the assumption that a value will never change and another part of our code changes that value, it’s possible that the first part of the code won’t do what it was designed to do. The cause of this kind of bug can be difficult to track down after the fact, especially when the second piece of code changes the value only sometimes. The Rust compiler guarantees that when you state that a value won’t change, it really won’t change, so you don’t have to keep track of it yourself. Your code is thus easier to reason through.": {
    "_translate": "在我们尝试更改被指定为不可变的值时，获得编译时错误是很重要的，因为这种情况可能会导致错误。如果我们的代码的一部分基于某个值永远不会改变的假设运行，而代码的另一部分更改了该值，那么代码的第一部分可能无法按设计执行。这种错误的原因在事后可能很难追踪，特别是当代码的第二部分只在<em>某些时候</em>更改该值时。Rust编译器保证，当你声明一个值不会改变时，它确实不会改变，因此你不必自己跟踪它。因此，你的代码更容易理解。",
    "_note": ""
  },
  "For example, let’s change src/main.rs to the following:": {
    "_translate": "例如，让我们将 <em>src/main.rs</em> 更改为以下内容：",
    "_note": ""
  },
  "But mutability can be very useful, and can make code more convenient to write. Although variables are immutable by default, you can make them mutable by adding mut in front of the variable name as you did in Chapter 2. Adding mut also conveys intent to future readers of the code by indicating that other parts of the code will be changing this variable’s value.": {
    "_translate": "但是可变性非常有用，可以使代码更方便编写。\n虽然变量默认是不可变的，但您可以通过在变量名前添加<code>mut</code>来使其可变，就像您在<a href=\"ch02-00-guessing-game-tutorial.html#storing-values-with-variables\">第2章</a><!-- ignore -->中所做的那样。添加<code>mut</code>还可以向未来的代码读者传达意图，表明代码的其他部分将更改此变量的值。",
    "_note": ""
  },
  "When we run the program now, we get this:": {
    "_translate": "当我们现在运行程序时，我们得到的是这个：",
    "_note": ""
  },
  "Constants": {
    "_translate": "<a class=\"header\" href=\"#constants\">常量</a>",
    "_note": ""
  },
  "We’re allowed to change the value bound to x from 5 to 6 when mut is used. Ultimately, deciding whether to use mutability or not is up to you and depends on what you think is clearest in that particular situation.": {
    "_translate": "当我们使用 <code>mut</code> 时，允许我们将绑定到 <code>x</code> 的值从 <code>5</code> 更改为 <code>6</code>。最终，是否使用可变性取决于您，并且取决于您认为在特定情况下最清晰的方式。",
    "_note": ""
  },
  "Like immutable variables, constants are values that are bound to a name and are not allowed to change, but there are a few differences between constants and variables.": {
    "_translate": "像不可变变量一样，<em>常量</em>是绑定到名称的值，并且不允许更改，但常量和变量之间存在一些差异。",
    "_note": ""
  },
  "Constants can be declared in any scope, including the global scope, which makes them useful for values that many parts of code need to know about.": {
    "_translate": "常量可以在任何作用域中声明，包括全局作用域，这使得它们对于许多代码部分需要了解的值非常有用。",
    "_note": ""
  },
  "The last difference is that constants may be set only to a constant expression, not the result of a value that could only be computed at runtime.": {
    "_translate": "最后一个不同点是常量只能设置为常量表达式，不能设置为只能在运行时计算的值的结果。",
    "_note": ""
  },
  "First, you aren’t allowed to use mut with constants. Constants aren’t just immutable by default—they’re always immutable. You declare constants using the const keyword instead of the let keyword, and the type of the value must be annotated. We’ll cover types and type annotations in the next section, “Data Types”, so don’t worry about the details right now. Just know that you must always annotate the type.": {
    "_translate": "首先，你不允许在常量中使用<code>mut</code>。常量不仅默认是不可变的——它们始终是不可变的。你使用<code>const</code>关键字而不是<code>let</code>关键字来声明常量，而且值的类型<em>必须</em>被注解。我们将在下一节<a href=\"ch03-02-data-types.html#data-types\">“数据类型”</a><!-- ignore -->中讨论类型和类型注解，所以现在不用担心细节。只需知道你必须始终注解类型。",
    "_note": ""
  },
  "Here’s an example of a constant declaration:": {
    "_translate": "这是一个常量声明的例子：",
    "_note": ""
  },
  "Constants are valid for the entire time a program runs, within the scope in which they were declared. This property makes constants useful for values in your application domain that multiple parts of the program might need to know about, such as the maximum number of points any player of a game is allowed to earn, or the speed of light.": {
    "_translate": "常量在其声明的作用域内对程序运行的整个时间都有效。这一特性使得常量对于应用程序领域中多个程序部分可能需要了解的值非常有用，例如游戏中任何玩家允许获得的最高分数，或光速。",
    "_note": ""
  },
  "Naming hardcoded values used throughout your program as constants is useful in conveying the meaning of that value to future maintainers of the code. It also helps to have only one place in your code you would need to change if the hardcoded value needed to be updated in the future.": {
    "_translate": "将程序中使用的硬编码值命名为常量，有助于向未来的代码维护者传达该值的含义。同时，如果将来需要更新硬编码值，这样做也可以确保你只需要在一个地方进行更改。",
    "_note": ""
  },
  "Shadowing": {
    "_translate": "<a class=\"header\" href=\"#shadowing\">遮蔽</a>",
    "_note": ""
  },
  "The constant’s name is THREE_HOURS_IN_SECONDS and its value is set to the result of multiplying 60 (the number of seconds in a minute) by 60 (the number of minutes in an hour) by 3 (the number of hours we want to count in this program). Rust’s naming convention for constants is to use all uppercase with underscores between words. The compiler is able to evaluate a limited set of operations at compile time, which lets us choose to write out this value in a way that’s easier to understand and verify, rather than setting this constant to the value 10,800. See the Rust Reference’s section on constant evaluation for more information on what operations can be used when declaring constants.": {
    "_translate": "常量的名称是<code>THREE_HOURS_IN_SECONDS</code>，其值设置为60（一分钟的秒数）乘以60（一小时的分钟数）再乘以3（我们在这个程序中想要计算的小时数）。Rust中常量的命名约定是使用全大写并在单词之间使用下划线。编译器能够在编译时评估有限的操作，这使我们能够选择以更容易理解和验证的方式写出这个值，而不是将这个常量设置为10,800。有关声明常量时可以使用哪些操作的更多信息，请参阅<a href=\"../reference/const_eval.html\">Rust参考手册中关于常量评估的部分</a>。",
    "_note": ""
  },
  "As you saw in the guessing game tutorial in Chapter 2, you can declare a new variable with the same name as a previous variable. Rustaceans say that the first variable is shadowed by the second, which means that the second variable is what the compiler will see when you use the name of the variable. In effect, the second variable overshadows the first, taking any uses of the variable name to itself until either it itself is shadowed or the scope ends. We can shadow a variable by using the same variable’s name and repeating the use of the let keyword as follows:": {
    "_translate": "正如你在<a href=\"ch02-00-guessing-game-tutorial.html#comparing-the-guess-to-the-secret-number\">第2章</a><!-- ignore -->的猜数字游戏教程中所见，你可以声明一个与先前变量同名的新变量。Rustaceans 说，第一个变量被第二个变量<em>遮蔽</em>了，这意味着当你使用变量名时，编译器将看到的是第二个变量。实际上，第二个变量遮蔽了第一个变量，将变量名的任何使用指向自己，直到它自己被遮蔽或作用域结束。我们可以通过使用相同的变量名并重复使用<code>let</code>关键字来遮蔽一个变量，如下所示：",
    "_note": ""
  },
  "This program first binds x to a value of 5. Then it creates a new variable x by repeating let x =, taking the original value and adding 1 so the value of x is then 6. Then, within an inner scope created with the curly brackets, the third let statement also shadows x and creates a new variable, multiplying the previous value by 2 to give x a value of 12. When that scope is over, the inner shadowing ends and x returns to being 6. When we run this program, it will output the following:": {
    "_translate": "这个程序首先将 <code>x</code> 绑定到值 <code>5</code>。然后它通过重复 <code>let x =</code> 创建一个新变量 <code>x</code>，将原始值加 <code>1</code>，因此 <code>x</code> 的值变为 <code>6</code>。然后，在用大括号创建的内部作用域中，第三个 <code>let</code> 语句也遮蔽了 <code>x</code> 并创建了一个新变量，将前一个值乘以 <code>2</code>，使 <code>x</code> 的值为 <code>12</code>。当该作用域结束时，内部遮蔽结束，<code>x</code> 变回 <code>6</code>。当我们运行这个程序时，它将输出以下内容：",
    "_note": ""
  },
  "Shadowing is different from marking a variable as mut because we’ll get a compile-time error if we accidentally try to reassign to this variable without using the let keyword. By using let, we can perform a few transformations on a value but have the variable be immutable after those transformations have been completed.": {
    "_translate": "阴影与将变量标记为<code>mut</code>不同，因为如果我们不小心尝试在没有使用<code>let</code>关键字的情况下重新赋值给这个变量，我们会得到一个编译时错误。通过使用<code>let</code>，我们可以在值上执行一些转换，但在这些转换完成后，变量将变为不可变。",
    "_note": ""
  },
  "The other difference between mut and shadowing is that because we’re effectively creating a new variable when we use the let keyword again, we can change the type of the value but reuse the same name. For example, say our program asks a user to show how many spaces they want between some text by inputting space characters, and then we want to store that input as a number:": {
    "_translate": "<code>mut</code> 和遮蔽之间的另一个区别是，由于我们在再次使用 <code>let</code> 关键字时实际上是创建了一个新变量，因此我们可以更改值的类型但重用相同的名称。例如，假设我们的程序要求用户通过输入空格字符来显示他们希望在某些文本之间有多少个空格，然后我们希望将该输入存储为数字：",
    "_note": ""
  },
  "The error says we’re not allowed to mutate a variable’s type:": {
    "_translate": "错误说我们不允许改变变量的类型：",
    "_note": ""
  },
  "The first spaces variable is a string type and the second spaces variable is a number type. Shadowing thus spares us from having to come up with different names, such as spaces_str and spaces_num; instead, we can reuse the simpler spaces name. However, if we try to use mut for this, as shown here, we’ll get a compile-time error:": {
    "_translate": "第一个 <code>spaces</code> 变量是字符串类型，第二个 <code>spaces</code> 变量\n是数字类型。因此，遮蔽使我们不必想出不同的名称，例如 <code>spaces_str</code> 和 <code>spaces_num</code>；相反，我们可以重用更简单的 <code>spaces</code> 名称。但是，如果我们尝试为此使用 <code>mut</code>，如这里所示，我们将得到一个编译时错误：",
    "_note": ""
  },
  "Now that we’ve explored how variables work, let’s look at more data types they can have.": {
    "_translate": "现在我们已经探讨了变量的工作原理，让我们来看看它们可以拥有的更多数据类型。",
    "_note": ""
  },
  "Variables and Mutability - The Rust Programming Language": {
    "_translate": "变量和可变性 - 《Rust编程语言》",
    "_note": ""
  },
  "It’s important that we get compile-time errors when we attempt to change a value that’s designated as immutable, because this very situation can lead to bugs. If one part of our code operates on the assumption that a value will never change and another part of our code changes that value, it’s possible that the first part of the code won’t do what it was designed to do. The cause of this kind of bug can be difficult to track down after the fact, especially when the second piece of code changes the value only sometimes. The Rust compiler guarantees that when you state that a value won’t change, it really won’t change, so you don’t have to keep track of it yourself. Your code is thus easier to reason through.": {
    "_translate": "当我们试图更改被指定为不可变的值时，获得编译时错误是很重要的，因为这种情况可能会导致错误。如果我们的代码的一部分基于某个值永远不会改变的假设运行，而代码的另一部分改变了该值，那么代码的第一部分可能无法按设计执行。这种错误的原因在事后可能很难追踪，特别是当代码的第二部分只在<em>某些时候</em>改变该值时。Rust编译器保证，当你声明一个值不会改变时，它确实不会改变，因此你不必自己跟踪它。因此，你的代码更容易理解。",
    "_note": ""
  },
  "But mutability can be very useful and can make code more convenient to write. Although variables are immutable by default, you can make them mutable by adding mut in front of the variable name as you did in Chapter 2. Adding mut also conveys intent to future readers of the code by indicating that other parts of the code will be changing this variable’s value.": {
    "_translate": "但是可变性非常有用，可以使代码更方便编写。\n虽然变量默认是不可变的，但您可以通过在变量名前添加<code>mut</code>来使其可变，就像您在<a href=\"ch02-00-guessing-game-tutorial.html#storing-values-with-variables\">第2章</a><!-- ignore -->中所做的那样。添加<code>mut</code>还可以向未来的代码阅读者传达意图，表明代码的其他部分将更改此变量的值。",
    "_note": ""
  },
  "Declaring Constants": {
    "_translate": "<a class=\"header\" href=\"#declaring-constants\">声明常量</a>",
    "_note": ""
  },
  "Naming hardcoded values used throughout your program as constants is useful in conveying the meaning of that value to future maintainers of the code. It also helps to have only one place in your code that you would need to change if the hardcoded value needed to be updated in the future.": {
    "_translate": "将程序中到处使用的硬编码值命名为常量，有助于向未来的代码维护者传达该值的含义。同时，如果将来需要更新硬编码值，这样做也可以确保你只需要在一个地方进行更改。",
    "_note": ""
  },
  "The constant’s name is THREE_HOURS_IN_SECONDS, and its value is set to the result of multiplying 60 (the number of seconds in a minute) by 60 (the number of minutes in an hour) by 3 (the number of hours we want to count in this program). Rust’s naming convention for constants is to use all uppercase with underscores between words. The compiler is able to evaluate a limited set of operations at compile time, which lets us choose to write out this value in a way that’s easier to understand and verify, rather than setting this constant to the value 10,800. See the Rust Reference’s section on constant evaluation for more information on what operations can be used when declaring constants.": {
    "_translate": "常量的名称是<code>THREE_HOURS_IN_SECONDS</code>，其值设置为60（一分钟的秒数）乘以60（一小时的分钟数）再乘以3（我们在这个程序中想要计算的小时数）。Rust中常量的命名约定是全部使用大写，并在单词之间使用下划线。编译器能够在编译时评估有限的操作，这使我们能够选择以一种更容易理解和验证的方式写出这个值，而不是将这个常量设置为10,800。有关声明常量时可以使用哪些操作的更多信息，请参阅<a href=\"../reference/const_eval.html\">Rust参考手册中关于常量评估的部分</a>。",
    "_note": ""
  },
  "This program first binds x to a value of 5. Then, it creates a new variable x by repeating let x =, taking the original value and adding 1 so that the value of x is 6. Then, within an inner scope created with the curly brackets, the third let statement also shadows x and creates a new variable, multiplying the previous value by 2 to give x a value of 12. When that scope is over, the inner shadowing ends and x returns to being 6. When we run this program, it will output the following:": {
    "_translate": "这个程序首先将 <code>x</code> 绑定到值 <code>5</code>。然后，它通过重复 <code>let x =</code> 创建一个新的变量 <code>x</code>，将原始值加 <code>1</code>，使 <code>x</code> 的值变为 <code>6</code>。然后，在用大括号创建的内部作用域中，第三个 <code>let</code> 语句也遮蔽了 <code>x</code> 并创建了一个新的变量，将前一个值乘以 <code>2</code>，使 <code>x</code> 的值变为 <code>12</code>。当该作用域结束时，内部遮蔽结束，<code>x</code> 变回 <code>6</code>。当我们运行这个程序时，它将输出以下内容：",
    "_note": ""
  },
  "Shadowing is different from marking a variable as mut because we’ll get a compile-time error if we accidentally try to reassign to this variable without using the let keyword. By using let, we can perform a few transformations on a value but have the variable be immutable after those transformations have completed.": {
    "_translate": "遮蔽（Shadowing）与将变量标记为<code>mut</code>不同，因为如果我们不小心尝试在没有使用<code>let</code>关键字的情况下重新赋值给这个变量，我们会得到一个编译时错误。通过使用<code>let</code>，我们可以在值上执行一些转换，但在这些转换完成后，变量将变为不可变。",
    "_note": ""
  },
  "The first spaces variable is a string type, and the second spaces variable is a number type. Shadowing thus spares us from having to come up with different names, such as spaces_str and spaces_num; instead, we can reuse the simpler spaces name. However, if we try to use mut for this, as shown here, we’ll get a compile-time error:": {
    "_translate": "第一个 <code>spaces</code> 变量是字符串类型，第二个 <code>spaces</code> 变量是数字类型。因此，遮蔽让我们不必想出不同的名称，例如 <code>spaces_str</code> 和 <code>spaces_num</code>；相反，我们可以重用更简单的 <code>spaces</code> 名称。但是，如果我们尝试为此使用 <code>mut</code>，如这里所示，我们将得到一个编译时错误：",
    "_note": ""
  }
}