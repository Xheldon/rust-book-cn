{
  "Functions": {
    "_translate": "<a class=\"header\" href=\"#functions\">函数</a>",
    "_note": ""
  },
  "Functions are prevalent in Rust code. You’ve already seen one of the most important functions in the language: the main function, which is the entry point of many programs. You’ve also seen the fn keyword, which allows you to declare new functions.": {
    "_translate": "函数在 Rust 代码中非常普遍。您已经看到了语言中最重要的函数之一：<code>main</code> 函数，它是许多程序的入口点。您还看到了 <code>fn</code> 关键字，它允许您声明新函数。",
    "_note": ""
  },
  "Rust code uses snake case as the conventional style for function and variable names, in which all letters are lowercase and underscores separate words. Here’s a program that contains an example function definition:": {
    "_translate": "Rust 代码使用 <em>蛇形命名法</em> 作为函数和变量名的约定风格，其中所有字母都是小写，单词之间用下划线分隔。\n这里有一个包含示例函数定义的程序：",
    "_note": ""
  },
  "Filename: src/main.rs": {
    "_translate": "<span class=\"filename\">文件名: src/main.rs</span>",
    "_note": ""
  },
  "We define a function in Rust by entering fn followed by a function name and a set of parentheses. The curly brackets tell the compiler where the function body begins and ends.": {
    "_translate": "我们在 Rust 中通过输入 <code>fn</code> 后跟函数名和一组括号来定义函数。大括号告诉编译器函数体的开始和结束位置。",
    "_note": ""
  },
  "We can call any function we’ve defined by entering its name followed by a set of parentheses. Because another_function is defined in the program, it can be called from inside the main function. Note that we defined another_function after the main function in the source code; we could have defined it before as well. Rust doesn’t care where you define your functions, only that they’re defined somewhere in a scope that can be seen by the caller.": {
    "_translate": "我们可以通过输入函数名后跟一组括号来调用任何已定义的函数。因为 <code>another_function</code> 在程序中定义了，所以可以从 <code>main</code> 函数内部调用它。请注意，我们在源代码中 <em>在</em> <code>main</code> 函数 <em>之后</em> 定义了 <code>another_function</code>；我们也可以在 <code>main</code> 函数之前定义它。Rust 不关心你在哪里定义函数，只关心它们在调用者可以看见的作用域中被定义。",
    "_note": ""
  },
  "Let’s start a new binary project named functions to explore functions further. Place the another_function example in src/main.rs and run it. You should see the following output:": {
    "_translate": "让我们开始一个名为 <em>functions</em> 的新二进制项目，以进一步探索函数。将 <code>another_function</code> 示例放在 <em>src/main.rs</em> 中并运行它。你应该看到以下输出：",
    "_note": ""
  },
  "Parameters": {
    "_translate": "<a class=\"header\" href=\"#parameters\">参数</a>",
    "_note": ""
  },
  "The lines execute in the order in which they appear in the main function. First the “Hello, world!” message prints, and then another_function is called and its message is printed.": {
    "_translate": "这些行按照它们在<code>main</code>函数中出现的顺序执行。首先打印“Hello, world!”消息，然后调用<code>another_function</code>并打印其消息。",
    "_note": ""
  },
  "In this version of another_function we add a parameter:": {
    "_translate": "在这一版本的<code>another_function</code>中，我们添加了一个参数：",
    "_note": ""
  },
  "Try running this program; you should get the following output:": {
    "_translate": "尝试运行此程序；您应该得到以下输出：",
    "_note": ""
  },
  "We can define functions to have parameters, which are special variables that are part of a function’s signature. When a function has parameters, you can provide it with concrete values for those parameters. Technically, the concrete values are called arguments, but in casual conversation, people tend to use the words parameter and argument interchangeably for either the variables in a function’s definition or the concrete values passed in when you call a function.": {
    "_translate": "我们可以定义具有 <em>参数</em> 的函数，这些参数是函数签名中的一部分特殊变量。当函数具有参数时，您可以为这些参数提供具体的值。从技术上讲，这些具体的值被称为 <em>参数</em>，但在非正式的对话中，人们倾向于将 <em>参数</em> 和 <em>参数</em> 这两个词互换使用，无论是函数定义中的变量还是调用函数时传递的具体值。",
    "_note": ""
  },
  "In function signatures, you must declare the type of each parameter. This is a deliberate decision in Rust’s design: requiring type annotations in function definitions means the compiler almost never needs you to use them elsewhere in the code to figure out what type you mean. The compiler is also able to give more helpful error messages if it knows what types the function expects.": {
    "_translate": "在函数签名中，你<em>必须</em>声明每个参数的类型。这是 Rust 设计中的一个故意决定：要求在函数定义中使用类型注解意味着编译器几乎不需要你在代码的其他地方使用它们来确定你指的是什么类型。如果编译器知道函数期望的类型，它也能够给出更有帮助的错误信息。",
    "_note": ""
  },
  "The declaration of another_function has one parameter named x. The type of x is specified as i32. When we pass 5 in to another_function, the println! macro puts 5 where the pair of curly brackets containing x was in the format string.": {
    "_translate": "<code>another_function</code> 的声明有一个名为 <code>x</code> 的参数。 <code>x</code> 的类型被指定为 <code>i32</code>。当我们传递 <code>5</code> 给 <code>another_function</code> 时， <code>println!</code> 宏会将 <code>5</code> 放在格式字符串中包含 <code>x</code> 的大括号对的位置。",
    "_note": ""
  },
  "When defining multiple parameters, separate the parameter declarations with commas, like this:": {
    "_translate": "当定义多个参数时，用逗号分隔参数声明，如下所示：",
    "_note": ""
  },
  "Let’s try running this code. Replace the program currently in your functions project’s src/main.rs file with the preceding example and run it using cargo run:": {
    "_translate": "让我们尝试运行这段代码。将 <em>functions</em> 项目中的 <em>src/main.rs</em> 文件中的当前程序替换为前面的示例，并使用 <code>cargo run</code> 运行它：",
    "_note": ""
  },
  "This example creates a function named print_labeled_measurement with two parameters. The first parameter is named value and is an i32. The second is named unit_label and is type char. The function then prints text containing both the value and the unit_label.": {
    "_translate": "这个示例创建了一个名为 <code>print_labeled_measurement</code> 的函数，该函数有两个参数。第一个参数名为 <code>value</code>，是一个 <code>i32</code>。第二个参数名为 <code>unit_label</code>，类型为 <code>char</code>。然后该函数打印包含 <code>value</code> 和 <code>unit_label</code> 的文本。",
    "_note": ""
  },
  "Statements and Expressions": {
    "_translate": "<a class=\"header\" href=\"#statements-and-expressions\">语句和表达式</a>",
    "_note": ""
  },
  "Function bodies are made up of a series of statements optionally ending in an expression. So far, the functions we’ve covered haven’t included an ending expression, but you have seen an expression as part of a statement. Because Rust is an expression-based language, this is an important distinction to understand. Other languages don’t have the same distinctions, so let’s look at what statements and expressions are and how their differences affect the bodies of functions.": {
    "_translate": "函数体由一系列语句组成，可选地以一个表达式结束。到目前为止，我们讨论的函数还没有包含结束表达式，但你已经看到了作为语句一部分的表达式。因为 Rust 是一种基于表达式的语言，理解这一点非常重要。其他语言没有相同的区别，所以让我们看看语句和表达式是什么，以及它们的区别如何影响函数体。",
    "_note": ""
  },
  "Because we called the function with 5 as the value for value and 'h' as the value for unit_label, the program output contains those values.": {
    "_translate": "因为我们将函数调用时使用 <code>5</code> 作为 <code>value</code> 的值，使用 <code>'h'</code> 作为 <code>unit_label</code> 的值，所以程序输出包含这些值。",
    "_note": ""
  },
  "We’ve actually already used statements and expressions. Creating a variable and assigning a value to it with the let keyword is a statement. In Listing 3-1, let y = 6; is a statement.": {
    "_translate": "我们实际上已经使用过语句和表达式。使用 <code>let</code> 关键字创建变量并赋值是一个语句。在示例 3-1 中，<code>let y = 6;</code> 是一个语句。",
    "_note": ""
  },
  "Function definitions are also statements; the entire preceding example is a statement in itself. (As we will see below, calling a function is not a statement.)": {
    "_translate": "函数定义也是语句；前面的整个例子本身就是一个语句。（正如我们将在下面看到的，<em>调用</em>函数不是语句。）",
    "_note": ""
  },
  "Statements do not return values. Therefore, you can’t assign a let statement to another variable, as the following code tries to do; you’ll get an error:": {
    "_translate": "语句不返回值。因此，你不能将一个 <code>let</code> 语句 赋值给另一个变量，如下代码试图做的那样；你会得到一个错误：",
    "_note": ""
  },
  "When you run this program, the error you’ll get looks like this:": {
    "_translate": "当你运行这个程序时，你将得到的错误看起来像这样：",
    "_note": ""
  },
  "The let y = 6 statement does not return a value, so there isn’t anything for x to bind to. This is different from what happens in other languages, such as C and Ruby, where the assignment returns the value of the assignment. In those languages, you can write x = y = 6 and have both x and y have the value 6; that is not the case in Rust.": {
    "_translate": "<code>let y = 6</code> 语句不返回值，所以没有东西可以让 <code>x</code> 绑定。这与其他语言（如 C 和 Ruby）中的情况不同，在那些语言中，赋值会返回赋值的值。在那些语言中，你可以写 <code>x = y = 6</code> 并且 <code>x</code> 和 <code>y</code> 都会有值 <code>6</code>；但在 Rust 中则不是这样。",
    "_note": ""
  },
  "This expression:": {
    "_translate": "这个表达式:",
    "_note": ""
  },
  "Expressions evaluate to a value and make up most of the rest of the code that you’ll write in Rust. Consider a math operation, such as 5 + 6, which is an expression that evaluates to the value 11. Expressions can be part of statements: in Listing 3-1, the 6 in the statement let y = 6; is an expression that evaluates to the value 6. Calling a function is an expression. Calling a macro is an expression. A new scope block created with curly brackets is an expression, for example:": {
    "_translate": "表达式会计算出一个值，并且构成了你将在 Rust 中编写的大部分其他代码。考虑一个数学运算，如 <code>5 + 6</code>，这是一个计算出值 <code>11</code> 的表达式。表达式可以是语句的一部分：在列表 3-1 中，语句 <code>let y = 6;</code> 中的 <code>6</code> 是一个计算出值 <code>6</code> 的表达式。调用函数是一个表达式。调用宏是一个表达式。用大括号创建的新作用域块是一个表达式，例如：",
    "_note": ""
  },
  "Functions with Return Values": {
    "_translate": "<a class=\"header\" href=\"#functions-with-return-values\">具有返回值的函数</a>",
    "_note": ""
  },
  "is a block that, in this case, evaluates to 4. That value gets bound to y as part of the let statement. Note that the x + 1 line doesn’t have a semicolon at the end, which is unlike most of the lines you’ve seen so far. Expressions do not include ending semicolons. If you add a semicolon to the end of an expression, you turn it into a statement, and it will then not return a value. Keep this in mind as you explore function return values and expressions next.": {
    "_translate": "是一个块，在这种情况下，求值为 <code>4</code>。该值通过 <code>let</code> 语句绑定到 <code>y</code>。请注意，<code>x + 1</code> 这一行末尾没有分号，这与你迄今为止看到的大多数行不同。表达式不包括结尾的分号。如果你在表达式的末尾添加分号，就会将其变成语句，它将不再返回值。在接下来探索函数返回值和表达式时，请记住这一点。",
    "_note": ""
  },
  "Functions can return values to the code that calls them. We don’t name return values, but we must declare their type after an arrow (->). In Rust, the return value of the function is synonymous with the value of the final expression in the block of the body of a function. You can return early from a function by using the return keyword and specifying a value, but most functions return the last expression implicitly. Here’s an example of a function that returns a value:": {
    "_translate": "函数可以向调用它们的代码返回值。我们不命名返回值，但必须在箭头 (<code>-&gt;</code>) 后声明它们的类型。在 Rust 中，函数的返回值等同于函数体块中最后一个表达式的值。你可以通过使用 <code>return</code> 关键字并指定一个值来提前从函数返回，但大多数函数隐式地返回最后一个表达式。以下是一个返回值的函数示例：",
    "_note": ""
  },
  "There are no function calls, macros, or even let statements in the five function—just the number 5 by itself. That’s a perfectly valid function in Rust. Note that the function’s return type is specified too, as -> i32. Try running this code; the output should look like this:": {
    "_translate": "在 <code>five</code> 函数中没有函数调用、宏，甚至没有 <code>let</code> 语句——只有数字 <code>5</code> 本身。这在 Rust 中是一个完全有效的函数。请注意，函数的返回类型也被指定了，为 <code>-&gt; i32</code>。尝试运行这段代码；输出应该如下所示：",
    "_note": ""
  },
  "The 5 in five is the function’s return value, which is why the return type is i32. Let’s examine this in more detail. There are two important bits: first, the line let x = five(); shows that we’re using the return value of a function to initialize a variable. Because the function five returns a 5, that line is the same as the following:": {
    "_translate": "<code>5</code> 在 <code>five</code> 中是函数的返回值，这就是为什么返回类型是 <code>i32</code>。让我们更详细地 examine this。有两个重要的部分：首先，<code>let x = five();</code> 这一行显示我们正在使用函数的返回值来初始化一个变量。因为函数 <code>five</code> 返回一个 <code>5</code>，所以这一行与以下内容相同：",
    "_note": ""
  },
  "Let’s look at another example:": {
    "_translate": "让我们看看另一个例子:",
    "_note": ""
  },
  "Second, the five function has no parameters and defines the type of the return value, but the body of the function is a lonely 5 with no semicolon because it’s an expression whose value we want to return.": {
    "_translate": "其次，<code>five</code> 函数没有参数，并定义了返回值的类型，但函数的主体是一个孤独的 <code>5</code> 没有分号，因为它是一个我们想要返回的表达式。",
    "_note": ""
  },
  "Compiling this code produces an error, as follows:": {
    "_translate": "编译此代码会产生以下错误：",
    "_note": ""
  },
  "Running this code will print The value of x is: 6. But if we place a semicolon at the end of the line containing x + 1, changing it from an expression to a statement, we’ll get an error:": {
    "_translate": "运行此代码将打印 <code>The value of x is: 6</code>。但如果我们在包含 <code>x + 1</code> 的行末添加一个分号，将其从表达式更改为语句，我们将得到一个错误：",
    "_note": ""
  },
  "The main error message, mismatched types, reveals the core issue with this code. The definition of the function plus_one says that it will return an i32, but statements don’t evaluate to a value, which is expressed by (), the unit type. Therefore, nothing is returned, which contradicts the function definition and results in an error. In this output, Rust provides a message to possibly help rectify this issue: it suggests removing the semicolon, which would fix the error.": {
    "_translate": "主要错误信息，<code>mismatched types</code>，揭示了这段代码的核心问题。函数 <code>plus_one</code> 的定义表明它将返回一个 <code>i32</code>，但语句不会评估为值，而是表示为 <code>()</code>，即单元类型。因此，没有返回任何值，这与函数定义相矛盾，导致错误。在这个输出中，Rust 提供了一条消息，可能有助于解决这个问题：它建议删除分号，这将修复错误。",
    "_note": ""
  },
  "Functions - The Rust Programming Language": {
    "_translate": "函数 - 《Rust 编程语言》",
    "_note": ""
  }
}