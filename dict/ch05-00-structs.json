{
  "Using Structs to Structure Related Data": {
    "_translate": "<a class=\"header\" href=\"#using-structs-to-structure-related-data\">使用结构体来组织相关数据</a>",
    "_note": ""
  },
  "We’ll demonstrate how to define and instantiate structs. We’ll discuss how to define associated functions, especially the kind of associated functions called methods, to specify behavior associated with a struct type. Structs and enums (discussed in Chapter 6) are the building blocks for creating new types in your program’s domain to take full advantage of Rust’s compile-time type checking.": {
    "_translate": "我们将演示如何定义和实例化结构体。我们将讨论如何定义关联函数，特别是称为<em>方法</em>的关联函数，以指定与结构体类型相关的行为。结构体和枚举（在第6章中讨论）是创建新类型以充分利用Rust编译时类型检查的构建块。",
    "_note": ""
  },
  "A struct, or structure, is a custom data type that lets you package together and name multiple related values that make up a meaningful group. If you’re familiar with an object-oriented language, a struct is like an object’s data attributes. In this chapter, we’ll compare and contrast tuples with structs to build on what you already know and demonstrate when structs are a better way to group data.": {
    "_translate": "一个 <em>struct</em>，或 <em>结构体</em>，是一种自定义数据类型，允许你将多个相关值打包在一起并命名，这些值组成一个有意义的组。如果你熟悉面向对象语言，<em>struct</em> 就像对象的数据属性。在本章中，我们将比较和对比元组与结构体，以加深你已有的知识，并展示在什么情况下结构体是更好的数据组合方式。",
    "_note": ""
  },
  "Using Structs to Structure Related Data - The Rust Programming Language": {
    "_translate": "使用结构体来组织相关数据 - 《Rust编程语言》",
    "_note": ""
  }
}