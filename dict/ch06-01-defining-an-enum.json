{
  "Defining an Enum": {
    "_translate": "<a class=\"header\" href=\"#defining-an-enum\">定义枚举</a>",
    "_note": ""
  },
  "Let’s look at a situation we might want to express in code and see why enums are useful and more appropriate than structs in this case. Say we need to work with IP addresses. Currently, two major standards are used for IP addresses: version four and version six. Because these are the only possibilities for an IP address that our program will come across, we can enumerate all possible variants, which is where enumeration gets its name.": {
    "_translate": "让我们来看一个我们可能想要在代码中表达的情况，并看看为什么枚举比结构体在这种情况下更有用和更合适。假设我们需要处理 IP 地址。目前，IP 地址使用两个主要标准：第四版和第六版。因为这些是我们程序会遇到的唯一可能的 IP 地址，我们可以<em>枚举</em>所有可能的变体，这就是枚举名称的由来。",
    "_note": ""
  },
  "Where structs give you a way of grouping together related fields and data, like a Rectangle with its width and height, enums give you a way of saying a value is one of a possible set of values. For example, we may want to say that Rectangle is one of a set of possible shapes that also includes Circle and Triangle. To do this, Rust allows us to encode these possibilities as an enum.": {
    "_translate": "在哪里结构体（structs）为你提供了一种将相关字段和数据组合在一起的方式，比如一个带有<code>width</code>和<code>height</code>的<code>Rectangle</code>，枚举（enums）则为你提供了一种说明一个值是可能值集中的一个值的方式。例如，我们可能希望说明<code>Rectangle</code>是包括<code>Circle</code>和<code>Triangle</code>在内的一组可能形状中的一个。为了实现这一点，Rust允许我们将这些可能性编码为一个枚举。",
    "_note": ""
  },
  "We can express this concept in code by defining an IpAddrKind enumeration and listing the possible kinds an IP address can be, V4 and V6. These are the variants of the enum:": {
    "_translate": "我们可以用代码表示这个概念，通过定义一个 <code>IpAddrKind</code> 枚举并列出 IP 地址可以是的类型，<code>V4</code> 和 <code>V6</code>。这些是枚举的变体：",
    "_note": ""
  },
  "Any IP address can be either a version four or a version six address, but not both at the same time. That property of IP addresses makes the enum data structure appropriate because an enum value can only be one of its variants. Both version four and version six addresses are still fundamentally IP addresses, so they should be treated as the same type when the code is handling situations that apply to any kind of IP address.": {
    "_translate": "任何IP地址都可以是版本四或版本六的地址，但不能同时是两者。这一IP地址的特性使得枚举数据结构变得合适，因为枚举值只能是其变体之一。无论是版本四还是版本六的地址，它们本质上仍然是IP地址，因此在代码处理适用于任何类型IP地址的情况时，应将它们视为同一类型。",
    "_note": ""
  },
  "Enum Values": {
    "_translate": "<a class=\"header\" href=\"#enum-values\">枚举值</a>",
    "_note": ""
  },
  "IpAddrKind is now a custom data type that we can use elsewhere in our code.": {
    "_translate": "<code>IpAddrKind</code> 现在是一个自定义数据类型，我们可以在代码的其他地方使用。",
    "_note": ""
  },
  "We can create instances of each of the two variants of IpAddrKind like this:": {
    "_translate": "我们可以像这样创建 <code>IpAddrKind</code> 的两个变体的实例：",
    "_note": ""
  },
  "And we can call this function with either variant:": {
    "_translate": "并且我们可以用任一变体调用此函数：",
    "_note": ""
  },
  "Note that the variants of the enum are namespaced under its identifier, and we use a double colon to separate the two. This is useful because now both values IpAddrKind::V4 and IpAddrKind::V6 are of the same type: IpAddrKind. We can then, for instance, define a function that takes any IpAddrKind:": {
    "_translate": "请注意，枚举的变体在其标识符下命名空间化，我们使用双冒号将两者分隔。这很有用，因为现在两个值<code>IpAddrKind::V4</code>和<code>IpAddrKind::V6</code>都是同一类型：<code>IpAddrKind</code>。然后，例如，我们可以定义一个接受任何<code>IpAddrKind</code>的函数：",
    "_note": ""
  },
  "Using enums has even more advantages. Thinking more about our IP address type, at the moment we don’t have a way to store the actual IP address data; we only know what kind it is. Given that you just learned about structs in Chapter 5, you might be tempted to tackle this problem with structs as shown in Listing 6-1.": {
    "_translate": "使用枚举还有更多优势。更多地思考我们的 IP 地址类型，目前我们没有一种方法来存储实际的 IP 地址<em>数据</em>；我们只知道它的<em>类型</em>。鉴于你刚刚在第 5 章学习了结构体，你可能会倾向于用结构体来解决这个问题，如列表 6-1 所示。",
    "_note": ""
  },
  "However, representing the same concept using just an enum is more concise: rather than an enum inside a struct, we can put data directly into each enum variant. This new definition of the IpAddr enum says that both V4 and V6 variants will have associated String values:": {
    "_translate": "然而，仅使用枚举表示相同的概念更为简洁：\n而不是在结构体内使用枚举，我们可以直接将数据放入每个枚举\n变体中。这个新的 <code>IpAddr</code> 枚举定义说明 <code>V4</code> 和 <code>V6</code>\n变体都将具有关联的 <code>String</code> 值：",
    "_note": ""
  },
  "Here, we’ve defined a struct IpAddr that has two fields: a kind field that is of type IpAddrKind (the enum we defined previously) and an address field of type String. We have two instances of this struct. The first is home, and it has the value IpAddrKind::V4 as its kind with associated address data of 127.0.0.1. The second instance is loopback. It has the other variant of IpAddrKind as its kind value, V6, and has address ::1 associated with it. We’ve used a struct to bundle the kind and address values together, so now the variant is associated with the value.": {
    "_translate": "这里，我们定义了一个结构体 <code>IpAddr</code>，它有两个字段：一个 <code>kind</code> 字段，类型为 <code>IpAddrKind</code>（我们之前定义的枚举类型）和一个 <code>address</code> 字段，类型为 <code>String</code>。我们有两个这个结构体的实例。第一个是 <code>home</code>，它的 <code>kind</code> 值为 <code>IpAddrKind::V4</code>，关联的地址数据为 <code>127.0.0.1</code>。第二个实例是 <code>loopback</code>。它的 <code>kind</code> 值为 <code>IpAddrKind</code> 的另一个变体 <code>V6</code>，关联的地址为 <code>::1</code>。我们使用一个结构体将 <code>kind</code> 和 <code>address</code> 值捆绑在一起，因此现在变体与值关联。",
    "_note": ""
  },
  "We attach data to each variant of the enum directly, so there is no need for an extra struct. Here, it’s also easier to see another detail of how enums work: the name of each enum variant that we define also becomes a function that constructs an instance of the enum. That is, IpAddr::V4() is a function call that takes a String argument and returns an instance of the IpAddr type. We automatically get this constructor function defined as a result of defining the enum.": {
    "_translate": "我们将数据直接附加到枚举的每个变体上，因此不需要额外的结构体。在这里，也可以更容易地看到枚举工作方式的另一个细节：我们定义的每个枚举变体的名称也成为了构造枚举实例的函数。也就是说，<code>IpAddr::V4()</code> 是一个函数调用，它接受一个 <code>String</code> 参数并返回一个 <code>IpAddr</code> 类型的实例。由于定义了枚举，我们自动获得了这个构造函数的定义。",
    "_note": ""
  },
  "There’s another advantage to using an enum rather than a struct: each variant can have different types and amounts of associated data. Version four IP addresses will always have four numeric components that will have values between 0 and 255. If we wanted to store V4 addresses as four u8 values but still express V6 addresses as one String value, we wouldn’t be able to with a struct. Enums handle this case with ease:": {
    "_translate": "使用枚举而不是结构体的另一个优势是：每个变体可以有不同的类型和数量的关联数据。IPv4 地址将始终具有四个数值组件，其值在 0 到 255 之间。如果我们想将 <code>V4</code> 地址存储为四个 <code>u8</code> 值，但仍然将 <code>V6</code> 地址表示为一个 <code>String</code> 值，使用结构体是无法实现的。枚举可以轻松处理这种情况：",
    "_note": ""
  },
  "This code illustrates that you can put any kind of data inside an enum variant: strings, numeric types, or structs, for example. You can even include another enum! Also, standard library types are often not much more complicated than what you might come up with.": {
    "_translate": "这段代码说明你可以在枚举变体中放入任何类型的数据：<br>例如字符串、数字类型或结构体。你甚至可以包含另一个枚举！此外，标准库类型通常并不比你可能想到的复杂多少。",
    "_note": ""
  },
  "Note that even though the standard library contains a definition for IpAddr, we can still create and use our own definition without conflict because we haven’t brought the standard library’s definition into our scope. We’ll talk more about bringing types into scope in Chapter 7.": {
    "_translate": "请注意，即使标准库中包含 <code>IpAddr</code> 的定义，我们仍然可以创建并使用我们自己的定义而不会发生冲突，因为我们还没有将标准库的定义引入到我们的作用域中。我们将在第 7 章中更详细地讨论将类型引入作用域的问题。",
    "_note": ""
  },
  "We’ve shown several different ways to define data structures to store version four and version six IP addresses. However, as it turns out, wanting to store IP addresses and encode which kind they are is so common that the standard library has a definition we can use! Let’s look at how the standard library defines IpAddr: it has the exact enum and variants that we’ve defined and used, but it embeds the address data inside the variants in the form of two different structs, which are defined differently for each variant:": {
    "_translate": "我们展示了多种定义数据结构的方法来存储版本四和版本六的IP地址。然而，事实证明，希望存储IP地址并编码它们的类型是如此普遍，以至于<a href=\"../std/net/enum.IpAddr.html\">标准库提供了一个我们可以使用的定义！</a><!-- ignore --> 让我们看看标准库是如何定义<code>IpAddr</code>的：它具有我们定义和使用的确切枚举和变体，但它在变体内部以两种不同的结构体形式嵌入地址数据，每种变体的定义方式不同：",
    "_note": ""
  },
  "Let’s look at another example of an enum in Listing 6-2: this one has a wide variety of types embedded in its variants.": {
    "_translate": "让我们来看另一个枚举的例子，如清单 6-2 所示：这个枚举在其变体中嵌入了各种类型的值。",
    "_note": ""
  },
  "This enum has four variants with different types:": {
    "_translate": "这个枚举有四个不同类型的变体：",
    "_note": ""
  },
  "Defining an enum with variants such as the ones in Listing 6-2 is similar to defining different kinds of struct definitions, except the enum doesn’t use the struct keyword and all the variants are grouped together under the Message type. The following structs could hold the same data that the preceding enum variants hold:": {
    "_translate": "定义如清单 6-2 中的枚举变体类似于定义不同类型的结构体，不同之处在于枚举不使用 <code>struct</code> 关键字，并且所有变体都归类在 <code>Message</code> 类型下。以下结构体可以持有与前面枚举变体相同的數據：",
    "_note": ""
  },
  "But if we used the different structs, each of which has its own type, we couldn’t as easily define a function to take any of these kinds of messages as we could with the Message enum defined in Listing 6-2, which is a single type.": {
    "_translate": "但是，如果我们使用了不同的结构体，每个结构体都有自己的类型，我们就不能像使用在清单 6-2 中定义的 <code>Message</code> 枚举那样轻松地定义一个可以接受这些消息中任何一种的函数，因为 <code>Message</code> 枚举是一个单一类型。",
    "_note": ""
  },
  "There is one more similarity between enums and structs: just as we’re able to define methods on structs using impl, we’re also able to define methods on enums. Here’s a method named call that we could define on our Message enum:": {
    "_translate": "枚举和结构体之间还有一个相似之处：就像我们可以在结构体上使用 <code>impl</code> 定义方法一样，我们也可以在枚举上定义方法。这是一个可以在我们的 <code>Message</code> 枚举上定义的方法，名为 <code>call</code>：",
    "_note": ""
  },
  "Let’s look at another enum in the standard library that is very common and useful: Option.": {
    "_translate": "让我们看看标准库中的另一个非常常见且有用的枚举：<code>Option</code>。",
    "_note": ""
  },
  "The body of the method would use self to get the value that we called the method on. In this example, we’ve created a variable m that has the value Message::Write(String::from(\"hello\")), and that is what self will be in the body of the call method when m.call() runs.": {
    "_translate": "方法的主体将使用 <code>self</code> 来获取我们调用该方法的值。在这个例子中，我们创建了一个变量 <code>m</code>，其值为 <code>Message::Write(String::from(\"hello\"))</code>，当 <code>m.call()</code> 运行时，这将是 <code>call</code> 方法主体中的 <code>self</code>。",
    "_note": ""
  },
  "The Option Enum and Its Advantages Over Null Values": {
    "_translate": "<a class=\"header\" href=\"#the-option-enum-and-its-advantages-over-null-values\">枚举 <code>Option</code> 及其相对于空值的优势</a>",
    "_note": ""
  },
  "This section explores a case study of Option, which is another enum defined by the standard library. The Option type encodes the very common scenario in which a value could be something or it could be nothing.": {
    "_translate": "这一节探讨了<code>Option</code>的案例研究，这是标准库定义的另一个枚举。<code>Option</code>类型编码了非常常见的情况，即一个值可能是某个值，也可能什么都不是。",
    "_note": ""
  },
  "For example, if you request the first item in a non-empty list, you would get a value. If you request the first item in an empty list, you would get nothing. Expressing this concept in terms of the type system means the compiler can check whether you’ve handled all the cases you should be handling; this functionality can prevent bugs that are extremely common in other programming languages.": {
    "_translate": "例如，如果您请求非空列表中的第一个项目，您将获得一个值。如果您请求空列表中的第一个项目，您将一无所获。将这个概念用类型系统表达意味着编译器可以检查您是否已经处理了所有应该处理的情况；此功能可以防止在其他编程语言中非常常见的错误。",
    "_note": ""
  },
  "Programming language design is often thought of in terms of which features you include, but the features you exclude are important too. Rust doesn’t have the null feature that many other languages have. Null is a value that means there is no value there. In languages with null, variables can always be in one of two states: null or not-null.": {
    "_translate": "编程语言设计通常被认为是在于你包含哪些特性，但你排除的特性也同样重要。Rust 没有其他许多语言都有的 <em>null</em> 特性。 <em>null</em> 是一个表示没有值的值。在有 <em>null</em> 的语言中，变量总是可以处于两种状态之一：null 或 not-null。",
    "_note": ""
  },
  "In his 2009 presentation “Null References: The Billion Dollar Mistake,” Tony Hoare, the inventor of null, has this to say:": {
    "_translate": "在他的2009年演讲“空引用：十亿美元的错误”中，空引用的发明者Tony Hoare如是说：",
    "_note": ""
  },
  "The problem with null values is that if you try to use a null value as a not-null value, you’ll get an error of some kind. Because this null or not-null property is pervasive, it’s extremely easy to make this kind of error.": {
    "_translate": "<p>空值的问题在于，如果你试图将空值用作非空值，你会得到某种错误。由于这种空或非空的属性是普遍存在的，因此非常容易犯这种错误。</p>",
    "_note": ""
  },
  "I call it my billion-dollar mistake. At that time, I was designing the first comprehensive type system for references in an object-oriented language. My goal was to ensure that all use of references should be absolutely safe, with checking performed automatically by the compiler. But I couldn’t resist the temptation to put in a null reference, simply because it was so easy to implement. This has led to innumerable errors, vulnerabilities, and system crashes, which have probably caused a billion dollars of pain and damage in the last forty years.": {
    "_translate": "我称之为我的十亿美元错误。当时，我正在设计第一个面向对象语言中的引用的全面类型系统。我的目标是确保所有引用的使用都是绝对安全的，由编译器自动进行检查。但我无法抗拒添加空引用的诱惑，仅仅因为它实现起来非常简单。这导致了无数的错误、漏洞和系统崩溃，在过去的四十年中可能造成了十亿美元的痛苦和损失。",
    "_note": ""
  },
  "However, the concept that null is trying to express is still a useful one: a null is a value that is currently invalid or absent for some reason.": {
    "_translate": "然而，null试图表达的概念仍然是有用的：一个null是一个由于某种原因当前无效或缺失的值。",
    "_note": ""
  },
  "The problem isn’t really with the concept but with the particular implementation. As such, Rust does not have nulls, but it does have an enum that can encode the concept of a value being present or absent. This enum is Option<T>, and it is defined by the standard library as follows:": {
    "_translate": "问题不在于概念本身，而在于特定的实现。因此，Rust 没有 null，但它确实有一个可以编码值存在或不存在概念的枚举。这个枚举是 <code>Option&lt;T&gt;</code>，并且它是由 <a href=\"../std/option/enum.Option.html\">标准库定义的</a> 如下：",
    "_note": ""
  },
  "The Option<T> enum is so useful that it’s even included in the prelude; you don’t need to bring it into scope explicitly. Its variants are also included in the prelude: you can use Some and None directly without the Option:: prefix. The Option<T> enum is still just a regular enum, and Some(T) and None are still variants of type Option<T>.": {
    "_translate": "<code>Option&lt;T&gt;</code> 枚举非常有用，甚至被包含在前言中；你无需显式地将其引入作用域。它的变体也被包含在前言中：你可以直接使用 <code>Some</code> 和 <code>None</code>，而无需 <code>Option::</code> 前缀。<code>Option&lt;T&gt;</code> 枚举仍然是一个普通的枚举，<code>Some(T)</code> 和 <code>None</code> 仍然是 <code>Option&lt;T&gt;</code> 类型的变体。",
    "_note": ""
  },
  "The <T> syntax is a feature of Rust we haven’t talked about yet. It’s a generic type parameter, and we’ll cover generics in more detail in Chapter 10. For now, all you need to know is that <T> means that the Some variant of the Option enum can hold one piece of data of any type, and that each concrete type that gets used in place of T makes the overall Option<T> type a different type. Here are some examples of using Option values to hold number types and string types:": {
    "_translate": "<code>&lt;T&gt;</code> 语法是 Rust 的一个我们尚未讨论过的特性。它是一个泛型类型参数，我们将在第 10 章中更详细地介绍泛型。目前，你只需要知道 <code>&lt;T&gt;</code> 表示 <code>Option</code> 枚举的 <code>Some</code> 变体可以持有一个任何类型的单个数据，并且每个用于替代 <code>T</code> 的具体类型都会使整体的 <code>Option&lt;T&gt;</code> 类型成为一个不同的类型。以下是一些使用 <code>Option</code> 值来持有数字类型和字符串类型的示例：",
    "_note": ""
  },
  "The type of some_number is Option<i32>. The type of some_char is Option<char>, which is a different type. Rust can infer these types because we’ve specified a value inside the Some variant. For absent_number, Rust requires us to annotate the overall Option type: the compiler can’t infer the type that the corresponding Some variant will hold by looking only at a None value. Here, we tell Rust that we mean for absent_number to be of type Option<i32>.": {
    "_translate": "<code>some_number</code> 的类型是 <code>Option&lt;i32&gt;</code>。<code>some_char</code> 的类型是\n<code>Option&lt;char&gt;</code>，这是一个不同的类型。Rust 可以推断这些类型，因为\n我们在 <code>Some</code> 变体中指定了一个值。对于 <code>absent_number</code>，Rust\n要求我们注解整个 <code>Option</code> 类型：编译器无法仅通过查看 <code>None</code> 值来推断\n相应的 <code>Some</code> 变体将持有的类型。在这里，我们告诉 Rust <code>absent_number</code> 应该是 <code>Option&lt;i32&gt;</code> 类型。",
    "_note": ""
  },
  "When we have a Some value, we know that a value is present and the value is held within the Some. When we have a None value, in some sense it means the same thing as null: we don’t have a valid value. So why is having Option<T> any better than having null?": {
    "_translate": "当我们有一个 <code>Some</code> 值时，我们知道存在一个值，并且该值被包含在 <code>Some</code> 中。当我们有一个 <code>None</code> 值时，在某种意义上它与 null 的意思相同：我们没有一个有效的值。那么，为什么拥有 <code>Option&lt;T&gt;</code> 比拥有 null 更好呢？",
    "_note": ""
  },
  "If we run this code, we get an error message like this one:": {
    "_translate": "如果我们运行这段代码，我们会得到一个类似的错误消息：",
    "_note": ""
  },
  "In short, because Option<T> and T (where T can be any type) are different types, the compiler won’t let us use an Option<T> value as if it were definitely a valid value. For example, this code won’t compile, because it’s trying to add an i8 to an Option<i8>:": {
    "_translate": "简而言之，因为 <code>Option&lt;T&gt;</code> 和 <code>T</code>（其中 <code>T</code> 可以是任何类型）是不同的类型，编译器不会让我们将 <code>Option&lt;T&gt;</code> 值当作肯定是有效值来使用。例如，这段代码无法编译，因为它试图将一个 <code>i8</code> 加到一个 <code>Option&lt;i8&gt;</code> 上：",
    "_note": ""
  },
  "In other words, you have to convert an Option<T> to a T before you can perform T operations with it. Generally, this helps catch one of the most common issues with null: assuming that something isn’t null when it actually is.": {
    "_translate": "换句话说，你必须将一个 <code>Option&lt;T&gt;</code> 转换为 <code>T</code> 才能使用 <code>T</code> 进行操作。通常，这有助于捕获与空值最常见的问题之一：假设某物不是空值而实际上它是。",
    "_note": ""
  },
  "Intense! In effect, this error message means that Rust doesn’t understand how to add an i8 and an Option<i8>, because they’re different types. When we have a value of a type like i8 in Rust, the compiler will ensure that we always have a valid value. We can proceed confidently without having to check for null before using that value. Only when we have an Option<i8> (or whatever type of value we’re working with) do we have to worry about possibly not having a value, and the compiler will make sure we handle that case before using the value.": {
    "_translate": "紧张！实际上，这个错误信息意味着 Rust 不知道如何将 <code>i8</code> 和 <code>Option&lt;i8&gt;</code> 相加，因为它们是不同的类型。当我们有一个像 <code>i8</code> 这样的类型的值时，编译器会确保我们始终有一个有效的值。我们可以自信地使用该值，而无需在使用之前检查是否为 null。只有当我们有一个 <code>Option&lt;i8&gt;</code>（或我们正在处理的任何类型的值）时，我们才需要担心可能没有值，编译器会确保我们在使用该值之前处理这种情况。",
    "_note": ""
  },
  "Eliminating the risk of incorrectly assuming a not-null value helps you to be more confident in your code. In order to have a value that can possibly be null, you must explicitly opt in by making the type of that value Option<T>. Then, when you use that value, you are required to explicitly handle the case when the value is null. Everywhere that a value has a type that isn’t an Option<T>, you can safely assume that the value isn’t null. This was a deliberate design decision for Rust to limit null’s pervasiveness and increase the safety of Rust code.": {
    "_translate": "消除错误地假设非空值的风险有助于您对代码更加自信。为了拥有一个可能为空的值，您必须通过将该值的类型设置为<code>Option&lt;T&gt;</code>来显式选择加入。然后，在使用该值时，您需要显式处理值为空的情况。在所有值的类型不是<code>Option&lt;T&gt;</code>的地方，您可以<em>安全地</em>假设该值不是空的。这是Rust的一个故意设计决定，旨在限制空值的普遍性并提高Rust代码的安全性。",
    "_note": ""
  },
  "So how do you get the T value out of a Some variant when you have a value of type Option<T> so that you can use that value? The Option<T> enum has a large number of methods that are useful in a variety of situations; you can check them out in its documentation. Becoming familiar with the methods on Option<T> will be extremely useful in your journey with Rust.": {
    "_translate": "那么，当你有一个类型为 <code>Option&lt;T&gt;</code> 的值时，如何从 <code>Some</code> 变体中获取 <code>T</code> 值以便使用该值呢？<code>Option&lt;T&gt;</code> 枚举有许多在各种情况下都非常有用的方法；你可以在 <a href=\"../std/option/enum.Option.html\">其文档</a><!-- ignore --> 中查看这些方法。熟悉 <code>Option&lt;T&gt;</code> 的方法将对你的 Rust 之旅极为有用。",
    "_note": ""
  },
  "In general, in order to use an Option<T> value, you want to have code that will handle each variant. You want some code that will run only when you have a Some(T) value, and this code is allowed to use the inner T. You want some other code to run only if you have a None value, and that code doesn’t have a T value available. The match expression is a control flow construct that does just this when used with enums: it will run different code depending on which variant of the enum it has, and that code can use the data inside the matching value.": {
    "_translate": "一般来说，为了使用 <code>Option&lt;T&gt;</code> 值，你希望有能够处理每个变体的代码。你希望有一些代码仅在你有一个 <code>Some(T)</code> 值时运行，并且这段代码可以使用内部的 <code>T</code>。你希望有其他代码仅在你有一个 <code>None</code> 值时运行，而这段代码没有 <code>T</code> 值可用。<code>match</code> 表达式是一种控制流结构，当与枚举一起使用时，它会根据枚举的哪个变体运行不同的代码，并且这些代码可以使用匹配值中的数据。",
    "_note": ""
  },
  "Defining an Enum - The Rust Programming Language": {
    "_translate": "定义枚举 - 《Rust 编程语言》",
    "_note": ""
  },
  "Quit has no data associated with it at all.": {
    "_translate": "<code>Quit</code> 没有任何与之关联的数据。",
    "_note": ""
  },
  "Move has named fields, like a struct does.": {
    "_translate": "<code>Move</code> 有命名字段，就像结构体一样。",
    "_note": ""
  },
  "Write includes a single String.": {
    "_translate": "<code>Write</code> 包含一个 <code>String</code>。",
    "_note": ""
  },
  "ChangeColor includes three i32 values.": {
    "_translate": "<code>ChangeColor</code> 包含三个 <code>i32</code> 值。",
    "_note": ""
  },
  "The <T> syntax is a feature of Rust we haven’t talked about yet. It’s a generic type parameter, and we’ll cover generics in more detail in Chapter 10. For now, all you need to know is that <T> means that the Some variant of the Option enum can hold one piece of data of any type, and that each concrete type that gets used in place of T makes the overall Option<T> type a different type. Here are some examples of using Option values to hold number types and char types:": {
    "_translate": "<code>&lt;T&gt;</code> 语法是 Rust 的一个我们尚未讨论过的特性。它是一个泛型类型参数，我们将在第 10 章中更详细地介绍泛型。目前，你只需要知道 <code>&lt;T&gt;</code> 表示 <code>Option</code> 枚举的 <code>Some</code> 变体可以持有一个任何类型的单个数据，并且每个用于替代 <code>T</code> 的具体类型都会使整体的 <code>Option&lt;T&gt;</code> 类型成为一个不同的类型。以下是一些使用 <code>Option</code> 值来持有数字类型和字符类型的示例：",
    "_note": ""
  }
}