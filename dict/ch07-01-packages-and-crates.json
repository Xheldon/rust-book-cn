{
  "Packages and Crates": {
    "_translate": "<a class=\"header\" href=\"#packages-and-crates\">包和库</a>",
    "_note": ""
  },
  "The first parts of the module system we’ll cover are packages and crates.": {
    "_translate": "我们将要介绍的模块系统的第一个部分是包和库。",
    "_note": ""
  },
  "A crate can come in one of two forms: a binary crate or a library crate. Binary crates are programs you can compile to an executable that you can run, such as a command-line program or a server. Each must have a function called main that defines what happens when the executable runs. All the crates we’ve created so far have been binary crates.": {
    "_translate": "一个crate可以有两种形式之一：二进制crate或库crate。<em>二进制crate</em>是可以编译成可执行文件的程序，例如命令行程序或服务器。每个二进制crate都必须有一个名为<code>main</code>的函数，该函数定义了可执行文件运行时的行为。到目前为止，我们创建的所有crate都是二进制crate。",
    "_note": ""
  },
  "A crate is the smallest amount of code that the Rust compiler considers at a time. Even if you run rustc rather than cargo and pass a single source code file (as we did all the way back in the “Writing and Running a Rust Program” section of Chapter 1), the compiler considers that file to be a crate. Crates can contain modules, and the modules may be defined in other files that get compiled with the crate, as we’ll see in the coming sections.": {
    "_translate": "一个 <em>crate</em> 是 Rust 编译器每次考虑的最小代码量。即使你运行 <code>rustc</code> 而不是 <code>cargo</code> 并传递一个源代码文件（就像我们在第 1 章“编写和运行 Rust 程序”部分所做的那样），编译器也会将该文件视为一个 crate。crate 可以包含模块，这些模块可能定义在其他文件中，并与 crate 一起编译，我们将在接下来的部分中看到。",
    "_note": ""
  },
  "The crate root is a source file that the Rust compiler starts from and makes up the root module of your crate (we’ll explain modules in depth in the “Defining Modules to Control Scope and Privacy” section).": {
    "_translate": "<em>crate root</em> 是 Rust 编译器开始的源文件，并构成你的 crate 的根模块（我们将在 <a href=\"ch07-02-defining-modules-to-control-scope-and-privacy.html\">“定义模块以控制作用域和私有性”</a><!-- ignore --> 部分详细解释模块）。",
    "_note": ""
  },
  "Library crates don’t have a main function, and they don’t compile to an executable. Instead, they define functionality intended to be shared with multiple projects. For example, the rand crate we used in Chapter 2 provides functionality that generates random numbers. Most of the time when Rustaceans say “crate”, they mean library crate, and they use “crate” interchangeably with the general programming concept of a “library”.": {
    "_translate": "<em>库crate</em> 没有 <code>main</code> 函数，也不会编译成可执行文件。相反，它们定义了旨在与多个项目共享的功能。例如，我们在 <a href=\"ch02-00-guessing-game-tutorial.html#generating-a-random-number\">第 2 章</a><!-- ignore --> 中使用的 <code>rand</code> crate 提供了生成随机数的功能。大多数情况下，当 Rustaceans 说“crate”时，他们指的是库crate，并且他们将“crate”与编程中的一般“库”概念互换使用。",
    "_note": ""
  },
  "Let’s walk through what happens when we create a package. First we enter the command cargo new my-project:": {
    "_translate": "让我们逐步了解在创建一个包时会发生什么。首先我们输入命令<code>cargo new my-project</code>：",
    "_note": ""
  },
  "A package is a bundle of one or more crates that provides a set of functionality. A package contains a Cargo.toml file that describes how to build those crates. Cargo is actually a package that contains the binary crate for the command-line tool you’ve been using to build your code. The Cargo package also contains a library crate that the binary crate depends on. Other projects can depend on the Cargo library crate to use the same logic the Cargo command-line tool uses. A package can contain as many binary crates as you like, but at most only one library crate. A package must contain at least one crate, whether that’s a library or binary crate.": {
    "_translate": "一个<em>包</em>是一组一个或多个提供一组功能的<em>包</em>。一个包包含一个<em>Cargo.toml</em>文件，该文件描述了如何构建这些包。Cargo实际上是一个包含你一直在使用的命令行工具的二进制包的包。Cargo包还包含一个库包，该二进制包依赖于它。其他项目可以依赖于Cargo库包以使用与Cargo命令行工具相同的逻辑。一个包可以包含任意数量的二进制包，但最多只能包含一个库包。一个包必须至少包含一个包，无论是库包还是二进制包。",
    "_note": ""
  },
  "Here, we have a package that only contains src/main.rs, meaning it only contains a binary crate named my-project. If a package contains src/main.rs and src/lib.rs, it has two crates: a binary and a library, both with the same name as the package. A package can have multiple binary crates by placing files in the src/bin directory: each file will be a separate binary crate.": {
    "_translate": "这里，我们有一个只包含 <em>src/main.rs</em> 的包，这意味着它只包含一个名为 <code>my-project</code> 的二进制包。如果一个包包含 <em>src/main.rs</em> 和 <em>src/lib.rs</em>，它将有两个包：一个二进制包和一个库包，它们的名称与包的名称相同。一个包可以通过在 <em>src/bin</em> 目录中放置文件来拥有多个二进制包：每个文件将是一个单独的二进制包。",
    "_note": ""
  },
  "After we run cargo new my-project, we use ls to see what Cargo creates. In the project directory, there’s a Cargo.toml file, giving us a package. There’s also a src directory that contains main.rs. Open Cargo.toml in your text editor, and note there’s no mention of src/main.rs. Cargo follows a convention that src/main.rs is the crate root of a binary crate with the same name as the package. Likewise, Cargo knows that if the package directory contains src/lib.rs, the package contains a library crate with the same name as the package, and src/lib.rs is its crate root. Cargo passes the crate root files to rustc to build the library or binary.": {
    "_translate": "在我们运行 <code>cargo new my-project</code> 之后，我们使用 <code>ls</code> 来查看 Cargo 创建了什么。在项目目录中，有一个 <em>Cargo.toml</em> 文件，为我们提供了一个包。还有一个 <em>src</em> 目录，其中包含 <em>main.rs</em>。在文本编辑器中打开 <em>Cargo.toml</em>，请注意其中没有提到 <em>src/main.rs</em>。Cargo 遵循一个约定，即 <em>src/main.rs</em> 是与包同名的二进制包的包根。同样，如果包目录包含 <em>src/lib.rs</em>，Cargo 会知道该包包含一个与包同名的库包，而 <em>src/lib.rs</em> 是其包根。Cargo 将包根文件传递给 <code>rustc</code> 以构建库或二进制文件。",
    "_note": ""
  },
  "Packages and Crates - The Rust Programming Language": {
    "_translate": "包和 crates - The Rust 编程语言",
    "_note": ""
  }
}