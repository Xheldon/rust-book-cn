{
  "Defining Modules to Control Scope and Privacy": {
    "_translate": "<a class=\"header\" href=\"#defining-modules-to-control-scope-and-privacy\">定义模块以控制作用域和隐私</a>",
    "_note": ""
  },
  "Modules Cheat Sheet": {
    "_translate": "<a class=\"header\" href=\"#modules-cheat-sheet\">模块速查表</a>",
    "_note": ""
  },
  "In this section, we’ll talk about modules and other parts of the module system, namely paths, which allow you to name items; the use keyword that brings a path into scope; and the pub keyword to make items public. We’ll also discuss the as keyword, external packages, and the glob operator.": {
    "_translate": "在本节中，我们将讨论模块和其他模块系统的部分，即 <em>路径</em>，它们允许你命名项目；<code>use</code> 关键字，它将路径引入作用域；以及 <code>pub</code> 关键字，用于使项目公开。我们还将讨论 <code>as</code> 关键字、外部包和通配符操作符。",
    "_note": ""
  },
  "Here, we create a binary crate named backyard that illustrates these rules. The crate’s directory, also named backyard, contains these files and directories:": {
    "_translate": "在这里，我们创建了一个名为<code>backyard</code>的二进制crate，以说明这些规则。\ncrate的目录，也命名为<code>backyard</code>，包含这些文件和目录：",
    "_note": ""
  },
  "The crate root file in this case is src/main.rs, and it contains:": {
    "_translate": "在这种情况下，crate 根文件是 <em>src/main.rs</em>，它包含：",
    "_note": ""
  },
  "Before we get to the details of modules and paths, here we provide a quick reference on how modules, paths, the use keyword, and the pub keyword work in the compiler, and how most developers organize their code. We’ll be going through examples of each of these rules throughout this chapter, but this is a great place to refer to as a reminder of how modules work.": {
    "_translate": "在我们深入模块和路径的细节之前，这里提供了一个快速参考，介绍了模块、路径、<code>use</code> 关键字和 <code>pub</code> 关键字在编译器中的工作原理，以及大多数开发人员如何组织他们的代码。我们将在本章中通过每个规则的示例进行讲解，但这是一个很好的地方，可以作为模块工作方式的提醒。",
    "_note": ""
  },
  "The pub mod garden; line tells the compiler to include the code it finds in src/garden.rs, which is:": {
    "_translate": "<code>pub mod garden;</code> 行告诉编译器包含在 <em>src/garden.rs</em> 中找到的代码，即：",
    "_note": ""
  },
  "Here, pub mod vegetables; means the code in src/garden/vegetables.rs is included too. That code is:": {
    "_translate": "这里，<code>pub mod vegetables;</code> 表示 <em>src/garden/vegetables.rs</em> 中的代码也被包含。那段代码是：",
    "_note": ""
  },
  "Now let’s get into the details of these rules and demonstrate them in action!": {
    "_translate": "现在让我们深入这些规则的细节，并展示它们的实际应用！",
    "_note": ""
  },
  "Grouping Related Code in Modules": {
    "_translate": "<a class=\"header\" href=\"#grouping-related-code-in-modules\">在模块中组织相关代码</a>",
    "_note": ""
  },
  "As an example, let’s write a library crate that provides the functionality of a restaurant. We’ll define the signatures of functions but leave their bodies empty to concentrate on the organization of the code rather than the implementation of a restaurant.": {
    "_translate": "作为示例，让我们编写一个提供餐厅功能的库crate。我们将定义函数的签名，但留空它们的主体，以便专注于代码的组织而不是餐厅的实现。",
    "_note": ""
  },
  "Modules let us organize code within a crate for readability and easy reuse. Modules also allow us to control the privacy of items because code within a module is private by default. Private items are internal implementation details not available for outside use. We can choose to make modules and the items within them public, which exposes them to allow external code to use and depend on them.": {
    "_translate": "<em>模块</em> 让我们可以在一个 crate 内组织代码，以提高可读性和易于重用。\n模块还允许我们控制 <em>私有性</em>，因为模块内的代码默认是私有的。私有项是内部实现细节，不可供外部使用。我们可以选择将模块及其内部的项公开，这将使它们对外部代码可见，允许外部代码使用和依赖它们。",
    "_note": ""
  },
  "To structure our crate in this way, we can organize its functions into nested modules. Create a new library named restaurant by running cargo new restaurant --lib. Then enter the code in Listing 7-1 into src/lib.rs to define some modules and function signatures; this code is the front of house section.": {
    "_translate": "要以这种方式构建我们的 crate，我们可以将其函数组织成嵌套的模块。通过运行 <code>cargo new restaurant --lib</code> 创建一个名为 <code>restaurant</code> 的新库。然后将列表 7-1 中的代码输入到 <em>src/lib.rs</em> 中，以定义一些模块和函数签名；这段代码是前厅部分。",
    "_note": ""
  },
  "In the restaurant industry, some parts of a restaurant are referred to as front of house and others as back of house. Front of house is where customers are; this encompasses where the hosts seat customers, servers take orders and payment, and bartenders make drinks. Back of house is where the chefs and cooks work in the kitchen, dishwashers clean up, and managers do administrative work.": {
    "_translate": "在餐饮业中，餐厅的某些部分被称为<em>前厅</em>，其他部分则被称为<em>后厨</em>。前厅是顾客所在的地方；这包括接待员安排顾客就座、服务员点餐和结账，以及调酒师制作饮品的地方。后厨是厨师和烹饪人员在厨房工作、洗碗工清理以及经理进行行政工作的地方。",
    "_note": ""
  },
  "We define a module with the mod keyword followed by the name of the module (in this case, front_of_house). The body of the module then goes inside curly brackets. Inside modules, we can place other modules, as in this case with the modules hosting and serving. Modules can also hold definitions for other items, such as structs, enums, constants, traits, and—as in Listing 7-1—functions.": {
    "_translate": "我们使用 <code>mod</code> 关键字后跟模块的名称（在本例中为 <code>front_of_house</code>）来定义一个模块。模块的主体内容放在大括号内。在模块内部，我们可以放置其他模块，如本例中的 <code>hosting</code> 和 <code>serving</code> 模块。模块还可以包含其他项目的定义，例如结构体、枚举、常量、特征以及如清单 7-1 中的函数。",
    "_note": ""
  },
  "By using modules, we can group related definitions together and name why they’re related. Programmers using this code can navigate the code based on the groups rather than having to read through all the definitions, making it easier to find the definitions relevant to them. Programmers adding new functionality to this code would know where to place the code to keep the program organized.": {
    "_translate": "通过使用模块，我们可以将相关的定义组合在一起，并命名它们为什么相关。使用此代码的程序员可以根据这些组来导航代码，而不需要阅读所有的定义，这使得更容易找到与他们相关的定义。向此代码添加新功能的程序员会知道将代码放置在哪里以保持程序的组织性。",
    "_note": ""
  },
  "Listing 7-2 shows the module tree for the structure in Listing 7-1.": {
    "_translate": "列表 7-2 显示了列表 7-1 中结构的模块树。",
    "_note": ""
  },
  "Earlier, we mentioned that src/main.rs and src/lib.rs are called crate roots. The reason for their name is that the contents of either of these two files form a module named crate at the root of the crate’s module structure, known as the module tree.": {
    "_translate": "早些时候，我们提到 <em>src/main.rs</em> 和 <em>src/lib.rs</em> 被称为 crate 根。它们之所以被称为 crate 根，是因为这两个文件中的内容在 crate 的模块结构（称为 <em>模块树</em>）的根部形成一个名为 <code>crate</code> 的模块。",
    "_note": ""
  },
  "The module tree might remind you of the filesystem’s directory tree on your computer; this is a very apt comparison! Just like directories in a filesystem, you use modules to organize your code. And just like files in a directory, we need a way to find our modules.": {
    "_translate": "模块树可能会让你联想到计算机文件系统中的目录树；这是一个非常恰当的比较！就像文件系统中的目录一样，我们使用模块来组织代码。而且，就像目录中的文件一样，我们需要一种方法来找到我们的模块。",
    "_note": ""
  },
  "This tree shows how some of the modules nest inside other modules; for example, hosting nests inside front_of_house. The tree also shows that some modules are siblings, meaning they’re defined in the same module; hosting and serving are siblings defined within front_of_house. If module A is contained inside module B, we say that module A is the child of module B and that module B is the parent of module A. Notice that the entire module tree is rooted under the implicit module named crate.": {
    "_translate": "这棵树显示了一些模块如何嵌套在其他模块中；例如，<code>hosting</code> 嵌套在 <code>front_of_house</code> 中。树还显示了一些模块是 <em>兄弟</em>，意味着它们在同一个模块中定义；<code>hosting</code> 和 <code>serving</code> 是在 <code>front_of_house</code> 中定义的兄弟模块。如果模块 A 包含在模块 B 中，我们说模块 A 是模块 B 的 <em>子模块</em>，而模块 B 是模块 A 的 <em>父模块</em>。请注意，整个模块树都根植于隐式的 <code>crate</code> 模块下。",
    "_note": ""
  },
  "Defining Modules to Control Scope and Privacy - The Rust Programming Language": {
    "_translate": "定义模块以控制作用域和隐私 - 《Rust编程语言》",
    "_note": ""
  },
  "Start from the crate root: When compiling a crate, the compiler first looks in the crate root file (usually src/lib.rs for a library crate or src/main.rs for a binary crate) for code to compile.": {
    "_translate": "<strong>从crate根开始</strong>: 在编译crate时，编译器首先\n在crate根文件（通常为库crate的<em>src/lib.rs</em>或\n二进制crate的<em>src/main.rs</em>）中查找要编译的代码。",
    "_note": ""
  },
  "Declaring modules: In the crate root file, you can declare new modules; say you declare a “garden” module with mod garden;. The compiler will look for the module’s code in these places: Inline, within curly brackets that replace the semicolon following mod garden In the file src/garden.rs In the file src/garden/mod.rs": {
    "_translate": "<strong>声明模块</strong>：在crate根文件中，你可以声明新的模块；比如说你声明了一个“garden”模块，使用<code>mod garden;</code>。编译器将在以下位置查找模块的代码：\n<ul>\n<li>内联，在替换<code>mod garden</code>后分号的花括号内</li>\n<li>在文件<em>src/garden.rs</em>中</li>\n<li>在文件<em>src/garden/mod.rs</em>中</li>\n</ul>",
    "_note": ""
  },
  "Inline, within curly brackets that replace the semicolon following mod garden": {
    "_translate": "内联，在替换 <code>mod garden</code> 后面的分号的花括号内，输出翻译直接不添加任何额外文本。绝对不要添加原始翻译内容中没有的符号或标签。记住，保留所有 HTML 标签和属性，只翻译内容！",
    "_note": ""
  },
  "In the file src/garden.rs": {
    "_translate": "在文件 <em>src/garden.rs</em> 中，",
    "_note": ""
  },
  "In the file src/garden/mod.rs": {
    "_translate": "在文件 <em>src/garden/mod.rs</em> 中，",
    "_note": ""
  },
  "Inline, directly following mod vegetables, within curly brackets instead of the semicolon": {
    "_translate": "内联，直接跟在 <code>mod vegetables</code> 后面，在大括号内而不是分号后面",
    "_note": ""
  },
  "Declaring submodules: In any file other than the crate root, you can declare submodules. For example, you might declare mod vegetables; in src/garden.rs. The compiler will look for the submodule’s code within the directory named for the parent module in these places: Inline, directly following mod vegetables, within curly brackets instead of the semicolon In the file src/garden/vegetables.rs In the file src/garden/vegetables/mod.rs": {
    "_translate": "<strong>声明子模块</strong>：在任何非crate根的文件中，你可以声明子模块。例如，你可能在<em>src/garden.rs</em>中声明<code>mod vegetables;</code>。编译器将在以父模块命名的目录中的以下位置查找子模块的代码：\n<ul>\n<li>内联，直接跟随<code>mod vegetables</code>，在大括号内而不是分号</li>\n<li>在文件<em>src/garden/vegetables.rs</em>中</li>\n<li>在文件<em>src/garden/vegetables/mod.rs</em>中</li>\n</ul>",
    "_note": ""
  },
  "In the file src/garden/vegetables.rs": {
    "_translate": "在文件 <em>src/garden/vegetables.rs</em> 中",
    "_note": ""
  },
  "In the file src/garden/vegetables/mod.rs": {
    "_translate": "在文件 <em>src/garden/vegetables/mod.rs</em> 中",
    "_note": ""
  },
  "Paths to code in modules: Once a module is part of your crate, you can refer to code in that module from anywhere else in that same crate, as long as the privacy rules allow, using the path to the code. For example, an Asparagus type in the garden vegetables module would be found at crate::garden::vegetables::Asparagus.": {
    "_translate": "<strong>模块中的代码路径</strong>: 一旦一个模块成为你的crate的一部分，你就可以从该crate的任何其他地方引用该模块中的代码，只要隐私规则允许，使用代码的路径即可。例如，garden模块中的vegetables模块里的<code>Asparagus</code>类型将位于<code>crate::garden::vegetables::Asparagus</code>。",
    "_note": ""
  },
  "Private vs. public: Code within a module is private from its parent modules by default. To make a module public, declare it with pub mod instead of mod. To make items within a public module public as well, use pub before their declarations.": {
    "_translate": "<strong>私有与公有</strong>: 模块内的代码默认对其父模块是私有的。要使一个模块公有，使用 <code>pub mod</code> 而不是 <code>mod</code> 来声明它。要使公有模块中的项目也公有，需在它们的声明前使用 <code>pub</code>。",
    "_note": ""
  },
  "The use keyword: Within a scope, the use keyword creates shortcuts to items to reduce repetition of long paths. In any scope that can refer to crate::garden::vegetables::Asparagus, you can create a shortcut with use crate::garden::vegetables::Asparagus; and from then on you only need to write Asparagus to make use of that type in the scope.": {
    "_translate": "<strong><code>use</code> 关键字</strong>: 在一个作用域内，<code>use</code> 关键字创建到项目的快捷方式，以减少长路径的重复。在任何可以引用 <code>crate::garden::vegetables::Asparagus</code> 的作用域中，你可以通过 <code>use crate::garden::vegetables::Asparagus;</code> 创建一个快捷方式，从那时起，你只需要写 <code>Asparagus</code> 就可以在该作用域中使用该类型。",
    "_note": ""
  },
  "We define a module with the mod keyword followed by the name of the module (in this case, front_of_house). The body of the module then goes inside curly brackets. Inside modules, we can place other modules, as in this case with the modules hosting and serving. Modules can also hold definitions for other items, such as structs, enums, constants, traits, and as in Listing 7-1, functions.": {
    "_translate": "我们使用 <code>mod</code> 关键字后跟模块的名称（在本例中为 <code>front_of_house</code>）来定义一个模块。模块的主体内容则放在大括号内。在模块内部，我们可以放置其他模块，如本例中的 <code>hosting</code> 和 <code>serving</code> 模块。模块还可以包含其他项目的定义，例如结构体、枚举、常量、特征，以及如清单 7-1 所示的函数。",
    "_note": ""
  },
  "Control Scope and Privacy with Modules - The Rust Programming Language": {
    "_translate": "使用模块控制作用域和隐私 - 《Rust编程语言》",
    "_note": ""
  },
  "Control Scope and Privacy with Modules": {
    "_translate": "<a class=\"header\" href=\"#control-scope-and-privacy-with-modules\">使用模块控制作用域和隐私</a>",
    "_note": ""
  },
  "Start from the crate root: When compiling a crate, the compiler first looks in the crate root file (usually src/lib.rs for a library crate and src/main.rs for a binary crate) for code to compile.": {
    "_translate": "<strong>从crate根开始</strong>: 在编译crate时，编译器首先\n在crate根文件（通常为库crate的<em>src/lib.rs</em>和\n二进制crate的<em>src/main.rs</em>）中查找要编译的代码。",
    "_note": ""
  },
  "The use keyword: Within a scope, the use keyword creates shortcuts to items to reduce repetition of long paths. In any scope that can refer to crate::garden::vegetables::Asparagus, you can create a shortcut with use crate::garden::vegetables::Asparagus;, and from then on you only need to write Asparagus to make use of that type in the scope.": {
    "_translate": "<strong>关键字 <code>use</code></strong>: 在一个作用域内，<code>use</code> 关键字创建到项目的快捷方式，以减少长路径的重复。在任何可以引用 <code>crate::garden::vegetables::Asparagus</code> 的作用域中，你可以通过 <code>use crate::garden::vegetables::Asparagus;</code> 创建一个快捷方式，从那时起，你只需要写 <code>Asparagus</code> 就可以在作用域中使用该类型。",
    "_note": ""
  },
  "To structure our crate in this way, we can organize its functions into nested modules. Create a new library named restaurant by running cargo new restaurant --lib. Then, enter the code in Listing 7-1 into src/lib.rs to define some modules and function signatures; this code is the front of house section.": {
    "_translate": "要以这种方式构建我们的 crate，我们可以将其函数组织成嵌套的模块。通过运行 <code>cargo new restaurant --lib</code> 创建一个名为 <code>restaurant</code> 的新库。然后，将列表 7-1 中的代码输入到 <em>src/lib.rs</em> 中，以定义一些模块和函数签名；这段代码是前台部分。",
    "_note": ""
  },
  "Earlier, we mentioned that src/main.rs and src/lib.rs are called crate roots_. The reason for their name is that the contents of either of these two files form a module named crate at the root of the crate’s module structure, known as the module tree.": {
    "_translate": "之前，我们提到 <em>src/main.rs</em> 和 <em>src/lib.rs</em> 被称为 <em>crate roots</em>。它们之所以被称为 crate roots，是因为这两个文件中的内容在 crate 的模块结构的根部形成一个名为 <code>crate</code> 的模块，这个模块结构被称为 <em>模块树</em>。",
    "_note": ""
  }
}