{
  "Paths for Referring to an Item in the Module Tree": {
    "_translate": "<a class=\"header\" href=\"#paths-for-referring-to-an-item-in-the-module-tree\">模块树中引用项的路径</a>",
    "_note": ""
  },
  "To show Rust where to find an item in a module tree, we use a path in the same way we use a path when navigating a filesystem. To call a function, we need to know its path.": {
    "_translate": "为了告诉 Rust 在模块树中查找某个项的位置，我们使用路径，就像在导航文件系统时使用路径一样。要调用一个函数，我们需要知道它的路径。",
    "_note": ""
  },
  "A path can take two forms:": {
    "_translate": "路径可以有两种形式：",
    "_note": ""
  },
  "Both absolute and relative paths are followed by one or more identifiers separated by double colons (::).": {
    "_translate": "绝对路径和相对路径后面都跟着一个或多个由双冒号 (<code>::</code>) 分隔的标识符。",
    "_note": ""
  },
  "Returning to Listing 7-1, say we want to call the add_to_waitlist function. This is the same as asking: what’s the path of the add_to_waitlist function? Listing 7-3 contains Listing 7-1 with some of the modules and functions removed.": {
    "_translate": "回到清单 7-1，假设我们想要调用 <code>add_to_waitlist</code> 函数。\n这相当于问：<code>add_to_waitlist</code> 函数的路径是什么？\n清单 7-3 包含了清单 7-1 的部分内容，其中一些模块和函数已被移除。",
    "_note": ""
  },
  "We’ll show two ways to call the add_to_waitlist function from a new function, eat_at_restaurant, defined in the crate root. These paths are correct, but there’s another problem remaining that will prevent this example from compiling as is. We’ll explain why in a bit.": {
    "_translate": "我们将展示两种从新函数<code>eat_at_restaurant</code>调用<code>add_to_waitlist</code>函数的方法，这些函数在crate根目录中定义。这些路径是正确的，但还有一个问题会导致此示例无法编译。我们稍后会解释原因。",
    "_note": ""
  },
  "The eat_at_restaurant function is part of our library crate’s public API, so we mark it with the pub keyword. In the “Exposing Paths with the pub Keyword” section, we’ll go into more detail about pub.": {
    "_translate": "<code>eat_at_restaurant</code> 函数是我们库crate的公共API的一部分，所以我们用 <code>pub</code> 关键字标记它。在 <a href=\"ch07-03-paths-for-referring-to-an-item-in-the-module-tree.html#exposing-paths-with-the-pub-keyword\">“使用 <code>pub</code> 关键字暴露路径”</a><!-- ignore --> 部分，我们将详细介绍 <code>pub</code>。",
    "_note": ""
  },
  "The first time we call the add_to_waitlist function in eat_at_restaurant, we use an absolute path. The add_to_waitlist function is defined in the same crate as eat_at_restaurant, which means we can use the crate keyword to start an absolute path. We then include each of the successive modules until we make our way to add_to_waitlist. You can imagine a filesystem with the same structure: we’d specify the path /front_of_house/hosting/add_to_waitlist to run the add_to_waitlist program; using the crate name to start from the crate root is like using / to start from the filesystem root in your shell.": {
    "_translate": "第一次在 <code>eat_at_restaurant</code> 中调用 <code>add_to_waitlist</code> 函数时，\n我们使用了绝对路径。<code>add_to_waitlist</code> 函数与 <code>eat_at_restaurant</code> 定义在同一个\ncrate 中，这意味着我们可以使用 <code>crate</code> 关键字来\n开始一个绝对路径。然后我们依次包含每个后续模块，直到到达 <code>add_to_waitlist</code>。你可以想象一个具有相同\n结构的文件系统：我们会指定路径 <code>/front_of_house/hosting/add_to_waitlist</code> 来\n运行 <code>add_to_waitlist</code> 程序；使用 <code>crate</code> 名称从\ncrate 根开始类似于在 shell 中使用 <code>/</code> 从文件系统根开始。",
    "_note": ""
  },
  "The second time we call add_to_waitlist in eat_at_restaurant, we use a relative path. The path starts with front_of_house, the name of the module defined at the same level of the module tree as eat_at_restaurant. Here the filesystem equivalent would be using the path front_of_house/hosting/add_to_waitlist. Starting with a module name means that the path is relative.": {
    "_translate": "我们在 <code>eat_at_restaurant</code> 中第二次调用 <code>add_to_waitlist</code> 时，使用了相对路径。路径从 <code>front_of_house</code> 开始，这是与 <code>eat_at_restaurant</code> 在模块树同一级别的模块的名称。在这里，文件系统中的等效路径将是 <code>front_of_house/hosting/add_to_waitlist</code>。以模块名称开头意味着路径是相对的。",
    "_note": ""
  },
  "Let’s try to compile Listing 7-3 and find out why it won’t compile yet! The errors we get are shown in Listing 7-4.": {
    "_translate": "让我们尝试编译清单 7-3 并找出为什么它还不能编译！我们得到的错误如清单 7-4 所示。",
    "_note": ""
  },
  "Choosing whether to use a relative or absolute path is a decision you’ll make based on your project, and it depends on whether you’re more likely to move item definition code separately from or together with the code that uses the item. For example, if we moved the front_of_house module and the eat_at_restaurant function into a module named customer_experience, we’d need to update the absolute path to add_to_waitlist, but the relative path would still be valid. However, if we moved the eat_at_restaurant function separately into a module named dining, the absolute path to the add_to_waitlist call would stay the same, but the relative path would need to be updated. Our preference in general is to specify absolute paths because it’s more likely we’ll want to move code definitions and item calls independently of each other.": {
    "_translate": "选择使用相对路径还是绝对路径是基于你的项目做出的决定，这取决于你更可能将项定义代码与使用该项的代码分开移动还是一起移动。例如，如果我们把 <code>front_of_house</code> 模块和 <code>eat_at_restaurant</code> 函数移到一个名为 <code>customer_experience</code> 的模块中，我们需要更新调用 <code>add_to_waitlist</code> 的绝对路径，但相对路径仍然有效。然而，如果我们单独将 <code>eat_at_restaurant</code> 函数移到一个名为 <code>dining</code> 的模块中，调用 <code>add_to_waitlist</code> 的绝对路径将保持不变，但相对路径需要更新。我们通常更倾向于指定绝对路径，因为更可能我们希望独立地移动代码定义和项调用。",
    "_note": ""
  },
  "The error messages say that module hosting is private. In other words, we have the correct paths for the hosting module and the add_to_waitlist function, but Rust won’t let us use them because it doesn’t have access to the private sections. In Rust, all items (functions, methods, structs, enums, modules, and constants) are private to parent modules by default. If you want to make an item like a function or struct private, you put it in a module.": {
    "_translate": "错误消息说模块 <code>hosting</code> 是私有的。换句话说，我们有 <code>hosting</code> 模块和 <code>add_to_waitlist</code> 函数的正确路径，但 Rust 不让我们使用它们，因为它无法访问私有部分。在 Rust 中，默认情况下所有项（函数、方法、结构体、枚举、模块和常量）对父模块都是私有的。如果你想让一个项如函数或结构体私有，你可以将其放在一个模块中。",
    "_note": ""
  },
  "Items in a parent module can’t use the private items inside child modules, but items in child modules can use the items in their ancestor modules. This is because child modules wrap and hide their implementation details, but the child modules can see the context in which they’re defined. To continue with our metaphor, think of the privacy rules as being like the back office of a restaurant: what goes on in there is private to restaurant customers, but office managers can see and do everything in the restaurant they operate.": {
    "_translate": "父模块中的项不能使用子模块中的私有项，但子模块中的项可以使用其祖先模块中的项。这是因为子模块封装并隐藏了它们的实现细节，但子模块可以看到它们被定义的上下文。继续我们的比喻，可以把隐私规则想象成餐厅的后台办公室：后台发生的事情对餐厅顾客来说是私密的，但办公室经理可以看到并操作他们经营的餐厅中的一切。",
    "_note": ""
  },
  "Exposing Paths with the pub Keyword": {
    "_translate": "<a class=\"header\" href=\"#exposing-paths-with-the-pub-keyword\">使用 <code>pub</code> 关键字暴露路径</a>",
    "_note": ""
  },
  "Rust chose to have the module system function this way so that hiding inner implementation details is the default. That way, you know which parts of the inner code you can change without breaking outer code. However, Rust does give you the option to expose inner parts of child modules’ code to outer ancestor modules by using the pub keyword to make an item public.": {
    "_translate": "Rust 选择让模块系统以这种方式工作，以便隐藏内部实现细节成为默认行为。这样，你就知道可以在不破坏外部代码的情况下更改内部代码的哪些部分。然而，Rust 确实提供了通过使用 <code>pub</code> 关键字将项公开的选项，以使子模块的内部代码对父模块可见。",
    "_note": ""
  },
  "Unfortunately, the code in Listing 7-5 still results in compiler errors, as shown in Listing 7-6.": {
    "_translate": "不幸的是，清单 7-5 中的代码仍然会导致编译器错误，如 清单 7-6 所示。",
    "_note": ""
  },
  "Let’s return to the error in Listing 7-4 that told us the hosting module is private. We want the eat_at_restaurant function in the parent module to have access to the add_to_waitlist function in the child module, so we mark the hosting module with the pub keyword, as shown in Listing 7-5.": {
    "_translate": "让我们回到列表 7-4 中的错误，它告诉我们 <code>hosting</code> 模块是私有的。我们希望父模块中的 <code>eat_at_restaurant</code> 函数能够访问子模块中的 <code>add_to_waitlist</code> 函数，因此我们使用 <code>pub</code> 关键字标记 <code>hosting</code> 模块，如列表 7-5 所示。",
    "_note": ""
  },
  "The errors in Listing 7-6 say that the add_to_waitlist function is private. The privacy rules apply to structs, enums, functions, and methods as well as modules.": {
    "_translate": "列表 7-6 中的错误表明 <code>add_to_waitlist</code> 函数是私有的。\n隐私规则适用于结构体、枚举、函数和方法以及模块。",
    "_note": ""
  },
  "Let’s also make the add_to_waitlist function public by adding the pub keyword before its definition, as in Listing 7-7.": {
    "_translate": "让我们也通过在定义前添加 <code>pub</code> 关键字来使 <code>add_to_waitlist</code> 函数公开，如清单 7-7 所示。",
    "_note": ""
  },
  "Now the code will compile! To see why adding the pub keyword lets us use these paths in eat_at_restaurant with respect to the privacy rules, let’s look at the absolute and the relative paths.": {
    "_translate": "现在代码可以编译了！要了解为什么添加 <code>pub</code> 关键字让我们能够在 <code>eat_at_restaurant</code> 中使用这些路径，同时遵守隐私规则，让我们来看看绝对路径和相对路径。",
    "_note": ""
  },
  "What happened? Adding the pub keyword in front of mod hosting makes the module public. With this change, if we can access front_of_house, we can access hosting. But the contents of hosting are still private; making the module public doesn’t make its contents public. The pub keyword on a module only lets code in its ancestor modules refer to it, not access its inner code. Because modules are containers, there’s not much we can do by only making the module public; we need to go further and choose to make one or more of the items within the module public as well.": {
    "_translate": "发生了什么？在 <code>mod hosting</code> 前面添加 <code>pub</code> 关键字使模块变为公共模块。通过这一更改，如果我们能够访问 <code>front_of_house</code>，我们就可以访问 <code>hosting</code>。但是 <code>hosting</code> 的 <em>内容</em> 仍然是私有的；将模块设为公共模块并不会使其内容也变为公共的。<code>pub</code> 关键字在模块上仅允许其祖先模块中的代码引用它，而不能访问其内部代码。由于模块是容器，仅将模块设为公共模块并不能做太多事情；我们需要进一步选择将模块内的一个或多个项设为公共的。",
    "_note": ""
  },
  "In the relative path, the logic is the same as the absolute path except for the first step: rather than starting from the crate root, the path starts from front_of_house. The front_of_house module is defined within the same module as eat_at_restaurant, so the relative path starting from the module in which eat_at_restaurant is defined works. Then, because hosting and add_to_waitlist are marked with pub, the rest of the path works, and this function call is valid!": {
    "_translate": "在相对路径中，逻辑与绝对路径相同，只是第一步不同：不是从crate根开始，而是从<code>front_of_house</code>开始。因为<code>front_of_house</code>模块是在与<code>eat_at_restaurant</code>相同的模块中定义的，所以从定义<code>eat_at_restaurant</code>的模块开始的相对路径是有效的。然后，由于<code>hosting</code>和<code>add_to_waitlist</code>被标记为<code>pub</code>，路径的其余部分也有效，因此这个函数调用是有效的！",
    "_note": ""
  },
  "If you plan on sharing your library crate so other projects can use your code, your public API is your contract with users of your crate that determines how they can interact with your code. There are many considerations around managing changes to your public API to make it easier for people to depend on your crate. These considerations are out of the scope of this book; if you’re interested in this topic, see The Rust API Guidelines.": {
    "_translate": "如果您计划共享您的库crate，以便其他项目可以使用您的代码，您的公共API就是您与crate用户的契约，决定了他们如何与您的代码交互。在管理公共API的变更时有许多需要考虑的因素，以使人们更容易依赖您的crate。这些考虑超出了本书的范围；如果您对这个主题感兴趣，请参见<a href=\"https://rust-lang.github.io/api-guidelines/\">Rust API Guidelines</a>。",
    "_note": ""
  },
  "In the absolute path, we start with crate, the root of our crate’s module tree. The front_of_house module is defined in the crate root. While front_of_house isn’t public, because the eat_at_restaurant function is defined in the same module as front_of_house (that is, eat_at_restaurant and front_of_house are siblings), we can refer to front_of_house from eat_at_restaurant. Next is the hosting module marked with pub. We can access the parent module of hosting, so we can access hosting. Finally, the add_to_waitlist function is marked with pub and we can access its parent module, so this function call works!": {
    "_translate": "在绝对路径中，我们从 <code>crate</code> 开始，这是我们的 crate 模块树的根。 <code>front_of_house</code> 模块在 crate 根中定义。虽然 <code>front_of_house</code> 不是公共的，但由于 <code>eat_at_restaurant</code> 函数与 <code>front_of_house</code> 定义在同一个模块中（即 <code>eat_at_restaurant</code> 和 <code>front_of_house</code> 是同级的），我们可以从 <code>eat_at_restaurant</code> 引用 <code>front_of_house</code>。接下来是标记为 <code>pub</code> 的 <code>hosting</code> 模块。我们可以访问 <code>hosting</code> 的父模块，因此我们可以访问 <code>hosting</code>。最后， <code>add_to_waitlist</code> 函数标记为 <code>pub</code>，并且我们可以访问其父模块，因此这个函数调用可以工作！",
    "_note": ""
  },
  "We mentioned that a package can contain both a src/main.rs binary crate root as well as a src/lib.rs library crate root, and both crates will have the package name by default. Typically, packages with this pattern of containing both a library and a binary crate will have just enough code in the binary crate to start an executable that calls code within the library crate. This lets other projects benefit from most of the functionality that the package provides because the library crate’s code can be shared.": {
    "_translate": "我们提到，一个包可以同时包含一个 <em>src/main.rs</em> 二进制包根和一个 <em>src/lib.rs</em> 库包根，默认情况下这两个包都会使用包名。通常，具有这种同时包含库和二进制包模式的包，在二进制包中只包含足够的代码来启动一个可执行文件，该文件调用库包中的代码。这使得其他项目可以从包提供的大部分功能中受益，因为库包的代码可以被共享。",
    "_note": ""
  },
  "The module tree should be defined in src/lib.rs. Then, any public items can be used in the binary crate by starting paths with the name of the package. The binary crate becomes a user of the library crate just like a completely external crate would use the library crate: it can only use the public API. This helps you design a good API; not only are you the author, you’re also a client!": {
    "_translate": "模块树应在<em>src/lib.rs</em>中定义。然后，任何公共项都可以通过以包的名称开头的路径在二进制 crate 中使用。\n二进制 crate 成为库 crate 的用户，就像完全外部的 crate 使用库 crate 一样：它只能使用公共 API。\n这有助于你设计一个良好的 API；不仅是作者，你也是客户端！",
    "_note": ""
  },
  "Starting Relative Paths with super": {
    "_translate": "<a class=\"header\" href=\"#starting-relative-paths-with-super\">以 <code>super</code> 开始的相对路径</a>",
    "_note": ""
  },
  "In Chapter 12, we’ll demonstrate this organizational practice with a command-line program that will contain both a binary crate and a library crate.": {
    "_translate": "在<a href=\"ch12-00-an-io-project.html\">第 12 章</a><!-- ignore -->，我们将通过一个命令行程序来演示这种组织实践，该程序将同时包含一个二进制包和一个库包。",
    "_note": ""
  },
  "We can construct relative paths that begin in the parent module, rather than the current module or the crate root, by using super at the start of the path. This is like starting a filesystem path with the .. syntax. Using super allows us to reference an item that we know is in the parent module, which can make rearranging the module tree easier when the module is closely related to the parent but the parent might be moved elsewhere in the module tree someday.": {
    "_translate": "我们可以使用 <code>super</code> 在路径的开头构造从父模块而不是当前模块或 crate 根开始的相对路径。这类似于使用 <code>..</code> 语法开始文件系统路径。使用 <code>super</code> 可以让我们引用我们知道在父模块中的项，这可以在模块与父模块紧密相关但父模块将来可能会在模块树中移动到其他位置时，使重新排列模块树更加容易。",
    "_note": ""
  },
  "Consider the code in Listing 7-8 that models the situation in which a chef fixes an incorrect order and personally brings it out to the customer. The function fix_incorrect_order defined in the back_of_house module calls the function deliver_order defined in the parent module by specifying the path to deliver_order, starting with super.": {
    "_translate": "考虑清单 7-8 中的代码，该代码模拟了一位厨师修正错误订单并亲自将其送到客户手中的情况。<code>back_of_house</code> 模块中定义的 <code>fix_incorrect_order</code> 函数通过指定从 <code>super</code> 开始的 <code>deliver_order</code> 路径，调用了父模块中定义的 <code>deliver_order</code> 函数。",
    "_note": ""
  },
  "Making Structs and Enums Public": {
    "_translate": "<a class=\"header\" href=\"#making-structs-and-enums-public\">使结构体和枚举公开</a>",
    "_note": ""
  },
  "The fix_incorrect_order function is in the back_of_house module, so we can use super to go to the parent module of back_of_house, which in this case is crate, the root. From there, we look for deliver_order and find it. Success! We think the back_of_house module and the deliver_order function are likely to stay in the same relationship to each other and get moved together should we decide to reorganize the crate’s module tree. Therefore, we used super so we’ll have fewer places to update code in the future if this code gets moved to a different module.": {
    "_translate": "<code>fix_incorrect_order</code> 函数位于 <code>back_of_house</code> 模块中，因此我们可以使用 <code>super</code> 转到 <code>back_of_house</code> 的父模块，在这种情况下是 <code>crate</code>，即根模块。从那里，我们查找 <code>deliver_order</code> 并找到它。成功！我们认为 <code>back_of_house</code> 模块和 <code>deliver_order</code> 函数可能会保持彼此之间的关系，并且如果决定重组 crate 的模块树，它们会被一起移动。因此，我们使用了 <code>super</code>，这样如果这段代码被移动到不同的模块，将来需要更新的代码位置会更少。",
    "_note": ""
  },
  "We can also use pub to designate structs and enums as public, but there are a few extra details to the usage of pub with structs and enums. If we use pub before a struct definition, we make the struct public, but the struct’s fields will still be private. We can make each field public or not on a case-by-case basis. In Listing 7-9, we’ve defined a public back_of_house::Breakfast struct with a public toast field but a private seasonal_fruit field. This models the case in a restaurant where the customer can pick the type of bread that comes with a meal, but the chef decides which fruit accompanies the meal based on what’s in season and in stock. The available fruit changes quickly, so customers can’t choose the fruit or even see which fruit they’ll get.": {
    "_translate": "我们也可以使用 <code>pub</code> 将结构体和枚举指定为公共的，但 <code>pub</code> 与结构体和枚举的使用有一些额外的细节。如果我们在一个结构体定义前使用 <code>pub</code>，我们会使该结构体公共，但结构体的字段仍将保持私有。我们可以逐个字段地决定是否将其公开。在清单 7-9 中，我们定义了一个公共的 <code>back_of_house::Breakfast</code> 结构体，其中 <code>toast</code> 字段是公共的，但 <code>seasonal_fruit</code> 字段是私有的。这模拟了在餐厅中顾客可以选择随餐提供的面包类型，但厨师根据季节和库存决定随餐提供的水果。可用的水果变化很快，因此顾客不能选择水果，甚至不能看到他们会得到哪种水果。",
    "_note": ""
  },
  "Because the toast field in the back_of_house::Breakfast struct is public, in eat_at_restaurant we can write and read to the toast field using dot notation. Notice that we can’t use the seasonal_fruit field in eat_at_restaurant, because seasonal_fruit is private. Try uncommenting the line modifying the seasonal_fruit field value to see what error you get!": {
    "_translate": "因为 <code>back_of_house::Breakfast</code> 结构体中的 <code>toast</code> 字段是公开的，在 <code>eat_at_restaurant</code> 中我们可以使用点符号来写入和读取 <code>toast</code> 字段。注意，我们不能在 <code>eat_at_restaurant</code> 中使用 <code>seasonal_fruit</code> 字段，因为 <code>seasonal_fruit</code> 是私有的。尝试取消注释修改 <code>seasonal_fruit</code> 字段值的行，看看你会得到什么错误！",
    "_note": ""
  },
  "Also, note that because back_of_house::Breakfast has a private field, the struct needs to provide a public associated function that constructs an instance of Breakfast (we’ve named it summer here). If Breakfast didn’t have such a function, we couldn’t create an instance of Breakfast in eat_at_restaurant because we couldn’t set the value of the private seasonal_fruit field in eat_at_restaurant.": {
    "_translate": "另外，注意因为 <code>back_of_house::Breakfast</code> 有一个私有字段，所以该结构体需要提供一个公共关联函数来构造一个 <code>Breakfast</code> 的实例（在这里我们将其命名为 <code>summer</code>）。如果 <code>Breakfast</code> 没有这样一个函数，我们就不能在 <code>eat_at_restaurant</code> 中创建一个 <code>Breakfast</code> 的实例，因为在 <code>eat_at_restaurant</code> 中我们不能设置私有字段 <code>seasonal_fruit</code> 的值。",
    "_note": ""
  },
  "In contrast, if we make an enum public, all of its variants are then public. We only need the pub before the enum keyword, as shown in Listing 7-10.": {
    "_translate": "相比之下，如果我们使一个枚举公开，那么它的所有变体都将公开。我们只需要在 <code>enum</code> 关键字前加上 <code>pub</code>，如清单 7-10 所示。",
    "_note": ""
  },
  "Because we made the Appetizer enum public, we can use the Soup and Salad variants in eat_at_restaurant.": {
    "_translate": "因为我们将 <code>Appetizer</code> 枚举公开，所以可以在 <code>eat_at_restaurant</code> 中使用 <code>Soup</code> 和 <code>Salad</code> 变体。",
    "_note": ""
  },
  "There’s one more situation involving pub that we haven’t covered, and that is our last module system feature: the use keyword. We’ll cover use by itself first, and then we’ll show how to combine pub and use.": {
    "_translate": "还有另一种涉及<code>pub</code>的情况我们尚未讨论，那就是我们模块系统中的最后一个特性：<code>use</code>关键字。我们首先单独介绍<code>use</code>，然后展示如何结合使用<code>pub</code>和<code>use</code>。",
    "_note": ""
  },
  "Enums aren’t very useful unless their variants are public; it would be annoying to have to annotate all enum variants with pub in every case, so the default for enum variants is to be public. Structs are often useful without their fields being public, so struct fields follow the general rule of everything being private by default unless annotated with pub.": {
    "_translate": "枚举类型除非其变体是公开的，否则并不是很实用；如果每次都要为所有枚举变体标注<code>pub</code>会很麻烦，所以枚举变体的默认状态是公开的。结构体即使其字段不是公开的也经常是有用的，因此结构体字段遵循一切默认为私有的规则，除非标注了<code>pub</code>。",
    "_note": ""
  },
  "Paths for Referring to an Item in the Module Tree - The Rust Programming Language": {
    "_translate": "路径用于引用模块树中的项 - 《Rust编程语言》",
    "_note": ""
  },
  "An absolute path is the full path starting from a crate root; for code from an external crate, the absolute path begins with the crate name, and for code from the current crate, it starts with the literal crate.": {
    "_translate": "一个<em>绝对路径</em>是从crate根开始的完整路径；对于来自外部crate的代码，绝对路径以crate名称开始，而对于当前crate的代码，它以字面<code>crate</code>开始。",
    "_note": ""
  },
  "A relative path starts from the current module and uses self, super, or an identifier in the current module.": {
    "_translate": "一个<em>相对路径</em>从当前模块开始，并使用<code>self</code>、<code>super</code>或当前模块中的标识符。",
    "_note": ""
  },
  "Best Practices for Packages with a Binary and a Library": {
    "_translate": "<a class=\"header\" href=\"#best-practices-for-packages-with-a-binary-and-a-library\">包含二进制文件和库的包的最佳实践</a>",
    "_note": ""
  },
  "If you plan on sharing your library crate so other projects can use your code, your public API is your contract with users of your crate that determines how they can interact with your code. There are many considerations around managing changes to your public API to make it easier for people to depend on your crate. These considerations are beyond the scope of this book; if you’re interested in this topic, see The Rust API Guidelines.": {
    "_translate": "如果你打算分享你的库crate，以便其他项目可以使用你的代码，你的公共API就是你与crate用户之间的契约，决定了他们如何与你的代码交互。围绕管理公共API变更有许多考虑因素，以使人们更容易依赖你的crate。这些考虑因素超出了本书的范围；如果你对这个话题感兴趣，可以参见<a href=\"https://rust-lang.github.io/api-guidelines/\">Rust API 指南</a>。",
    "_note": ""
  },
  "In Chapter 12, we’ll demonstrate this organizational practice with a command line program that will contain both a binary crate and a library crate.": {
    "_translate": "在<a href=\"ch12-00-an-io-project.html\">第 12 章</a><!-- ignore -->，我们将通过一个命令行程序演示这种组织实践，该程序将同时包含一个二进制包和一个库包。",
    "_note": ""
  },
  "We mentioned that a package can contain both a src/main.rs binary crate root as well as a src/lib.rs library crate root, and both crates will have the package name by default. Typically, packages with this pattern of containing both a library and a binary crate will have just enough code in the binary crate to start an executable that calls code defined in the library crate. This lets other projects benefit from the most functionality that the package provides because the library crate’s code can be shared.": {
    "_translate": "我们提到，一个包可以同时包含一个 <em>src/main.rs</em> 二进制包根和一个 <em>src/lib.rs</em> 库包根，默认情况下这两个包都会使用包名。通常，具有这种同时包含库和二进制包模式的包，其二进制包中只包含足够的代码来启动一个调用库包中定义的代码的可执行文件。这使得其他项目可以从包提供的大部分功能中受益，因为库包的代码可以被共享。",
    "_note": ""
  },
  "We can construct relative paths that begin in the parent module, rather than the current module or the crate root, by using super at the start of the path. This is like starting a filesystem path with the .. syntax that means to go to the parent directory. Using super allows us to reference an item that we know is in the parent module, which can make rearranging the module tree easier when the module is closely related to the parent but the parent might be moved elsewhere in the module tree someday.": {
    "_translate": "我们可以通过在路径的开头使用<code>super</code>来构建从父模块而不是当前模块或crate根开始的相对路径。这类似于使用<code>..</code>语法在文件系统路径中表示进入父目录。使用<code>super</code>可以让我们引用我们知道在父模块中的项，这在模块与父模块紧密相关但父模块将来可能被移动到模块树的其他位置时，可以使重新排列模块树更加容易。",
    "_note": ""
  }
}