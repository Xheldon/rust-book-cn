{
  "Common Collections": {
    "_translate": "<a class=\"header\" href=\"#common-collections\">常用集合</a>",
    "_note": ""
  },
  "To learn about the other kinds of collections provided by the standard library, see the documentation.": {
    "_translate": "要了解标准库提供的其他类型的集合，请参阅<a href=\"../std/collections/index.html\">文档</a>。",
    "_note": ""
  },
  "Rust’s standard library includes a number of very useful data structures called collections. Most other data types represent one specific value, but collections can contain multiple values. Unlike the built-in array and tuple types, the data these collections point to is stored on the heap, which means the amount of data does not need to be known at compile time and can grow or shrink as the program runs. Each kind of collection has different capabilities and costs, and choosing an appropriate one for your current situation is a skill you’ll develop over time. In this chapter, we’ll discuss three collections that are used very often in Rust programs:": {
    "_translate": "Rust 的标准库包含了许多非常有用的数据结构，称为 <em>集合</em>。大多数其他数据类型表示一个特定的值，但集合可以包含多个值。与内置的数组和元组类型不同，这些集合指向的数据存储在堆上，这意味着数据量不需要在编译时确定，并且可以在程序运行时增长或缩小。每种集合都有不同的功能和成本，选择适合当前情况的集合是你将随着时间发展而培养的一项技能。在本章中，我们将讨论在 Rust 程序中经常使用的三种集合：",
    "_note": ""
  },
  "We’ll discuss how to create and update vectors, strings, and hash maps, as well as what makes each special.": {
    "_translate": "我们将讨论如何创建和更新向量、字符串和哈希映射，以及每种数据结构的特殊之处。",
    "_note": ""
  },
  "Common Collections - The Rust Programming Language": {
    "_translate": "常用集合 - 《Rust 编程语言》",
    "_note": ""
  }
}