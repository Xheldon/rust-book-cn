{
  "To panic! or Not to panic!": {
    "_translate": "<a class=\"header\" href=\"#to-panic-or-not-to-panic\">是否使用<code>panic!</code></a>",
    "_note": ""
  },
  "In situations such as examples, prototype code, and tests, it’s more appropriate to write code that panics instead of returning a Result. Let’s explore why, then discuss situations in which the compiler can’t tell that failure is impossible, but you as a human can. The chapter will conclude with some general guidelines on how to decide whether to panic in library code.": {
    "_translate": "在示例、原型代码和测试等情况下，编写会引发恐慌的代码比返回一个<code>Result</code>更为合适。让我们探讨其中的原因，然后讨论编译器无法判断失败是不可能的情况，但作为人类的你可以判断。本章将以一些通用指南作为结束，这些指南将帮助你决定在库代码中是否应该引发恐慌。",
    "_note": ""
  },
  "So how do you decide when you should call panic! and when you should return Result? When code panics, there’s no way to recover. You could call panic! for any error situation, whether there’s a possible way to recover or not, but then you’re making the decision that a situation is unrecoverable on behalf of the calling code. When you choose to return a Result value, you give the calling code options. The calling code could choose to attempt to recover in a way that’s appropriate for its situation, or it could decide that an Err value in this case is unrecoverable, so it can call panic! and turn your recoverable error into an unrecoverable one. Therefore, returning Result is a good default choice when you’re defining a function that might fail.": {
    "_translate": "那么，你如何决定何时应该调用 <code>panic!</code> 以及何时应该返回 <code>Result</code>？当代码 panic 时，没有恢复的方法。你可以在任何错误情况下调用 <code>panic!</code>，无论是否有恢复的可能，但这样做你是在代表调用代码决定某个情况是不可恢复的。当你选择返回一个 <code>Result</code> 值时，你给调用代码提供了选项。调用代码可以选择以适合其情况的方式尝试恢复，或者它可以决定在这种情况下 <code>Err</code> 值是不可恢复的，因此它可以调用 <code>panic!</code> 并将你的可恢复错误转换为不可恢复的错误。因此，当你定义一个可能失败的函数时，返回 <code>Result</code> 是一个很好的默认选择。",
    "_note": ""
  },
  "Examples, Prototype Code, and Tests": {
    "_translate": "<a class=\"header\" href=\"#examples-prototype-code-and-tests\">示例、原型代码和测试</a>",
    "_note": ""
  },
  "Similarly, the unwrap and expect methods are very handy when prototyping, before you’re ready to decide how to handle errors. They leave clear markers in your code for when you’re ready to make your program more robust.": {
    "_translate": "同样，在原型设计时，<code>unwrap</code> 和 <code>expect</code> 方法非常方便，可以在你决定如何处理错误之前使用。它们在你的代码中留下了清晰的标记，以便你在准备使程序更加健壮时使用。",
    "_note": ""
  },
  "When you’re writing an example to illustrate some concept, also including robust error-handling code can make the example less clear. In examples, it’s understood that a call to a method like unwrap that could panic is meant as a placeholder for the way you’d want your application to handle errors, which can differ based on what the rest of your code is doing.": {
    "_translate": "当你编写示例来说明某个概念时，包含健壮的错误处理代码可能会使示例变得不那么清晰。在示例中，理解为对像 <code>unwrap</code> 这样的方法的调用，可能会引发 panic，是作为你希望应用程序处理错误的方式的占位符，这可以根据你的其余代码的不同而有所不同。",
    "_note": ""
  },
  "Cases in Which You Have More Information Than the Compiler": {
    "_translate": "<a class=\"header\" href=\"#cases-in-which-you-have-more-information-than-the-compiler\">您比编译器拥有更多信息的情况</a>",
    "_note": ""
  },
  "If a method call fails in a test, you’d want the whole test to fail, even if that method isn’t the functionality under test. Because panic! is how a test is marked as a failure, calling unwrap or expect is exactly what should happen.": {
    "_translate": "如果在测试中方法调用失败，即使该方法不是测试的功能，你也希望整个测试失败。因为 <code>panic!</code> 是标记测试失败的方式，所以调用 <code>unwrap</code> 或 <code>expect</code> 正是应该发生的事情。",
    "_note": ""
  },
  "It would also be appropriate to call unwrap or expect when you have some other logic that ensures the Result will have an Ok value, but the logic isn’t something the compiler understands. You’ll still have a Result value that you need to handle: whatever operation you’re calling still has the possibility of failing in general, even though it’s logically impossible in your particular situation. If you can ensure by manually inspecting the code that you’ll never have an Err variant, it’s perfectly acceptable to call unwrap, and even better to document the reason you think you’ll never have an Err variant in the expect text. Here’s an example:": {
    "_translate": "在你有其他逻辑确保 <code>Result</code> 将会有一个 <code>Ok</code> 值，但这些逻辑不是编译器能理解的情况下，调用 <code>unwrap</code> 或 <code>expect</code> 也是合适的。你仍然需要处理一个 <code>Result</code> 值：你调用的任何操作在一般情况下仍然有可能失败，即使在你的特定情况下逻辑上是不可能的。如果你可以通过手动检查代码确保永远不会有一个 <code>Err</code> 变体，调用 <code>unwrap</code> 是完全可以接受的，甚至更好是在 <code>expect</code> 文本中记录你认为永远不会有一个 <code>Err</code> 变体的原因。这里有一个例子：",
    "_note": ""
  },
  "Guidelines for Error Handling": {
    "_translate": "<a class=\"header\" href=\"#guidelines-for-error-handling\">错误处理指南</a>",
    "_note": ""
  },
  "It’s advisable to have your code panic when it’s possible that your code could end up in a bad state. In this context, a bad state is when some assumption, guarantee, contract, or invariant has been broken, such as when invalid values, contradictory values, or missing values are passed to your code—plus one or more of the following:": {
    "_translate": "建议在代码可能进入不良状态时让代码引发恐慌。在此上下文中，<em>不良状态</em>是指某些假设、保证、契约或不变量被破坏的情况，例如当无效值、矛盾值或缺失值被传递给代码时—加上以下一项或多项：",
    "_note": ""
  },
  "We’re creating an IpAddr instance by parsing a hardcoded string. We can see that 127.0.0.1 is a valid IP address, so it’s acceptable to use expect here. However, having a hardcoded, valid string doesn’t change the return type of the parse method: we still get a Result value, and the compiler will still make us handle the Result as if the Err variant is a possibility because the compiler isn’t smart enough to see that this string is always a valid IP address. If the IP address string came from a user rather than being hardcoded into the program and therefore did have a possibility of failure, we’d definitely want to handle the Result in a more robust way instead. Mentioning the assumption that this IP address is hardcoded will prompt us to change expect to better error-handling code if, in the future, we need to get the IP address from some other source instead.": {
    "_translate": "我们正在通过解析一个硬编码的字符串来创建一个 <code>IpAddr</code> 实例。我们可以看到 <code>127.0.0.1</code> 是一个有效的 IP 地址，因此在这里使用 <code>expect</code> 是可以接受的。然而，即使有一个硬编码的有效字符串，也不会改变 <code>parse</code> 方法的返回类型：我们仍然会得到一个 <code>Result</code> 值，编译器仍然会要求我们像 <code>Err</code> 变体有可能出现一样处理 <code>Result</code>，因为编译器不够智能，无法识别这个字符串始终是一个有效的 IP 地址。如果 IP 地址字符串来自用户而不是硬编码在程序中，因此确实有可能失败，我们肯定希望以更健壮的方式处理 <code>Result</code>。提到这个 IP 地址是硬编码的，会促使我们在将来需要从其他来源获取 IP 地址时，将 <code>expect</code> 更改为更好的错误处理代码。",
    "_note": ""
  },
  "However, when failure is expected, it’s more appropriate to return a Result than to make a panic! call. Examples include a parser being given malformed data or an HTTP request returning a status that indicates you have hit a rate limit. In these cases, returning a Result indicates that failure is an expected possibility that the calling code must decide how to handle.": {
    "_translate": "然而，当失败是可以预期的时，返回一个 <code>Result</code> 比调用 <code>panic!</code> 更合适。例如，解析器接收到格式错误的数据或 HTTP 请求返回的状态表明你已达到速率限制。在这些情况下，返回一个 <code>Result</code> 表示失败是一个预期的可能性，调用代码必须决定如何处理。",
    "_note": ""
  },
  "If someone calls your code and passes in values that don’t make sense, it’s best to return an error if you can so the user of the library can decide what they want to do in that case. However, in cases where continuing could be insecure or harmful, the best choice might be to call panic! and alert the person using your library to the bug in their code so they can fix it during development. Similarly, panic! is often appropriate if you’re calling external code that is out of your control and it returns an invalid state that you have no way of fixing.": {
    "_translate": "如果有人调用你的代码并传入了没有意义的值，最好能够返回一个错误，这样库的使用者可以决定在这种情况下他们想要做什么。然而，在继续执行可能会不安全或有害的情况下，最好的选择可能是调用<code>panic!</code>并提醒使用你库的人他们的代码中的错误，以便他们在开发过程中修复它。同样，如果你调用的外部代码不受你控制，并且它返回了一个你无法修复的无效状态，那么调用<code>panic!</code>通常是合适的。",
    "_note": ""
  },
  "However, having lots of error checks in all of your functions would be verbose and annoying. Fortunately, you can use Rust’s type system (and thus the type checking done by the compiler) to do many of the checks for you. If your function has a particular type as a parameter, you can proceed with your code’s logic knowing that the compiler has already ensured you have a valid value. For example, if you have a type rather than an Option, your program expects to have something rather than nothing. Your code then doesn’t have to handle two cases for the Some and None variants: it will only have one case for definitely having a value. Code trying to pass nothing to your function won’t even compile, so your function doesn’t have to check for that case at runtime. Another example is using an unsigned integer type such as u32, which ensures the parameter is never negative.": {
    "_translate": "然而，在所有函数中进行大量的错误检查会显得冗长且烦人。幸运的是，你可以利用 Rust 的类型系统（以及编译器进行的类型检查）来为你完成许多检查。如果函数的参数具有特定类型，你可以确信编译器已经确保你有一个有效的值，从而继续执行代码的逻辑。例如，如果你有一个类型而不是一个 <code>Option</code>，你的程序期望有一个 <em>东西</em> 而不是一个 <em>空值</em>。你的代码就不必处理 <code>Some</code> 和 <code>None</code> 变体的两种情况：它将只有一个确定有值的情况。试图将空值传递给你的函数的代码甚至无法编译，因此你的函数在运行时不必检查这种情况。另一个例子是使用无符号整数类型，如 <code>u32</code>，这确保参数永远不会是负数。",
    "_note": ""
  },
  "When your code performs an operation that could put a user at risk if it’s called using invalid values, your code should verify the values are valid first and panic if the values aren’t valid. This is mostly for safety reasons: attempting to operate on invalid data can expose your code to vulnerabilities. This is the main reason the standard library will call panic! if you attempt an out-of-bounds memory access: trying to access memory that doesn’t belong to the current data structure is a common security problem. Functions often have contracts: their behavior is only guaranteed if the inputs meet particular requirements. Panicking when the contract is violated makes sense because a contract violation always indicates a caller-side bug, and it’s not a kind of error you want the calling code to have to explicitly handle. In fact, there’s no reasonable way for calling code to recover; the calling programmers need to fix the code. Contracts for a function, especially when a violation will cause a panic, should be explained in the API documentation for the function.": {
    "_translate": "当您的代码执行可能因使用无效值而使用户面临风险的操作时，您的代码应首先验证这些值是否有效，如果值无效则应触发 panic。这主要是出于安全考虑：尝试在无效数据上进行操作可能会使您的代码暴露于漏洞之中。这是标准库在您尝试越界内存访问时会调用 <code>panic!</code> 的主要原因：尝试访问不属于当前数据结构的内存是一个常见的安全问题。函数通常有<em>契约</em>：只有当输入满足特定要求时，其行为才能得到保证。当契约被违反时触发 panic 是合理的，因为契约违反总是表明调用方存在错误，而且这不是调用代码需要显式处理的那种错误。事实上，调用代码没有合理的方法可以恢复；调用的<em>程序员</em>需要修复代码。函数的契约，尤其是当违反契约会导致 panic 时，应在函数的 API 文档中进行解释。",
    "_note": ""
  },
  "Creating Custom Types for Validation": {
    "_translate": "<a class=\"header\" href=\"#creating-custom-types-for-validation\">为验证创建自定义类型</a>",
    "_note": ""
  },
  "One way to do this would be to parse the guess as an i32 instead of only a u32 to allow potentially negative numbers, and then add a check for the number being in range, like so:": {
    "_translate": "一种方法是将猜测解析为 <code>i32</code> 而不仅仅是 <code>u32</code> 以允许可能的负数，然后添加一个检查数字是否在范围内的检查，如下所示：",
    "_note": ""
  },
  "Let’s take the idea of using Rust’s type system to ensure we have a valid value one step further and look at creating a custom type for validation. Recall the guessing game in Chapter 2 in which our code asked the user to guess a number between 1 and 100. We never validated that the user’s guess was between those numbers before checking it against our secret number; we only validated that the guess was positive. In this case, the consequences were not very dire: our output of “Too high” or “Too low” would still be correct. But it would be a useful enhancement to guide the user toward valid guesses and have different behavior when the user guesses a number that’s out of range versus when the user types, for example, letters instead.": {
    "_translate": "让我们进一步利用 Rust 的类型系统来确保我们有一个有效的值，并看看如何为验证创建一个自定义类型。回想第 2 章中的猜数字游戏，我们的代码要求用户猜一个 1 到 100 之间的数字。我们从未验证用户的猜测是否在这些数字之间，而只是验证了猜测是否为正数。在这种情况下，后果并不严重：我们输出的“太高”或“太低”仍然是正确的。但是，引导用户进行有效的猜测，并在用户猜测的数字超出范围时与用户输入字母等其他情况时有不同的行为，这将是一个有用的增强。",
    "_note": ""
  },
  "The if expression checks whether our value is out of range, tells the user about the problem, and calls continue to start the next iteration of the loop and ask for another guess. After the if expression, we can proceed with the comparisons between guess and the secret number knowing that guess is between 1 and 100.": {
    "_translate": "<code>if</code> 表达式检查我们的值是否超出范围，告知用户问题，并调用 <code>continue</code> 开始循环的下一次迭代并要求再次猜测。在 <code>if</code> 表达式之后，我们可以进行 <code>guess</code> 和秘密数字之间的比较，确信 <code>guess</code> 在 1 和 100 之间。",
    "_note": ""
  },
  "However, this is not an ideal solution: if it were absolutely critical that the program only operated on values between 1 and 100, and it had many functions with this requirement, having a check like this in every function would be tedious (and might impact performance).": {
    "_translate": "然而，这并不是一个理想的解决方案：如果程序绝对需要仅对1到100之间的值进行操作，并且有许多函数都有这个要求，那么在每个函数中都进行这样的检查会很繁琐（并且可能影响性能）。",
    "_note": ""
  },
  "First we define a struct named Guess that has a field named value that holds an i32. This is where the number will be stored.": {
    "_translate": "首先我们定义一个名为 <code>Guess</code> 的结构体，它有一个名为 <code>value</code> 的字段，该字段存储一个 <code>i32</code>。这就是数字将被存储的地方。",
    "_note": ""
  },
  "Instead, we can make a new type and put the validations in a function to create an instance of the type rather than repeating the validations everywhere. That way, it’s safe for functions to use the new type in their signatures and confidently use the values they receive. Listing 9-13 shows one way to define a Guess type that will only create an instance of Guess if the new function receives a value between 1 and 100.": {
    "_translate": "相反，我们可以创建一个新类型，并将验证放在一个函数中来创建该类型的实例，而不是在每个地方重复验证。这样，函数可以在其签名中安全地使用新类型，并且可以自信地使用接收到的值。清单 9-13 展示了一种定义 <code>Guess</code> 类型的方法，该类型只有在 <code>new</code> 函数接收到 1 到 100 之间的值时才会创建 <code>Guess</code> 的实例。",
    "_note": ""
  },
  "Next, we implement a method named value that borrows self, doesn’t have any other parameters, and returns an i32. This kind of method is sometimes called a getter because its purpose is to get some data from its fields and return it. This public method is necessary because the value field of the Guess struct is private. It’s important that the value field be private so code using the Guess struct is not allowed to set value directly: code outside the module must use the Guess::new function to create an instance of Guess, thereby ensuring there’s no way for a Guess to have a value that hasn’t been checked by the conditions in the Guess::new function.": {
    "_translate": "接下来，我们实现一个名为<code>value</code>的方法，该方法借用<code>self</code>，没有其他参数，并返回一个<code>i32</code>。这种类型的方法有时被称为<em>getter</em>，因为它的目的是从其字段中获取一些数据并返回。这个公共方法是必要的，因为<code>Guess</code>结构体的<code>value</code>字段是私有的。重要的是<code>value</code>字段必须是私有的，这样使用<code>Guess</code>结构体的代码就不能直接设置<code>value</code>：模块外部的代码<em>必须</em>使用<code>Guess::new</code>函数来创建<code>Guess</code>的实例，从而确保没有一种方法可以让<code>Guess</code>拥有一个未被<code>Guess::new</code>函数中的条件检查过的<code>value</code>。",
    "_note": ""
  },
  "A function that has a parameter or returns only numbers between 1 and 100 could then declare in its signature that it takes or returns a Guess rather than an i32 and wouldn’t need to do any additional checks in its body.": {
    "_translate": "一个函数如果其参数或返回值仅限于1到100之间的数字，那么可以在其签名中声明它接受或返回一个<code>Guess</code>而不是一个<code>i32</code>，并且不需要在其主体中进行任何额外的检查。",
    "_note": ""
  },
  "Then we implement an associated function named new on Guess that creates instances of Guess values. The new function is defined to have one parameter named value of type i32 and to return a Guess. The code in the body of the new function tests value to make sure it’s between 1 and 100. If value doesn’t pass this test, we make a panic! call, which will alert the programmer who is writing the calling code that they have a bug they need to fix, because creating a Guess with a value outside this range would violate the contract that Guess::new is relying on. The conditions in which Guess::new might panic should be discussed in its public-facing API documentation; we’ll cover documentation conventions indicating the possibility of a panic! in the API documentation that you create in Chapter 14. If value does pass the test, we create a new Guess with its value field set to the value parameter and return the Guess.": {
    "_translate": "然后我们在 <code>Guess</code> 上实现一个名为 <code>new</code> 的关联函数，用于创建 <code>Guess</code> 值的实例。<code>new</code> 函数定义为有一个名为 <code>value</code> 的参数，类型为 <code>i32</code>，并返回一个 <code>Guess</code>。<code>new</code> 函数体中的代码测试 <code>value</code> 以确保其在 1 到 100 之间。如果 <code>value</code> 未通过此测试，我们将调用 <code>panic!</code>，这将提醒编写调用代码的程序员他们需要修复一个错误，因为使用此范围之外的 <code>value</code> 创建 <code>Guess</code> 会违反 <code>Guess::new</code> 依赖的契约。<code>Guess::new</code> 可能会触发 <code>panic</code> 的条件应在面向公众的 API 文档中讨论；我们将在第 14 章中介绍如何在你创建的 API 文档中使用文档约定来指示 <code>panic!</code> 的可能性。如果 <code>value</code> 通过了测试，我们将创建一个新的 <code>Guess</code>，其 <code>value</code> 字段设置为 <code>value</code> 参数，并返回 <code>Guess</code>。",
    "_note": ""
  },
  "Summary": {
    "_translate": "<a class=\"header\" href=\"#summary\">摘要</a>",
    "_note": ""
  },
  "Now that you’ve seen useful ways that the standard library uses generics with the Option and Result enums, we’ll talk about how generics work and how you can use them in your code.": {
    "_translate": "现在你已经看到了标准库如何使用泛型与<code>Option</code>和<code>Result</code>枚举，我们将讨论泛型的工作原理以及如何在你的代码中使用它们。",
    "_note": ""
  },
  "Rust’s error-handling features are designed to help you write more robust code. The panic! macro signals that your program is in a state it can’t handle and lets you tell the process to stop instead of trying to proceed with invalid or incorrect values. The Result enum uses Rust’s type system to indicate that operations might fail in a way that your code could recover from. You can use Result to tell code that calls your code that it needs to handle potential success or failure as well. Using panic! and Result in the appropriate situations will make your code more reliable in the face of inevitable problems.": {
    "_translate": "Rust 的错误处理特性旨在帮助您编写更健壮的代码。\nThe <code>panic!</code> 宏表示您的程序处于无法处理的状态，并\n让您告诉进程停止，而不是尝试使用无效或\n错误的值继续进行。The <code>Result</code> 枚举使用 Rust 的类型系统来表示\n操作可能会失败，但您的代码可以从中恢复。您可以使用\n<code>Result</code> 告诉调用您的代码的代码，它需要处理潜在的\n成功或失败。在适当的情况下使用 <code>panic!</code> 和 <code>Result</code> 将使您的代码在面对不可避免的问题时更加可靠。",
    "_note": ""
  }
}