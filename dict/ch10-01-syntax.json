{
  "Generic Data Types": {
    "_translate": "<a class=\"header\" href=\"#generic-data-types\">泛型数据类型</a>",
    "_note": ""
  },
  "We use generics to create definitions for items like function signatures or structs, which we can then use with many different concrete data types. Let’s first look at how to define functions, structs, enums, and methods using generics. Then we’ll discuss how generics affect code performance.": {
    "_translate": "我们使用泛型来为函数签名或结构体等项创建定义，然后我们可以用这些定义与许多不同的具体数据类型一起使用。首先，让我们看看如何使用泛型定义函数、结构体、枚举和方法。然后我们将讨论泛型如何影响代码性能。",
    "_note": ""
  },
  "In Function Definitions": {
    "_translate": "<a class=\"header\" href=\"#in-function-definitions\">在函数定义中</a>",
    "_note": ""
  },
  "When defining a function that uses generics, we place the generics in the signature of the function where we would usually specify the data types of the parameters and return value. Doing so makes our code more flexible and provides more functionality to callers of our function while preventing code duplication.": {
    "_translate": "当定义一个使用泛型的函数时，我们在函数签名中放置泛型，通常在这里指定参数和返回值的数据类型。这样做使我们的代码更加灵活，并为调用我们函数的用户提供更多功能，同时防止代码重复。",
    "_note": ""
  },
  "Continuing with our largest function, Listing 10-4 shows two functions that both find the largest value in a slice. We’ll then combine these into a single function that uses generics.": {
    "_translate": "继续我们的<code>largest</code>函数，列表10-4展示了两个函数，它们都用于在切片中找到最大的值。然后，我们将这些合并为一个使用泛型的函数。",
    "_note": ""
  },
  "The largest_i32 function is the one we extracted in Listing 10-3 that finds the largest i32 in a slice. The largest_char function finds the largest char in a slice. The function bodies have the same code, so let’s eliminate the duplication by introducing a generic type parameter in a single function.": {
    "_translate": "<code>largest_i32</code> 函数是在列表 10-3 中提取的，用于在切片中找到最大的 <code>i32</code>。<code>largest_char</code> 函数则用于在切片中找到最大的 <code>char</code>。这两个函数的函数体代码相同，因此我们可以通过在单个函数中引入泛型类型参数来消除重复。",
    "_note": ""
  },
  "To parameterize the types in a new single function, we need to name the type parameter, just as we do for the value parameters to a function. You can use any identifier as a type parameter name. But we’ll use T because, by convention, type parameter names in Rust are short, often just one letter, and Rust’s type-naming convention is UpperCamelCase. Short for type, T is the default choice of most Rust programmers.": {
    "_translate": "为了在新函数中参数化类型，我们需要命名类型参数，就像我们为函数的值参数命名一样。你可以使用任何标识符作为类型参数名。但我们将使用<code>T</code>，因为按照惯例，Rust 中的类型参数名较短，通常只是一个字母，而 Rust 的类型命名约定是 UpperCamelCase。作为 <em>type</em> 的缩写，<code>T</code> 是大多数 Rust 程序员的默认选择。",
    "_note": ""
  },
  "When we use a parameter in the body of the function, we have to declare the parameter name in the signature so the compiler knows what that name means. Similarly, when we use a type parameter name in a function signature, we have to declare the type parameter name before we use it. To define the generic largest function, we place type name declarations inside angle brackets, <>, between the name of the function and the parameter list, like this:": {
    "_translate": "当我们在一个函数的主体中使用参数时，我们必须在签名中声明参数名称，以便编译器知道该名称的含义。同样，当我们在函数签名中使用类型参数名称时，我们必须在使用之前声明类型参数名称。为了定义泛型<code>largest</code>函数，我们在函数名称和参数列表之间使用尖括号<code>&lt;&gt;</code>内放置类型名称声明，如下所示：",
    "_note": ""
  },
  "We read this definition as: the function largest is generic over some type T. This function has one parameter named list, which is a slice of values of type T. The largest function will return a reference to a value of the same type T.": {
    "_translate": "我们读这个定义为：函数 <code>largest</code> 是泛型的，类型为 <code>T</code>。这个函数有一个参数，名为 <code>list</code>，它是一个 <code>T</code> 类型值的切片。函数 <code>largest</code> 将返回一个指向相同类型 <code>T</code> 值的引用。",
    "_note": ""
  },
  "If we compile this code right now, we’ll get this error:": {
    "_translate": "如果我们现在编译这段代码，我们会得到这个错误：",
    "_note": ""
  },
  "Listing 10-5 shows the combined largest function definition using the generic data type in its signature. The listing also shows how we can call the function with either a slice of i32 values or char values. Note that this code won’t compile yet, but we’ll fix it later in this chapter.": {
    "_translate": "列表 10-5 显示了使用泛型数据类型在其签名中的 <code>largest</code> 函数定义的组合。该列表还显示了我们如何可以使用 <code>i32</code> 值或 <code>char</code> 值的切片来调用该函数。请注意，此代码尚无法编译，但我们在本章后面会修复它。",
    "_note": ""
  },
  "In Struct Definitions": {
    "_translate": "<a class=\"header\" href=\"#in-struct-definitions\">在结构体定义中</a>",
    "_note": ""
  },
  "The help text mentions std::cmp::PartialOrd, which is a trait, and we’re going to talk about traits in the next section. For now, know that this error states that the body of largest won’t work for all possible types that T could be. Because we want to compare values of type T in the body, we can only use types whose values can be ordered. To enable comparisons, the standard library has the std::cmp::PartialOrd trait that you can implement on types (see Appendix C for more on this trait). By following the help text’s suggestion, we restrict the types valid for T to only those that implement PartialOrd and this example will compile, because the standard library implements PartialOrd on both i32 and char.": {
    "_translate": "帮助文本提到了 <code>std::cmp::PartialOrd</code>，这是一个 <em>特征</em>，我们将在下一节中讨论特征。目前，需要知道这个错误表明 <code>largest</code> 的主体不能适用于 <code>T</code> 可能是的所有可能类型。因为我们在主体中想要比较类型为 <code>T</code> 的值，所以我们只能使用可以排序的类型的值。为了启用比较，标准库提供了 <code>std::cmp::PartialOrd</code> 特征，你可以在类型上实现它（有关此特征的更多信息，请参阅附录 C）。通过遵循帮助文本的建议，我们将 <code>T</code> 有效的类型限制为仅实现 <code>PartialOrd</code> 的类型，这个示例将编译，因为标准库在 <code>i32</code> 和 <code>char</code> 上都实现了 <code>PartialOrd</code>。",
    "_note": ""
  },
  "We can also define structs to use a generic type parameter in one or more fields using the <> syntax. Listing 10-6 defines a Point<T> struct to hold x and y coordinate values of any type.": {
    "_translate": "我们还可以使用 <code>&lt;&gt;</code> 语法在结构体的一个或多个字段中定义泛型类型参数。列表 10-6 定义了一个 <code>Point&lt;T&gt;</code> 结构体来保存任何类型的 <code>x</code> 和 <code>y</code> 坐标值。",
    "_note": ""
  },
  "The syntax for using generics in struct definitions is similar to that used in function definitions. First we declare the name of the type parameter inside angle brackets just after the name of the struct. Then we use the generic type in the struct definition where we would otherwise specify concrete data types.": {
    "_translate": "在结构体定义中使用泛型的语法与在函数定义中使用的语法相似。首先我们在结构体名称后面的尖括号内声明类型参数的名称。然后我们在结构体定义中使用泛型类型，否则将指定具体的數據类型。",
    "_note": ""
  },
  "Note that because we’ve used only one generic type to define Point<T>, this definition says that the Point<T> struct is generic over some type T, and the fields x and y are both that same type, whatever that type may be. If we create an instance of a Point<T> that has values of different types, as in Listing 10-7, our code won’t compile.": {
    "_translate": "请注意，因为我们只使用了一种泛型类型来定义 <code>Point&lt;T&gt;</code>，这个定义说明 <code>Point&lt;T&gt;</code> 结构体是泛型的，对于某种类型 <code>T</code>，字段 <code>x</code> 和 <code>y</code> <em>都是</em> 同一种类型，无论该类型是什么。如果我们创建一个具有不同类型的值的 <code>Point&lt;T&gt;</code> 实例，如清单 10-7 所示，我们的代码将无法编译。",
    "_note": ""
  },
  "In this example, when we assign the integer value 5 to x, we let the compiler know that the generic type T will be an integer for this instance of Point<T>. Then when we specify 4.0 for y, which we’ve defined to have the same type as x, we’ll get a type mismatch error like this:": {
    "_translate": "在这个例子中，当我们把整数值<code>5</code>赋给<code>x</code>时，我们让编译器知道泛型类型<code>T</code>在这个<code>Point&lt;T&gt;</code>实例中将是整数。然后当我们为<code>y</code>指定<code>4.0</code>时，我们已经定义<code>y</code>具有与<code>x</code>相同的类型，这时我们会得到一个类型不匹配的错误，如下所示：",
    "_note": ""
  },
  "To define a Point struct where x and y are both generics but could have different types, we can use multiple generic type parameters. For example, in Listing 10-8, we change the definition of Point to be generic over types T and U where x is of type T and y is of type U.": {
    "_translate": "要定义一个 <code>Point</code> 结构体，其中 <code>x</code> 和 <code>y</code> 都是泛型但可以有不同的类型，我们可以使用多个泛型类型参数。例如，在列表 10-8 中，我们将 <code>Point</code> 的定义更改为对类型 <code>T</code> 和 <code>U</code> 泛型，其中 <code>x</code> 的类型为 <code>T</code>，<code>y</code> 的类型为 <code>U</code>。",
    "_note": ""
  },
  "Now all the instances of Point shown are allowed! You can use as many generic type parameters in a definition as you want, but using more than a few makes your code hard to read. If you’re finding you need lots of generic types in your code, it could indicate that your code needs restructuring into smaller pieces.": {
    "_translate": "现在所有显示的 <code>Point</code> 实例都是允许的！你可以在定义中使用任意数量的泛型类型参数，但使用过多会使代码难以阅读。如果你发现代码中需要大量泛型类型，这可能表明你的代码需要重构为更小的部分。",
    "_note": ""
  },
  "In Enum Definitions": {
    "_translate": "<a class=\"header\" href=\"#in-enum-definitions\">在枚举定义中</a>",
    "_note": ""
  },
  "As we did with structs, we can define enums to hold generic data types in their variants. Let’s take another look at the Option<T> enum that the standard library provides, which we used in Chapter 6:": {
    "_translate": "正如我们对结构体所做的那样，我们可以定义枚举来在其变体中持有泛型数据类型。让我们再来看看标准库提供的 <code>Option&lt;T&gt;</code> 枚举，我们在第 6 章中使用过：",
    "_note": ""
  },
  "Enums can use multiple generic types as well. The definition of the Result enum that we used in Chapter 9 is one example:": {
    "_translate": "枚举可以使用多个泛型类型。我们在第 9 章中使用的 <code>Result</code> 枚举定义就是一个例子：",
    "_note": ""
  },
  "This definition should now make more sense to you. As you can see, the Option<T> enum is generic over type T and has two variants: Some, which holds one value of type T, and a None variant that doesn’t hold any value. By using the Option<T> enum, we can express the abstract concept of an optional value, and because Option<T> is generic, we can use this abstraction no matter what the type of the optional value is.": {
    "_translate": "这个定义现在应该对你更有意义了。如你所见，<code>Option&lt;T&gt;</code> 枚举类型是泛型类型 <code>T</code> 的，并且有两个变体：<code>Some</code>，它持有一个类型为 <code>T</code> 的值，以及一个不持有任何值的 <code>None</code> 变体。通过使用 <code>Option&lt;T&gt;</code> 枚举，我们可以表达一个可选值的抽象概念，并且因为 <code>Option&lt;T&gt;</code> 是泛型的，无论可选值的类型是什么，我们都可以使用这种抽象。",
    "_note": ""
  },
  "When you recognize situations in your code with multiple struct or enum definitions that differ only in the types of the values they hold, you can avoid duplication by using generic types instead.": {
    "_translate": "当你在代码中识别出多个结构体或枚举定义，它们仅在所持有的值的类型上有所不同时，你可以通过使用泛型类型来避免重复。",
    "_note": ""
  },
  "In Method Definitions": {
    "_translate": "<a class=\"header\" href=\"#in-method-definitions\">在方法定义中</a>",
    "_note": ""
  },
  "We can implement methods on structs and enums (as we did in Chapter 5) and use generic types in their definitions too. Listing 10-9 shows the Point<T> struct we defined in Listing 10-6 with a method named x implemented on it.": {
    "_translate": "我们可以为结构体和枚举实现方法（如我们在第 5 章所做的），并在它们的定义中使用泛型类型。列表 10-9 显示了我们在列表 10-6 中定义的 <code>Point&lt;T&gt;</code> 结构体，并在其上实现了一个名为 <code>x</code> 的方法。",
    "_note": ""
  },
  "The Result enum is generic over two types, T and E, and has two variants: Ok, which holds a value of type T, and Err, which holds a value of type E. This definition makes it convenient to use the Result enum anywhere we have an operation that might succeed (return a value of some type T) or fail (return an error of some type E). In fact, this is what we used to open a file in Listing 9-3, where T was filled in with the type std::fs::File when the file was opened successfully and E was filled in with the type std::io::Error when there were problems opening the file.": {
    "_translate": "<code>Result</code> 枚举泛型化了两个类型，<code>T</code> 和 <code>E</code>，并且有两个变体：<code>Ok</code>，它持有一个类型为 <code>T</code> 的值，和 <code>Err</code>，它持有一个类型为 <code>E</code> 的值。这个定义使得在我们有某个操作可能成功（返回某个类型 <code>T</code> 的值）或失败（返回某个类型 <code>E</code> 的错误）时，使用 <code>Result</code> 枚举变得非常方便。实际上，我们在清单 9-3 中就是用它来打开文件的，其中当文件成功打开时，<code>T</code> 被填充为类型 <code>std::fs::File</code>，而当打开文件出现问题时，<code>E</code> 被填充为类型 <code>std::io::Error</code>。",
    "_note": ""
  },
  "Here, we’ve defined a method named x on Point<T> that returns a reference to the data in the field x.": {
    "_translate": "这里，我们定义了一个名为 <code>x</code> 的方法在 <code>Point&lt;T&gt;</code> 上，该方法返回 <code>x</code> 字段中数据的引用。",
    "_note": ""
  },
  "We can also specify constraints on generic types when defining methods on the type. We could, for example, implement methods only on Point<f32> instances rather than on Point<T> instances with any generic type. In Listing 10-10 we use the concrete type f32, meaning we don’t declare any types after impl.": {
    "_translate": "我们还可以在定义类型的方法时指定泛型类型的约束。例如，我们可以只为 <code>Point&lt;f32&gt;</code> 实例而不是任何泛型类型的 <code>Point&lt;T&gt;</code> 实例实现方法。在清单 10-10 中，我们使用了具体的类型 <code>f32</code>，这意味着我们在 <code>impl</code> 之后不声明任何类型。",
    "_note": ""
  },
  "Note that we have to declare T just after impl so we can use T to specify that we’re implementing methods on the type Point<T>. By declaring T as a generic type after impl, Rust can identify that the type in the angle brackets in Point is a generic type rather than a concrete type. We could have chosen a different name for this generic parameter than the generic parameter declared in the struct definition, but using the same name is conventional. Methods written within an impl that declares the generic type will be defined on any instance of the type, no matter what concrete type ends up substituting for the generic type.": {
    "_translate": "请注意，我们必须在 <code>impl</code> 之后声明 <code>T</code>，这样我们才能使用 <code>T</code> 来指定我们正在为类型 <code>Point&lt;T&gt;</code> 实现方法。通过在 <code>impl</code> 之后声明 <code>T</code> 为泛型类型，Rust 可以识别 <code>Point</code> 角括号中的类型是泛型类型而不是具体类型。我们可以选择与结构体定义中声明的泛型参数不同的名称，但使用相同的名称是惯例。在声明泛型类型的 <code>impl</code> 中编写的方法将定义在该类型的任何实例上，无论最终用什么具体类型替代泛型类型。",
    "_note": ""
  },
  "This code means the type Point<f32> will have a distance_from_origin method; other instances of Point<T> where T is not of type f32 will not have this method defined. The method measures how far our point is from the point at coordinates (0.0, 0.0) and uses mathematical operations that are available only for floating-point types.": {
    "_translate": "这段代码意味着类型<code>Point&lt;f32&gt;</code>将有一个<code>distance_from_origin</code>方法；其他<code>T</code>不是<code>f32</code>类型的<code>Point&lt;T&gt;</code>实例将不会定义此方法。该方法测量我们的点距离坐标(0.0, 0.0)的点有多远，并使用仅对浮点类型可用的数学运算。",
    "_note": ""
  },
  "Generic type parameters in a struct definition aren’t always the same as those you use in that same struct’s method signatures. Listing 10-11 uses the generic types X1 and Y1 for the Point struct and X2 Y2 for the mixup method signature to make the example clearer. The method creates a new Point instance with the x value from the self Point (of type X1) and the y value from the passed-in Point (of type Y2).": {
    "_translate": "在结构体定义中的泛型类型参数并不总是与该结构体方法签名中使用的相同。清单 10-11 使用泛型类型 <code>X1</code> 和 <code>Y1</code> 用于 <code>Point</code> 结构体，<code>X2</code> <code>Y2</code> 用于 <code>mixup</code> 方法签名，以使示例更清晰。该方法创建一个新的 <code>Point</code> 实例，使用来自 <code>self</code> <code>Point</code>（类型为 <code>X1</code>）的 <code>x</code> 值和来自传入的 <code>Point</code>（类型为 <code>Y2</code>）的 <code>y</code> 值。",
    "_note": ""
  },
  "The purpose of this example is to demonstrate a situation in which some generic parameters are declared with impl and some are declared with the method definition. Here, the generic parameters X1 and Y1 are declared after impl because they go with the struct definition. The generic parameters X2 and Y2 are declared after fn mixup because they’re only relevant to the method.": {
    "_translate": "此示例的目的是展示一种情况，其中一些泛型参数使用 <code>impl</code> 声明，而另一些则在方法定义中声明。在这里，泛型参数 <code>X1</code> 和 <code>Y1</code> 在 <code>impl</code> 之后声明，因为它们与结构体定义相关。泛型参数 <code>X2</code> 和 <code>Y2</code> 在 <code>fn mixup</code> 之后声明，因为它们仅与方法相关。",
    "_note": ""
  },
  "Performance of Code Using Generics": {
    "_translate": "<a class=\"header\" href=\"#performance-of-code-using-generics\">使用泛型的代码性能</a>",
    "_note": ""
  },
  "You might be wondering whether there is a runtime cost when using generic type parameters. The good news is that using generic types won’t make your program run any slower than it would with concrete types.": {
    "_translate": "你可能会想知道使用泛型类型参数是否会有运行时成本。好消息是，使用泛型类型不会让你的程序运行得比使用具体类型时更慢。",
    "_note": ""
  },
  "In main, we’ve defined a Point that has an i32 for x (with value 5) and an f64 for y (with value 10.4). The p2 variable is a Point struct that has a string slice for x (with value \"Hello\") and a char for y (with value c). Calling mixup on p1 with the argument p2 gives us p3, which will have an i32 for x because x came from p1. The p3 variable will have a char for y because y came from p2. The println! macro call will print p3.x = 5, p3.y = c.": {
    "_translate": "在 <code>main</code> 中，我们定义了一个 <code>Point</code>，它有一个 <code>i32</code> 类型的 <code>x</code>（值为 <code>5</code>）\n和一个 <code>f64</code> 类型的 <code>y</code>（值为 <code>10.4</code>）。变量 <code>p2</code> 是一个 <code>Point</code> 结构体，\n它有一个字符串切片类型的 <code>x</code>（值为 <code>\"Hello\"</code>）和一个 <code>char</code> 类型的 <code>y</code>\n（值为 <code>c</code>）。在 <code>p1</code> 上调用 <code>mixup</code> 并传入参数 <code>p2</code> 会给我们 <code>p3</code>，\n它将有一个 <code>i32</code> 类型的 <code>x</code>，因为 <code>x</code> 来自 <code>p1</code>。变量 <code>p3</code>\n将有一个 <code>char</code> 类型的 <code>y</code>，因为 <code>y</code> 来自 <code>p2</code>。<code>println!</code> 宏\n调用将打印 <code>p3.x = 5, p3.y = c</code>。",
    "_note": ""
  },
  "Let’s look at how this works by using the standard library’s generic Option<T> enum:": {
    "_translate": "让我们通过使用标准库的泛型<code>Option&lt;T&gt;</code>枚举来看看这是如何工作的：",
    "_note": ""
  },
  "Rust accomplishes this by performing monomorphization of the code using generics at compile time. Monomorphization is the process of turning generic code into specific code by filling in the concrete types that are used when compiled. In this process, the compiler does the opposite of the steps we used to create the generic function in Listing 10-5: the compiler looks at all the places where generic code is called and generates code for the concrete types the generic code is called with.": {
    "_translate": "Rust 通过在编译时使用泛型对代码进行单态化来实现这一点。 <em>单态化</em> 是将泛型代码转换为具体代码的过程，通过填充编译时使用的具体类型来完成。在这个过程中，编译器所做的与我们在列表 10-5 中创建泛型函数的步骤相反：编译器查看所有调用泛型代码的地方，并为调用泛型代码的具体类型生成代码。",
    "_note": ""
  },
  "The monomorphized version of the code looks similar to the following (the compiler uses different names than what we’re using here for illustration):": {
    "_translate": "单态化版本的代码看起来类似于以下内容（编译器使用的名称与我们这里用于说明的名称不同）：",
    "_note": ""
  },
  "When Rust compiles this code, it performs monomorphization. During that process, the compiler reads the values that have been used in Option<T> instances and identifies two kinds of Option<T>: one is i32 and the other is f64. As such, it expands the generic definition of Option<T> into two definitions specialized to i32 and f64, thereby replacing the generic definition with the specific ones.": {
    "_translate": "当 Rust 编译这段代码时，它会执行单态化。在这个过程中，编译器读取在 <code>Option&lt;T&gt;</code> 实例中使用过的值，并识别出两种 <code>Option&lt;T&gt;</code>：一种是 <code>i32</code>，另一种是 <code>f64</code>。因此，它将 <code>Option&lt;T&gt;</code> 的泛型定义扩展为两个专门针对 <code>i32</code> 和 <code>f64</code> 的定义，从而用具体的定义替换了泛型定义。",
    "_note": ""
  },
  "The generic Option<T> is replaced with the specific definitions created by the compiler. Because Rust compiles generic code into code that specifies the type in each instance, we pay no runtime cost for using generics. When the code runs, it performs just as it would if we had duplicated each definition by hand. The process of monomorphization makes Rust’s generics extremely efficient at runtime.": {
    "_translate": "通用的 <code>Option&lt;T&gt;</code> 被编译器创建的具体定义所替换。因为 Rust 会将泛型代码编译成每个实例都指定类型的代码，所以我们使用泛型时不会产生运行时开销。当代码运行时，它的表现就像我们手动复制了每个定义一样。单态化的过程使得 Rust 的泛型在运行时极其高效。",
    "_note": ""
  },
  "Generic Data Types - The Rust Programming Language": {
    "_translate": "泛型数据类型 - 《Rust 编程语言》",
    "_note": ""
  },
  "Note that we have to declare T just after impl so we can use T to specify that we’re implementing methods on the type Point<T>. By declaring T as a generic type after impl, Rust can identify that the type in the angle brackets in Point is a generic type rather than a concrete type. We could have chosen a different name for this generic parameter than the generic parameter declared in the struct definition, but using the same name is conventional. If you write a method within an impl that declares a generic type, that method will be defined on any instance of the type, no matter what concrete type ends up substituting for the generic type.": {
    "_translate": "请注意，我们必须在 <code>impl</code> 之后声明 <code>T</code>，这样我们才能使用 <code>T</code> 来指定我们正在为类型 <code>Point&lt;T&gt;</code> 实现方法。通过在 <code>impl</code> 之后声明 <code>T</code> 为泛型类型，Rust 可以识别 <code>Point</code> 角括号中的类型是泛型类型而不是具体类型。我们可以选择与结构体定义中声明的泛型参数不同的名称，但使用相同的名称是惯例。如果你在一个声明了泛型类型的 <code>impl</code> 中编写方法，那么该方法将定义在该类型的任何实例上，无论最终用什么具体类型替代泛型类型。",
    "_note": ""
  }
}