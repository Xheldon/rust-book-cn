{
  "Validating References with Lifetimes": {
    "_translate": "<a class=\"header\" href=\"#validating-references-with-lifetimes\">使用生命周期验证引用</a>",
    "_note": ""
  },
  "Lifetimes are another kind of generic that we’ve already been using. Rather than ensuring that a type has the behavior we want, lifetimes ensure that references are valid as long as we need them to be.": {
    "_translate": "生命周期是另一种我们已经使用的泛型。与其确保类型具有我们想要的行为，生命周期确保引用在我们需要的时间内一直有效。",
    "_note": ""
  },
  "Annotating lifetimes is not a concept most other programming languages have, so this is going to feel unfamiliar. Although we won’t cover lifetimes in their entirety in this chapter, we’ll discuss common ways you might encounter lifetime syntax so you can get comfortable with the concept.": {
    "_translate": "标注生命周期不是大多数其他编程语言所具有的概念，所以这会让你感到不熟悉。虽然我们不会在本章中完全覆盖生命周期，但我们会讨论你可能会遇到的生命周期语法的常见方式，以便你能够熟悉这个概念。",
    "_note": ""
  },
  "Preventing Dangling References with Lifetimes": {
    "_translate": "<a class=\"header\" href=\"#preventing-dangling-references-with-lifetimes\">使用生命周期防止悬垂引用</a>",
    "_note": ""
  },
  "The main aim of lifetimes is to prevent dangling references, which cause a program to reference data other than the data it’s intended to reference. Consider the program in Listing 10-16, which has an outer scope and an inner scope.": {
    "_translate": "生命周期的主要目的是防止<em>悬垂引用</em>，这会导致程序引用非预期的数据。考虑列表10-16中的程序，该程序具有一个外部作用域和一个内部作用域。",
    "_note": ""
  },
  "One detail we didn’t discuss in the “References and Borrowing” section in Chapter 4 is that every reference in Rust has a lifetime, which is the scope for which that reference is valid. Most of the time, lifetimes are implicit and inferred, just like most of the time, types are inferred. We must annotate types only when multiple types are possible. In a similar way, we must annotate lifetimes when the lifetimes of references could be related in a few different ways. Rust requires us to annotate the relationships using generic lifetime parameters to ensure the actual references used at runtime will definitely be valid.": {
    "_translate": "在第 4 章的 <a href=\"ch04-02-references-and-borrowing.html#references-and-borrowing\">“引用和借用”</a><!-- ignore --> 部分中，我们没有讨论的一个细节是，Rust 中的每个引用都有一个 <em>生命周期</em>，即该引用有效的范围。大多数时候，生命周期是隐式的并且可以推断出来的，就像大多数时候类型可以推断出来一样。只有当存在多种可能的类型时，我们才需要注解类型。同样地，当引用的生命周期可能以几种不同的方式相关时，我们也必须注解生命周期。Rust 要求我们使用泛型生命周期参数注解这些关系，以确保在运行时实际使用的引用肯定有效。",
    "_note": ""
  },
  "Note: The examples in Listing 10-16, 10-17, and 10-23 declare variables without giving them an initial value, so the variable name exists in the outer scope. At first glance, this might appear to be in conflict with Rust’s having no null values. However, if we try to use a variable before giving it a value, we’ll get a compile-time error, which shows that Rust indeed does not allow null values.": {
    "_translate": "注意：清单 10-16、10-17 和 10-23 中的示例声明变量时没有赋予初始值，因此变量名存在于外部作用域中。乍一看，这似乎与 Rust 没有空值相矛盾。然而，如果我们尝试在赋予变量值之前使用它，我们将得到一个编译时错误，这表明 Rust 确实不允许空值。",
    "_note": ""
  },
  "The outer scope declares a variable named r with no initial value, and the inner scope declares a variable named x with the initial value of 5. Inside the inner scope, we attempt to set the value of r as a reference to x. Then the inner scope ends, and we attempt to print the value in r. This code won’t compile because the value that r is referring to has gone out of scope before we try to use it. Here is the error message:": {
    "_translate": "外部作用域声明了一个名为<code>r</code>的变量，没有初始值，而内部作用域声明了一个名为<code>x</code>的变量，初始值为<code>5</code>。在内部作用域中，我们尝试将<code>r</code>的值设置为<code>x</code>的引用。然后内部作用域结束，我们尝试打印<code>r</code>中的值。这段代码无法编译，因为在我们尝试使用<code>r</code>之前，它所引用的值已经超出了作用域。这是错误信息：",
    "_note": ""
  },
  "The Borrow Checker": {
    "_translate": "<a class=\"header\" href=\"#the-borrow-checker\">借用检查器</a>",
    "_note": ""
  },
  "The error message says that the variable x “does not live long enough.” The reason is that x will be out of scope when the inner scope ends on line 7. But r is still valid for the outer scope; because its scope is larger, we say that it “lives longer.” If Rust allowed this code to work, r would be referencing memory that was deallocated when x went out of scope, and anything we tried to do with r wouldn’t work correctly. So how does Rust determine that this code is invalid? It uses a borrow checker.": {
    "_translate": "错误消息说变量 <code>x</code> “生命周期不够长。” 原因是 <code>x</code> 在第 7 行内部作用域结束时将超出作用域。 但 <code>r</code> 对于外部作用域仍然是有效的；因为它的作用域更大，我们说它 “生命周期更长。” 如果 Rust 允许这段代码运行，<code>r</code> 将会引用 <code>x</code> 超出作用域时被释放的内存，而我们尝试使用 <code>r</code> 做的任何事情都不会正确工作。那么 Rust 是如何确定这段代码是无效的？它使用了一个借用检查器。",
    "_note": ""
  },
  "The Rust compiler has a borrow checker that compares scopes to determine whether all borrows are valid. Listing 10-17 shows the same code as Listing 10-16 but with annotations showing the lifetimes of the variables.": {
    "_translate": "Rust 编译器有一个 <em>借用检查器</em>，它通过比较作用域来确定所有借用是否有效。列表 10-17 显示了与列表 10-16 相同的代码，但带有注释显示变量的生命周期。",
    "_note": ""
  },
  "Listing 10-18 fixes the code so it doesn’t have a dangling reference and it compiles without any errors.": {
    "_translate": "列表 10-18 修复了代码，使其没有悬垂引用，并且可以编译而不会出现任何错误。",
    "_note": ""
  },
  "Here, we’ve annotated the lifetime of r with 'a and the lifetime of x with 'b. As you can see, the inner 'b block is much smaller than the outer 'a lifetime block. At compile time, Rust compares the size of the two lifetimes and sees that r has a lifetime of 'a but that it refers to memory with a lifetime of 'b. The program is rejected because 'b is shorter than 'a: the subject of the reference doesn’t live as long as the reference.": {
    "_translate": "这里，我们用<code>'a</code>注解了<code>r</code>的生命周期，用<code>'b</code>注解了<code>x</code>的生命周期。如你所见，内部的<code>'b</code>块比外部的<code>'a</code>生命周期块小得多。在编译时，Rust会比较两个生命周期的大小，并发现<code>r</code>的生命周期为<code>'a</code>，但它引用的内存的生命周期为<code>'b</code>。程序被拒绝是因为<code>'b</code>比<code>'a</code>短：引用的主题没有引用的生命周期长。",
    "_note": ""
  },
  "Here, x has the lifetime 'b, which in this case is larger than 'a. This means r can reference x because Rust knows that the reference in r will always be valid while x is valid.": {
    "_translate": "这里，<code>x</code> 拥有生命周期 <code>'b</code>，在这个例子中，<code>'b</code> 比 <code>'a</code> 更长。这意味着 <code>r</code> 可以引用 <code>x</code>，因为 Rust 知道 <code>r</code> 中的引用在 <code>x</code> 有效时总是有效的。",
    "_note": ""
  },
  "Generic Lifetimes in Functions": {
    "_translate": "<a class=\"header\" href=\"#generic-lifetimes-in-functions\">函数中的泛型生命周期</a>",
    "_note": ""
  },
  "Now that you know what the lifetimes of references are and how Rust analyzes lifetimes to ensure references will always be valid, let’s explore generic lifetimes of parameters and return values in the context of functions.": {
    "_translate": "现在您已经了解了引用的生命周期以及 Rust 如何分析生命周期以确保引用始终有效，让我们探讨一下在函数上下文中参数和返回值的泛型生命周期。",
    "_note": ""
  },
  "We’ll write a function that returns the longer of two string slices. This function will take two string slices and return a single string slice. After we’ve implemented the longest function, the code in Listing 10-19 should print The longest string is abcd.": {
    "_translate": "我们将编写一个返回两个字符串切片中较长的那个的函数。这个函数将接受两个字符串切片并返回一个字符串切片。在我们实现了<code>longest</code>函数之后，清单10-19中的代码应该打印<code>The longest string is abcd</code>。",
    "_note": ""
  },
  "If we try to implement the longest function as shown in Listing 10-20, it won’t compile.": {
    "_translate": "如果我们尝试按照清单 10-20 中所示实现 <code>longest</code> 函数，它将无法编译。",
    "_note": ""
  },
  "Note that we want the function to take string slices, which are references, rather than strings, because we don’t want the longest function to take ownership of its parameters. Refer to the “String Slices as Parameters” section in Chapter 4 for more discussion about why the parameters we use in Listing 10-19 are the ones we want.": {
    "_translate": "请注意，我们希望该函数接受字符串切片，它们是引用，而不是字符串，因为我们不希望<code>longest</code>函数获取其参数的所有权。有关为什么我们在示例10-19中使用这些参数的更多讨论，请参阅第4章的<a href=\"ch04-03-slices.html#string-slices-as-parameters\">“字符串切片作为参数”</a><!-- ignore -->部分。",
    "_note": ""
  },
  "Instead, we get the following error that talks about lifetimes:": {
    "_translate": "相反，我们得到了以下关于生命周期的错误：<code>Instead, we get the following error that talks about lifetimes:</code>",
    "_note": ""
  },
  "The help text reveals that the return type needs a generic lifetime parameter on it because Rust can’t tell whether the reference being returned refers to x or y. Actually, we don’t know either, because the if block in the body of this function returns a reference to x and the else block returns a reference to y!": {
    "_translate": "帮助文本揭示了返回类型需要一个泛型生命周期参数，因为 Rust 无法判断返回的引用是指向 <code>x</code> 还是 <code>y</code>。实际上，我们也不知道，因为这个函数体中的 <code>if</code> 块返回一个指向 <code>x</code> 的引用，而 <code>else</code> 块返回一个指向 <code>y</code> 的引用！",
    "_note": ""
  },
  "Lifetime Annotation Syntax": {
    "_translate": "<a class=\"header\" href=\"#lifetime-annotation-syntax\">生命周期注解语法</a>",
    "_note": ""
  },
  "When we’re defining this function, we don’t know the concrete values that will be passed into this function, so we don’t know whether the if case or the else case will execute. We also don’t know the concrete lifetimes of the references that will be passed in, so we can’t look at the scopes as we did in Listings 10-17 and 10-18 to determine whether the reference we return will always be valid. The borrow checker can’t determine this either, because it doesn’t know how the lifetimes of x and y relate to the lifetime of the return value. To fix this error, we’ll add generic lifetime parameters that define the relationship between the references so the borrow checker can perform its analysis.": {
    "_translate": "当我们定义这个函数时，我们不知道将传递给此函数的具体值，因此我们不知道<code>if</code>分支还是<code>else</code>分支会执行。我们也不知道将传递的引用的具体生命周期，因此我们不能像在清单10-17和10-18中那样查看作用域来确定我们返回的引用是否总是有效的。借用检查器也无法确定这一点，因为它不知道<code>x</code>和<code>y</code>的生命周期与返回值的生命周期之间的关系。为了解决这个错误，我们将添加泛型生命周期参数，以定义引用之间的关系，从而使借用检查器能够执行其分析。",
    "_note": ""
  },
  "Lifetime annotations don’t change how long any of the references live. Rather, they describe the relationships of the lifetimes of multiple references to each other without affecting the lifetimes. Just as functions can accept any type when the signature specifies a generic type parameter, functions can accept references with any lifetime by specifying a generic lifetime parameter.": {
    "_translate": "生命周期注解不会改变任何引用的生命周期长度。相反，<br>它们描述了多个引用的生命周期之间的关系，而不影响生命周期。<br>就像函数在签名中指定了泛型类型参数时可以接受任何类型一样，<br>函数可以通过指定泛型生命周期参数来接受任何生命周期的引用。",
    "_note": ""
  },
  "Lifetime annotations have a slightly unusual syntax: the names of lifetime parameters must start with an apostrophe (') and are usually all lowercase and very short, like generic types. Most people use the name 'a for the first lifetime annotation. We place lifetime parameter annotations after the & of a reference, using a space to separate the annotation from the reference’s type.": {
    "_translate": "生命周期注解的语法稍微有些不同：生命周期参数的名称必须以撇号 (<code>'</code>) 开头，并且通常全部小写且非常短，类似于泛型类型。大多数人使用 <code>'a</code> 作为第一个生命周期注解的名称。我们在引用的 <code>&amp;</code> 之后放置生命周期参数注解，使用空格将注解与引用的类型分开。",
    "_note": ""
  },
  "Here are some examples: a reference to an i32 without a lifetime parameter, a reference to an i32 that has a lifetime parameter named 'a, and a mutable reference to an i32 that also has the lifetime 'a.": {
    "_translate": "这里有一些例子：一个没有生命周期参数的 <code>i32</code> 的引用，一个具有名为 <code>'a</code> 的生命周期参数的 <code>i32</code> 的引用，以及一个具有生命周期 <code>'a</code> 的 <code>i32</code> 的可变引用。",
    "_note": ""
  },
  "One lifetime annotation by itself doesn’t have much meaning because the annotations are meant to tell Rust how generic lifetime parameters of multiple references relate to each other. Let’s examine how the lifetime annotations relate to each other in the context of the longest function.": {
    "_translate": "一个生命周期注解本身并没有太多意义，因为这些注解的目的是告诉 Rust 多个引用的泛型生命周期参数是如何相互关联的。让我们 examine 如何在 <code>longest</code> 函数的上下文中理解生命周期注解之间的关系。",
    "_note": ""
  },
  "Lifetime Annotations in Function Signatures": {
    "_translate": "<a class=\"header\" href=\"#lifetime-annotations-in-function-signatures\">函数签名中的生命周期注解</a>",
    "_note": ""
  },
  "To use lifetime annotations in function signatures, we need to declare the generic lifetime parameters inside angle brackets between the function name and the parameter list, just as we did with generic type parameters.": {
    "_translate": "要在函数签名中使用生命周期注解，我们需要在函数名称和参数列表之间的尖括号内声明泛型 <em>生命周期</em> 参数，就像我们对泛型 <em>类型</em> 参数所做的那样。",
    "_note": ""
  },
  "This code should compile and produce the result we want when we use it with the main function in Listing 10-19.": {
    "_translate": "这段代码应该能够编译，并在我们使用它与清单 10-19 中的 <code>main</code> 函数时产生我们想要的结果。",
    "_note": ""
  },
  "The function signature now tells Rust that for some lifetime 'a, the function takes two parameters, both of which are string slices that live at least as long as lifetime 'a. The function signature also tells Rust that the string slice returned from the function will live at least as long as lifetime 'a. In practice, it means that the lifetime of the reference returned by the longest function is the same as the smaller of the lifetimes of the values referred to by the function arguments. These relationships are what we want Rust to use when analyzing this code.": {
    "_translate": "函数签名现在告诉 Rust，对于某个生命周期 <code>'a</code>，该函数接受两个参数，这两个参数都是字符串切片，它们的生命周期至少与生命周期 <code>'a</code> 一样长。函数签名还告诉 Rust，从函数返回的字符串切片的生命周期至少与生命周期 <code>'a</code> 一样长。实际上，这意味着 <code>longest</code> 函数返回的引用的生命周期与函数参数所引用的值的较小生命周期相同。这些关系就是我们希望 Rust 在分析此代码时使用的关系。",
    "_note": ""
  },
  "We want the signature to express the following constraint: the returned reference will be valid as long as both the parameters are valid. This is the relationship between lifetimes of the parameters and the return value. We’ll name the lifetime 'a and then add it to each reference, as shown in Listing 10-21.": {
    "_translate": "我们希望签名表达以下约束：返回的引用将在两个参数都有效的情况下有效。这是参数和返回值的生命周期之间的关系。我们将生命周期命名为<code>'a</code>，然后将其添加到每个引用中，如清单10-21所示。",
    "_note": ""
  },
  "Remember, when we specify the lifetime parameters in this function signature, we’re not changing the lifetimes of any values passed in or returned. Rather, we’re specifying that the borrow checker should reject any values that don’t adhere to these constraints. Note that the longest function doesn’t need to know exactly how long x and y will live, only that some scope can be substituted for 'a that will satisfy this signature.": {
    "_translate": "记住，当我们在这个函数签名中指定生命周期参数时，我们并没有改变任何传入或返回值的生命周期。相反，我们是指定借用检查器应该拒绝任何不符合这些约束的值。请注意，<code>longest</code> 函数不需要确切知道 <code>x</code> 和 <code>y</code> 将会存活多久，只需要某个作用域可以替代 <code>'a</code> 以满足此签名。",
    "_note": ""
  },
  "When annotating lifetimes in functions, the annotations go in the function signature, not in the function body. The lifetime annotations become part of the contract of the function, much like the types in the signature. Having function signatures contain the lifetime contract means the analysis the Rust compiler does can be simpler. If there’s a problem with the way a function is annotated or the way it is called, the compiler errors can point to the part of our code and the constraints more precisely. If, instead, the Rust compiler made more inferences about what we intended the relationships of the lifetimes to be, the compiler might only be able to point to a use of our code many steps away from the cause of the problem.": {
    "_translate": "在函数中注解生命周期时，注解位于函数签名中，而不是函数体中。生命周期注解成为函数契约的一部分，就像签名中的类型一样。函数签名包含生命周期契约意味着 Rust 编译器可以进行更简单的分析。如果函数的注解方式或调用方式存在问题，编译器错误可以更精确地指向我们代码的某部分及其约束。相反，如果 Rust 编译器对生命周期关系进行更多推断，编译器可能只能指向我们代码的使用位置，而这些位置可能离问题的根源很远。",
    "_note": ""
  },
  "Let’s look at how the lifetime annotations restrict the longest function by passing in references that have different concrete lifetimes. Listing 10-22 is a straightforward example.": {
    "_translate": "让我们看看生命周期注解如何通过传递具有不同具体生命周期的引用限制 <code>longest</code> 函数。列表 10-22 是一个简单的例子。",
    "_note": ""
  },
  "When we pass concrete references to longest, the concrete lifetime that is substituted for 'a is the part of the scope of x that overlaps with the scope of y. In other words, the generic lifetime 'a will get the concrete lifetime that is equal to the smaller of the lifetimes of x and y. Because we’ve annotated the returned reference with the same lifetime parameter 'a, the returned reference will also be valid for the length of the smaller of the lifetimes of x and y.": {
    "_translate": "当我们传递具体的引用给<code>longest</code>时，被替代的具体生命周期<code>'a</code>是<code>x</code>的作用域与<code>y</code>的作用域重叠的部分。换句话说，泛型生命周期<code>'a</code>将获得等于<code>x</code>和<code>y</code>生命周期中较短的那个具体生命周期。因为我们已经用相同的生命周期参数<code>'a</code>注解了返回的引用，所以返回的引用也将有效，其有效期为<code>x</code>和<code>y</code>生命周期中较短的那个的长度。",
    "_note": ""
  },
  "In this example, string1 is valid until the end of the outer scope, string2 is valid until the end of the inner scope, and result references something that is valid until the end of the inner scope. Run this code and you’ll see that the borrow checker approves; it will compile and print The longest string is long string is long.": {
    "_translate": "在这个例子中，<code>string1</code> 在外部作用域结束前都是有效的，<code>string2</code>\n在内部作用域结束前都是有效的，而 <code>result</code> 引用的内容在内部作用域结束前都是有效的。运行这段代码，你会看到借用检查器批准了；它将编译并打印 <code>The longest string is long string is long</code>。",
    "_note": ""
  },
  "When we try to compile this code, we get this error:": {
    "_translate": "当我们尝试编译这段代码时，我们得到了这个错误：",
    "_note": ""
  },
  "Next, let’s try an example that shows that the lifetime of the reference in result must be the smaller lifetime of the two arguments. We’ll move the declaration of the result variable outside the inner scope but leave the assignment of the value to the result variable inside the scope with string2. Then we’ll move the println! that uses result to outside the inner scope, after the inner scope has ended. The code in Listing 10-23 will not compile.": {
    "_translate": "接下来，让我们尝试一个示例，该示例显示 <code>result</code> 中引用的生命周期必须是两个参数中较短的生命周期。我们将 <code>result</code> 变量的声明移到内部作用域之外，但将 <code>result</code> 变量的值赋值保留在与 <code>string2</code> 相同的作用域内。然后我们将使用 <code>result</code> 的 <code>println!</code> 移到内部作用域之外，在内部作用域结束之后。列表 10-23 中的代码将无法编译。",
    "_note": ""
  },
  "The error shows that for result to be valid for the println! statement, string2 would need to be valid until the end of the outer scope. Rust knows this because we annotated the lifetimes of the function parameters and return values using the same lifetime parameter 'a.": {
    "_translate": "错误显示，为了使 <code>result</code> 在 <code>println!</code> 语句中有效，<code>string2</code> 需要一直有效到外部作用域的结束。Rust 知道这一点，是因为我们使用相同的生命周期参数 <code>'a</code> 注解了函数参数和返回值的生命周期。",
    "_note": ""
  },
  "Try designing more experiments that vary the values and lifetimes of the references passed in to the longest function and how the returned reference is used. Make hypotheses about whether or not your experiments will pass the borrow checker before you compile; then check to see if you’re right!": {
    "_translate": "尝试设计更多的实验，改变传递给<code>longest</code>函数的引用的值和生命周期，以及返回的引用如何使用。在编译之前，先对你的实验是否能通过借用检查器做出假设；然后检查你是否正确！",
    "_note": ""
  },
  "Thinking in Terms of Lifetimes": {
    "_translate": "<a class=\"header\" href=\"#thinking-in-terms-of-lifetimes\">从生命周期的角度思考</a>",
    "_note": ""
  },
  "As humans, we can look at this code and see that string1 is longer than string2, and therefore, result will contain a reference to string1. Because string1 has not gone out of scope yet, a reference to string1 will still be valid for the println! statement. However, the compiler can’t see that the reference is valid in this case. We’ve told Rust that the lifetime of the reference returned by the longest function is the same as the smaller of the lifetimes of the references passed in. Therefore, the borrow checker disallows the code in Listing 10-23 as possibly having an invalid reference.": {
    "_translate": "作为人类，我们可以看到这段代码中的<code>string1</code>比<code>string2</code>长，因此<code>result</code>将包含对<code>string1</code>的引用。因为<code>string1</code>还没有超出作用域，所以对<code>string1</code>的引用在<code>println!</code>语句中仍然有效。然而，编译器无法看到这个引用在此情况下是有效的。我们告诉Rust，由<code>longest</code>函数返回的引用的生命周期与传入的引用中较短的那个相同。因此，借用检查器不允许列表10-23中的代码，因为它可能包含无效的引用。",
    "_note": ""
  },
  "The way in which you need to specify lifetime parameters depends on what your function is doing. For example, if we changed the implementation of the longest function to always return the first parameter rather than the longest string slice, we wouldn’t need to specify a lifetime on the y parameter. The following code will compile:": {
    "_translate": "你需要指定生命周期参数的方式取决于你的函数在做什么。例如，如果我们改变了<code>longest</code>函数的实现，使其总是返回第一个参数而不是最长的字符串切片，那么我们就不需要在<code>y</code>参数上指定生命周期。以下代码将编译：",
    "_note": ""
  },
  "When returning a reference from a function, the lifetime parameter for the return type needs to match the lifetime parameter for one of the parameters. If the reference returned does not refer to one of the parameters, it must refer to a value created within this function. However, this would be a dangling reference because the value will go out of scope at the end of the function. Consider this attempted implementation of the longest function that won’t compile:": {
    "_translate": "当从函数返回引用时，返回类型的生命周期参数需要与其中一个参数的生命周期参数匹配。如果返回的引用不指向其中一个参数，那么它必须指向在此函数中创建的值。然而，这将是一个悬垂引用，因为该值将在函数结束时超出作用域。考虑这个无法编译的<code>longest</code>函数的实现尝试：",
    "_note": ""
  },
  "We’ve specified a lifetime parameter 'a for the parameter x and the return type, but not for the parameter y, because the lifetime of y does not have any relationship with the lifetime of x or the return value.": {
    "_translate": "我们为参数 <code>x</code> 和返回类型指定了生命周期参数 <code>'a</code>，但没有为参数 <code>y</code> 指定，因为 <code>y</code> 的生命周期与 <code>x</code> 的生命周期或返回值的生命周期没有关系。",
    "_note": ""
  },
  "Here, even though we’ve specified a lifetime parameter 'a for the return type, this implementation will fail to compile because the return value lifetime is not related to the lifetime of the parameters at all. Here is the error message we get:": {
    "_translate": "这里，即使我们为返回类型指定了生命周期参数<code>'a</code>，此实现也会因为返回值的生命周期与参数的生命周期完全无关而无法编译。这是我们得到的错误信息：",
    "_note": ""
  },
  "The problem is that result goes out of scope and gets cleaned up at the end of the longest function. We’re also trying to return a reference to result from the function. There is no way we can specify lifetime parameters that would change the dangling reference, and Rust won’t let us create a dangling reference. In this case, the best fix would be to return an owned data type rather than a reference so the calling function is then responsible for cleaning up the value.": {
    "_translate": "问题在于 <code>result</code> 在 <code>longest</code> 函数结束时超出作用域并被清理。我们还试图从函数中返回对 <code>result</code> 的引用。没有办法指定生命周期参数来改变悬垂引用，Rust 也不会让我们创建悬垂引用。在这种情况下，最好的解决方法是返回一个拥有数据类型而不是引用，这样调用函数就负责清理该值。",
    "_note": ""
  },
  "Ultimately, lifetime syntax is about connecting the lifetimes of various parameters and return values of functions. Once they’re connected, Rust has enough information to allow memory-safe operations and disallow operations that would create dangling pointers or otherwise violate memory safety.": {
    "_translate": "最终，生命周期语法是关于连接函数的各种参数和返回值的生命周期。一旦它们被连接起来，Rust 就有足够的信息来允许内存安全的操作，并禁止可能创建悬空指针或以其他方式违反内存安全的操作。",
    "_note": ""
  },
  "Lifetime Annotations in Struct Definitions": {
    "_translate": "<a class=\"header\" href=\"#lifetime-annotations-in-struct-definitions\">结构体定义中的生命周期注解</a>",
    "_note": ""
  },
  "So far, the structs we’ve defined all hold owned types. We can define structs to hold references, but in that case we would need to add a lifetime annotation on every reference in the struct’s definition. Listing 10-24 has a struct named ImportantExcerpt that holds a string slice.": {
    "_translate": "到目前为止，我们定义的所有结构体都持有所有权类型。我们可以定义持有引用的结构体，但这种情况下我们需要在结构体定义中的每个引用上添加生命周期注解。清单 10-24 有一个名为 <code>ImportantExcerpt</code> 的结构体，它持有一个字符串切片。",
    "_note": ""
  },
  "This struct has the single field part that holds a string slice, which is a reference. As with generic data types, we declare the name of the generic lifetime parameter inside angle brackets after the name of the struct so we can use the lifetime parameter in the body of the struct definition. This annotation means an instance of ImportantExcerpt can’t outlive the reference it holds in its part field.": {
    "_translate": "这个结构体有一个名为 <code>part</code> 的字段，它持有一个字符串切片，即一个引用。与泛型数据类型一样，我们在结构体名称后的尖括号内声明泛型生命周期参数的名称，这样我们就可以在结构体定义的主体中使用生命周期参数。这个注解意味着 <code>ImportantExcerpt</code> 的实例不能比其 <code>part</code> 字段中持有的引用活得更久。",
    "_note": ""
  },
  "Lifetime Elision": {
    "_translate": "<a class=\"header\" href=\"#lifetime-elision\">生命周期省略</a>",
    "_note": ""
  },
  "The main function here creates an instance of the ImportantExcerpt struct that holds a reference to the first sentence of the String owned by the variable novel. The data in novel exists before the ImportantExcerpt instance is created. In addition, novel doesn’t go out of scope until after the ImportantExcerpt goes out of scope, so the reference in the ImportantExcerpt instance is valid.": {
    "_translate": "<code>main</code> 函数在这里创建了一个 <code>ImportantExcerpt</code> 结构体的实例，该实例持有变量 <code>novel</code> 所拥有的 <code>String</code> 的第一句话的引用。在创建 <code>ImportantExcerpt</code> 实例之前，<code>novel</code> 中的数据就已经存在。此外，<code>novel</code> 一直存在到 <code>ImportantExcerpt</code> 实例超出作用域之后，因此 <code>ImportantExcerpt</code> 实例中的引用是有效的。",
    "_note": ""
  },
  "You’ve learned that every reference has a lifetime and that you need to specify lifetime parameters for functions or structs that use references. However, we had a function in Listing 4-9, shown again in Listing 10-25, that compiled without lifetime annotations.": {
    "_translate": "您已经了解到每个引用都有一个生命周期，并且对于使用引用的函数或结构体，您需要指定生命周期参数。然而，我们在第 4 章的列表 4-9 中有一个函数，再次显示在列表 10-25 中，该函数在没有生命周期注解的情况下编译成功。",
    "_note": ""
  },
  "The reason this function compiles without lifetime annotations is historical: in early versions (pre-1.0) of Rust, this code wouldn’t have compiled because every reference needed an explicit lifetime. At that time, the function signature would have been written like this:": {
    "_translate": "这个函数之所以能在没有生命周期注解的情况下编译，是因为历史原因：\n在 Rust 的早期版本（1.0 之前），这段代码是无法编译的，因为\n每个引用都需要一个显式的生命周期。在那个时期，函数签名会这样写：",
    "_note": ""
  },
  "After writing a lot of Rust code, the Rust team found that Rust programmers were entering the same lifetime annotations over and over in particular situations. These situations were predictable and followed a few deterministic patterns. The developers programmed these patterns into the compiler’s code so the borrow checker could infer the lifetimes in these situations and wouldn’t need explicit annotations.": {
    "_translate": "在编写了大量的 Rust 代码之后，Rust 团队发现 Rust 程序员在特定情况下反复输入相同的生命周期注解。这些情况是可以预测的，并遵循几个确定的模式。开发人员将这些模式编程到编译器的代码中，以便借用检查器可以在这些情况下推断生命周期，而不需要显式的注解。",
    "_note": ""
  },
  "This piece of Rust history is relevant because it’s possible that more deterministic patterns will emerge and be added to the compiler. In the future, even fewer lifetime annotations might be required.": {
    "_translate": "这段 Rust 历史相关，因为可能会有更多确定性的模式出现并被添加到编译器中。在未来，甚至可能需要更少的生命周期注解。",
    "_note": ""
  },
  "The patterns programmed into Rust’s analysis of references are called the lifetime elision rules. These aren’t rules for programmers to follow; they’re a set of particular cases that the compiler will consider, and if your code fits these cases, you don’t need to write the lifetimes explicitly.": {
    "_translate": "编程到 Rust 引用分析中的模式称为 <em>生命周期省略规则</em>。这些规则不是程序员需要遵守的；它们是一组编译器会考虑的特定情况，如果您的代码符合这些情况，您就不需要显式地编写生命周期。",
    "_note": ""
  },
  "The elision rules don’t provide full inference. If there is still ambiguity as to what lifetimes the references have after Rust applies the rules, the compiler won’t guess what the lifetime of the remaining references should be. Instead of guessing, the compiler will give you an error that you can resolve by adding the lifetime annotations.": {
    "_translate": "隐藏规则并不提供完全的推断。如果在 Rust 应用这些规则后，引用的生命周期仍然存在歧义，编译器不会猜测剩余引用的生命周期应该是什么。相反，编译器会给你一个错误，你可以通过添加生命周期注解来解决。",
    "_note": ""
  },
  "Lifetimes on function or method parameters are called input lifetimes, and lifetimes on return values are called output lifetimes.": {
    "_translate": "函数或方法参数上的生命周期称为<em>输入生命周期</em>，而返回值上的生命周期称为<em>输出生命周期</em>。",
    "_note": ""
  },
  "The compiler uses three rules to figure out the lifetimes of the references when there aren’t explicit annotations. The first rule applies to input lifetimes, and the second and third rules apply to output lifetimes. If the compiler gets to the end of the three rules and there are still references for which it can’t figure out lifetimes, the compiler will stop with an error. These rules apply to fn definitions as well as impl blocks.": {
    "_translate": "编译器使用三条规则来确定引用的生命周期，当没有显式注解时。第一条规则适用于输入生命周期，第二条和第三条规则适用于输出生命周期。如果编译器在三条规则之后仍然有无法确定生命周期的引用，编译器将停止并报错。这些规则适用于 <code>fn</code> 定义以及 <code>impl</code> 块。",
    "_note": ""
  },
  "The second rule is that, if there is exactly one input lifetime parameter, that lifetime is assigned to all output lifetime parameters: fn foo<'a>(x: &'a i32) -> &'a i32.": {
    "_translate": "第二个规则是，如果有且仅有一个输入生命周期参数，那么该生命周期将被分配给所有输出生命周期参数：<code>fn foo&lt;'a&gt;(x: &amp;'a i32) -&gt; &amp;'a i32</code>。",
    "_note": ""
  },
  "The first rule is that the compiler assigns a lifetime parameter to each parameter that’s a reference. In other words, a function with one parameter gets one lifetime parameter: fn foo<'a>(x: &'a i32); a function with two parameters gets two separate lifetime parameters: fn foo<'a, 'b>(x: &'a i32, y: &'b i32); and so on.": {
    "_translate": "第一条规则是编译器为每个是引用的参数分配一个生命周期参数。换句话说，一个参数的函数获得一个生命周期参数：<code>fn foo&lt;'a&gt;(x: &amp;'a i32)</code>；两个参数的函数获得两个独立的生命周期参数：<code>fn foo&lt;'a, 'b&gt;(x: &amp;'a i32, y: &amp;'b i32)</code>；依此类推。",
    "_note": ""
  },
  "Let’s pretend we’re the compiler. We’ll apply these rules to figure out the lifetimes of the references in the signature of the first_word function in Listing 10-25. The signature starts without any lifetimes associated with the references:": {
    "_translate": "让我们假装是编译器。我们将应用这些规则来确定列表 10-25 中 <code>first_word</code> 函数签名中引用的生命周期。签名开始时没有任何生命周期与引用相关联：",
    "_note": ""
  },
  "The third rule is that, if there are multiple input lifetime parameters, but one of them is &self or &mut self because this is a method, the lifetime of self is assigned to all output lifetime parameters. This third rule makes methods much nicer to read and write because fewer symbols are necessary.": {
    "_translate": "第三条规则是，如果有多个输入生命周期参数，但其中一个是因为这是个方法而为 <code>&amp;self</code> 或 <code>&amp;mut self</code>，则 <code>self</code> 的生命周期将被分配给所有输出生命周期参数。这条规则使得方法更易于阅读和编写，因为需要的符号更少。",
    "_note": ""
  },
  "Then the compiler applies the first rule, which specifies that each parameter gets its own lifetime. We’ll call it 'a as usual, so now the signature is this:": {
    "_translate": "然后编译器应用第一条规则，该规则指定每个参数都有其自己的生命周期。我们像往常一样称它为<code>'a</code>，所以现在的签名是这样的：",
    "_note": ""
  },
  "The second rule applies because there is exactly one input lifetime. The second rule specifies that the lifetime of the one input parameter gets assigned to the output lifetime, so the signature is now this:": {
    "_translate": "第二条规则适用，因为只有一个输入生命周期。第二条规则规定，唯一输入参数的生命周期被分配给输出生命周期，因此签名现在是这样的：",
    "_note": ""
  },
  "Now all the references in this function signature have lifetimes, and the compiler can continue its analysis without needing the programmer to annotate the lifetimes in this function signature.": {
    "_translate": "现在这个函数签名中的所有引用都有生命周期，编译器可以继续其分析，而不需要程序员在这个函数签名中注解生命周期。",
    "_note": ""
  },
  "Let’s apply the first rule: each parameter gets its own lifetime. This time we have two parameters instead of one, so we have two lifetimes:": {
    "_translate": "让我们应用第一条规则：每个参数都有自己的生命周期。这次我们有两个参数而不是一个，所以我们有两个生命周期：",
    "_note": ""
  },
  "Let’s look at another example, this time using the longest function that had no lifetime parameters when we started working with it in Listing 10-20:": {
    "_translate": "让我们来看另一个例子，这次使用的是在 Listing 10-20 中开始使用的 <code>longest</code> 函数，当时它还没有生命周期参数：",
    "_note": ""
  },
  "Because the third rule really only applies in method signatures, we’ll look at lifetimes in that context next to see why the third rule means we don’t have to annotate lifetimes in method signatures very often.": {
    "_translate": "因为第三条规则实际上只适用于方法签名，我们将在接下来的方法签名上下文中查看生命周期，以了解为什么第三条规则意味着我们不必经常在方法签名中注解生命周期。",
    "_note": ""
  },
  "Lifetime Annotations in Method Definitions": {
    "_translate": "<a class=\"header\" href=\"#lifetime-annotations-in-method-definitions\">方法定义中的生命周期注解</a>",
    "_note": ""
  },
  "You can see that the second rule doesn’t apply because there is more than one input lifetime. The third rule doesn’t apply either, because longest is a function rather than a method, so none of the parameters are self. After working through all three rules, we still haven’t figured out what the return type’s lifetime is. This is why we got an error trying to compile the code in Listing 10-20: the compiler worked through the lifetime elision rules but still couldn’t figure out all the lifetimes of the references in the signature.": {
    "_translate": "你可以看到，第二条规则不适用，因为有多个输入生命周期。第三条规则也不适用，因为<code>longest</code> 是一个函数而不是方法，所以没有参数是 <code>self</code>。在经过所有三条规则后，我们仍然没有弄清楚返回类型的生命周期是什么。这就是为什么我们在尝试编译清单 10-20 中的代码时遇到了错误：编译器经过了生命周期省略规则，但仍然无法弄清楚签名中所有引用的生命周期。",
    "_note": ""
  },
  "Lifetime names for struct fields always need to be declared after the impl keyword and then used after the struct’s name because those lifetimes are part of the struct’s type.": {
    "_translate": "结构字段的生命周期名称总是需要在 <code>impl</code> 关键字后声明，然后在结构体名称后使用，因为这些生命周期是结构体类型的一部分。",
    "_note": ""
  },
  "When we implement methods on a struct with lifetimes, we use the same syntax as that of generic type parameters shown in Listing 10-11. Where we declare and use the lifetime parameters depends on whether they’re related to the struct fields or the method parameters and return values.": {
    "_translate": "当我们为带有生命周期的结构体实现方法时，我们使用与泛型类型参数相同的语法，如清单 10-11 所示。我们在何处声明和使用生命周期参数取决于它们是与结构体字段相关还是与方法参数和返回值相关。",
    "_note": ""
  },
  "In method signatures inside the impl block, references might be tied to the lifetime of references in the struct’s fields, or they might be independent. In addition, the lifetime elision rules often make it so that lifetime annotations aren’t necessary in method signatures. Let’s look at some examples using the struct named ImportantExcerpt that we defined in Listing 10-24.": {
    "_translate": "在 <code>impl</code> 块中的方法签名里，引用可能与结构体字段中引用的生命周期绑定，也可能独立。此外，生命周期省略规则通常使得方法签名中不需要生命周期注解。让我们来看一些使用我们在清单 10-24 中定义的名为 <code>ImportantExcerpt</code> 的结构体的例子。",
    "_note": ""
  },
  "First we’ll use a method named level whose only parameter is a reference to self and whose return value is an i32, which is not a reference to anything:": {
    "_translate": "首先我们将使用一个名为 <code>level</code> 的方法，其唯一参数是对 <code>self</code> 的引用，其返回值是一个 <code>i32</code>，它不是对任何事物的引用：",
    "_note": ""
  },
  "Here is an example where the third lifetime elision rule applies:": {
    "_translate": "这里是一个第三个生命周期省略规则适用的例子：",
    "_note": ""
  },
  "The lifetime parameter declaration after impl and its use after the type name are required, but we’re not required to annotate the lifetime of the reference to self because of the first elision rule.": {
    "_translate": "<code>impl</code> 之后的生命周期参数声明及其在类型名称之后的使用是必需的，但根据第一条省略规则，我们不需要标注对 <code>self</code> 的引用的生命周期。",
    "_note": ""
  },
  "There are two input lifetimes, so Rust applies the first lifetime elision rule and gives both &self and announcement their own lifetimes. Then, because one of the parameters is &self, the return type gets the lifetime of &self, and all lifetimes have been accounted for.": {
    "_translate": "有两个输入生命周期，所以 Rust 应用第一个生命周期省略规则\n并给 <code>&amp;self</code> 和 <code>announcement</code> 分配了各自的生命周期。然后，因为\n其中一个参数是 <code>&amp;self</code>，返回类型获得了 <code>&amp;self</code> 的生命周期，\n并且所有生命周期都已考虑在内。",
    "_note": ""
  },
  "The Static Lifetime": {
    "_translate": "<a class=\"header\" href=\"#the-static-lifetime\">静态生命周期</a>",
    "_note": ""
  },
  "One special lifetime we need to discuss is 'static, which denotes that the affected reference can live for the entire duration of the program. All string literals have the 'static lifetime, which we can annotate as follows:": {
    "_translate": "一个我们需要讨论的特殊生命周期是 <code>'static</code>，它表示受影响的引用 <em>可以</em> 在整个程序的生命周期内存在。所有字符串字面量都具有 <code>'static</code> 生命周期，我们可以如下标注：",
    "_note": ""
  },
  "The text of this string is stored directly in the program’s binary, which is always available. Therefore, the lifetime of all string literals is 'static.": {
    "_translate": "此字符串的文本直接存储在程序的二进制文件中，始终可用。因此，所有字符串字面量的生命周期为<code>'static</code>。",
    "_note": ""
  },
  "Generic Type Parameters, Trait Bounds, and Lifetimes Together": {
    "_translate": "<a class=\"header\" href=\"#generic-type-parameters-trait-bounds-and-lifetimes-together\">泛型类型参数、特征边界和生命周期一起使用</a>",
    "_note": ""
  },
  "Let’s briefly look at the syntax of specifying generic type parameters, trait bounds, and lifetimes all in one function!": {
    "_translate": "让我们简要地看一下在一个函数中指定泛型类型参数、特征边界和生命周期的语法！",
    "_note": ""
  },
  "You might see suggestions to use the 'static lifetime in error messages. But before specifying 'static as the lifetime for a reference, think about whether the reference you have actually lives the entire lifetime of your program or not, and whether you want it to. Most of the time, an error message suggesting the 'static lifetime results from attempting to create a dangling reference or a mismatch of the available lifetimes. In such cases, the solution is to fix those problems, not to specify the 'static lifetime.": {
    "_translate": "你可能会在错误消息中看到建议使用<code>'static</code>生命周期。但在为引用指定<code>'static</code>生命周期之前，请考虑该引用是否确实存在于程序的整个生命周期中，以及你是否希望如此。大多数情况下，错误消息建议使用<code>'static</code>生命周期是因为尝试创建悬空引用或生命周期不匹配。在这种情况下，解决方案是解决这些问题，而不是指定<code>'static</code>生命周期。",
    "_note": ""
  },
  "Summary": {
    "_translate": "<a class=\"header\" href=\"#summary\">摘要</a>",
    "_note": ""
  },
  "This is the longest function from Listing 10-21 that returns the longer of two string slices. But now it has an extra parameter named ann of the generic type T, which can be filled in by any type that implements the Display trait as specified by the where clause. This extra parameter will be printed using {}, which is why the Display trait bound is necessary. Because lifetimes are a type of generic, the declarations of the lifetime parameter 'a and the generic type parameter T go in the same list inside the angle brackets after the function name.": {
    "_translate": "这是来自列表 10-21 的 <code>longest</code> 函数，它返回两个字符串切片中较长的那个。但现在它有一个额外的参数 <code>ann</code>，其类型为泛型 <code>T</code>，可以由任何实现了 <code>Display</code> 特性的类型填充，如 <code>where</code> 子句所指定。这个额外的参数将使用 <code>{}</code> 打印，这就是为什么需要 <code>Display</code> 特性约束。因为生命周期是一种泛型，所以生命周期参数 <code>'a</code> 和泛型类型参数 <code>T</code> 的声明在函数名称后的尖括号内同一个列表中。",
    "_note": ""
  },
  "We covered a lot in this chapter! Now that you know about generic type parameters, traits and trait bounds, and generic lifetime parameters, you’re ready to write code without repetition that works in many different situations. Generic type parameters let you apply the code to different types. Traits and trait bounds ensure that even though the types are generic, they’ll have the behavior the code needs. You learned how to use lifetime annotations to ensure that this flexible code won’t have any dangling references. And all of this analysis happens at compile time, which doesn’t affect runtime performance!": {
    "_translate": "我们在本章中涵盖了大量内容！现在你已经了解了泛型类型参数、特质和特质边界，以及泛型生命周期参数，你已经准备好编写能够在多种不同情况下工作的、不重复的代码。泛型类型参数让你可以将代码应用于不同的类型。特质和特质边界确保即使类型是泛型的，它们也会具有代码所需的行为。你学会了如何使用生命周期注解来确保这种灵活的代码不会有任何悬垂引用。所有这些分析都在编译时发生，不会影响运行时性能！",
    "_note": ""
  },
  "Believe it or not, there is much more to learn on the topics we discussed in this chapter: Chapter 18 discusses trait objects, which are another way to use traits. There are also more complex scenarios involving lifetime annotations that you will only need in very advanced scenarios; for those, you should read the Rust Reference. But next, you’ll learn how to write tests in Rust so you can make sure your code is working the way it should.": {
    "_translate": "不管你信不信，我们在本章讨论的主题还有更多内容可以学习：第18章讨论了特质对象，这是使用特质的另一种方式。还有一些涉及生命周期注解的更复杂场景，你只有在非常高级的情况下才需要；对于这些，你应该阅读<a href=\"../reference/index.html\">Rust参考手册</a>。但接下来，你将学习如何在Rust中编写测试，以确保你的代码按预期工作。",
    "_note": ""
  },
  "Validating References with Lifetimes - The Rust Programming Language": {
    "_translate": "使用生命周期验证引用 - 《Rust编程语言》",
    "_note": ""
  },
  "You might see suggestions in error messages to use the 'static lifetime. But before specifying 'static as the lifetime for a reference, think about whether the reference you have actually lives the entire lifetime of your program or not, and whether you want it to. Most of the time, an error message suggesting the 'static lifetime results from attempting to create a dangling reference or a mismatch of the available lifetimes. In such cases, the solution is to fix those problems, not to specify the 'static lifetime.": {
    "_translate": "你可能会在错误消息中看到建议使用<code>'static</code>生命周期。但在将<code>'static</code>指定为引用的生命周期之前，请考虑你拥有的引用是否确实存在于程序的整个生命周期中，以及你是否希望如此。大多数情况下，错误消息建议使用<code>'static</code>生命周期是由于尝试创建悬空引用或生命周期不匹配所致。在这种情况下，解决方案是解决这些问题，而不是指定<code>'static</code>生命周期。",
    "_note": ""
  }
}