{
  "Writing Automated Tests": {
    "_translate": "<a class=\"header\" href=\"#writing-automated-tests\">编写自动化测试</a>",
    "_note": ""
  },
  "In his 1972 essay “The Humble Programmer,” Edsger W. Dijkstra said that “Program testing can be a very effective way to show the presence of bugs, but it is hopelessly inadequate for showing their absence.” That doesn’t mean we shouldn’t try to test as much as we can!": {
    "_translate": "在他的1972年论文《谦逊的程序员》中，Edsger W. Dijkstra 说，\n“程序测试可以是非常有效的方法来显示错误的存在，但对于证明错误的不存在，它是毫无希望的。” 这并不意味着我们不应该尽我们所能去测试！",
    "_note": ""
  },
  "Correctness in our programs is the extent to which our code does what we intend it to do. Rust is designed with a high degree of concern about the correctness of programs, but correctness is complex and not easy to prove. Rust’s type system shoulders a huge part of this burden, but the type system cannot catch everything. As such, Rust includes support for writing automated software tests.": {
    "_translate": "正确性是指我们的代码在多大程度上实现了我们的意图。Rust 在设计时非常关注程序的正确性，但正确性是复杂的，不易证明。Rust 的类型系统承担了这一重任的很大一部分，但类型系统并不能捕获一切。因此，Rust 包含了编写自动化软件测试的支持。",
    "_note": ""
  },
  "Say we write a function add_two that adds 2 to whatever number is passed to it. This function’s signature accepts an integer as a parameter and returns an integer as a result. When we implement and compile that function, Rust does all the type checking and borrow checking that you’ve learned so far to ensure that, for instance, we aren’t passing a String value or an invalid reference to this function. But Rust can’t check that this function will do precisely what we intend, which is return the parameter plus 2 rather than, say, the parameter plus 10 or the parameter minus 50! That’s where tests come in.": {
    "_translate": "假设我们编写了一个名为 <code>add_two</code> 的函数，该函数将 2 加到传递给它的任何数字上。此函数的签名接受一个整数作为参数，并返回一个整数作为结果。当我们实现并编译该函数时，Rust 会执行你迄今为止所学的所有类型检查和借用检查，以确保例如我们没有将 <code>String</code> 值或无效引用传递给此函数。但是 Rust <em>不能</em> 检查此函数是否会精确地执行我们的意图，即返回参数加 2 而不是参数加 10 或参数减 50！这就是测试的作用。",
    "_note": ""
  },
  "We can write tests that assert, for example, that when we pass 3 to the add_two function, the returned value is 5. We can run these tests whenever we make changes to our code to make sure any existing correct behavior has not changed.": {
    "_translate": "我们可以编写测试，例如，断言当我们传递<code>3</code>给<code>add_two</code>函数时，返回的值是<code>5</code>。我们可以在每次对代码进行更改时运行这些测试，以确保任何现有的正确行为没有改变。",
    "_note": ""
  },
  "Testing is a complex skill: although we can’t cover in one chapter every detail about how to write good tests, in this chapter we will discuss the mechanics of Rust’s testing facilities. We’ll talk about the annotations and macros available to you when writing your tests, the default behavior and options provided for running your tests, and how to organize tests into unit tests and integration tests.": {
    "_translate": "测试是一项复杂的技能：虽然我们无法在这一章中涵盖如何编写良好测试的每一个细节，但在本章中我们将讨论 Rust 测试设施的机制。我们将讨论编写测试时可用的注解和宏，运行测试时提供的默认行为和选项，以及如何将测试组织成单元测试和集成测试。",
    "_note": ""
  },
  "Writing Automated Tests - The Rust Programming Language": {
    "_translate": "编写自动化测试 - 《Rust编程语言》",
    "_note": ""
  }
}