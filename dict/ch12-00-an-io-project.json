{
  "An I/O Project: Building a Command Line Program": {
    "_translate": "<a class=\"header\" href=\"#an-io-project-building-a-command-line-program\">一个I/O项目：构建命令行程序</a>",
    "_note": ""
  },
  "This chapter is a recap of the many skills you’ve learned so far and an exploration of a few more standard library features. We’ll build a command line tool that interacts with file and command line input/output to practice some of the Rust concepts you now have under your belt.": {
    "_translate": "这一章是对您迄今为止学到的许多技能的回顾，并探索一些更多的标准库特性。我们将构建一个命令行工具，该工具与文件和命令行输入/输出交互，以练习您现在掌握的一些Rust概念。",
    "_note": ""
  },
  "Rust’s speed, safety, single binary output, and cross-platform support make it an ideal language for creating command line tools, so for our project, we’ll make our own version of the classic command line search tool grep (globally search a regular expression and print). In the simplest use case, grep searches a specified file for a specified string. To do so, grep takes as its arguments a file path and a string. Then it reads the file, finds lines in that file that contain the string argument, and prints those lines.": {
    "_translate": "Rust 的速度、安全性、单一二进制输出和跨平台支持使其成为创建命令行工具的理想语言，因此在我们的项目中，我们将创建经典命令行搜索工具 <code>grep</code> (<strong>g</strong>lobally search a <strong>r</strong>egular <strong>e</strong>xpression and <strong>p</strong>rint) 的我们自己的版本。在最简单的用例中，<code>grep</code> 在指定文件中搜索指定字符串。为此，<code>grep</code> 将文件路径和字符串作为其参数。然后它读取文件，找到包含字符串参数的行，并打印这些行。",
    "_note": ""
  },
  "Along the way, we’ll show how to make our command line tool use the terminal features that many other command line tools use. We’ll read the value of an environment variable to allow the user to configure the behavior of our tool. We’ll also print error messages to the standard error console stream (stderr) instead of standard output (stdout) so that, for example, the user can redirect successful output to a file while still seeing error messages onscreen.": {
    "_translate": "在这一过程中，我们将展示如何使我们的命令行工具使用许多其他命令行工具使用的终端功能。我们将读取环境变量的值，以允许用户配置我们工具的行为。我们还将错误消息打印到标准错误控制台流(<code>stderr</code>)，而不是标准输出(<code>stdout</code>)，这样例如，用户可以将成功输出重定向到文件，同时仍然在屏幕上看到错误消息。",
    "_note": ""
  },
  "Our grep project will combine a number of concepts you’ve learned so far:": {
    "_translate": "我们的 <code>grep</code> 项目将结合你迄今为止学到的许多概念：",
    "_note": ""
  },
  "One Rust community member, Andrew Gallant, has already created a fully featured, very fast version of grep, called ripgrep. By comparison, our version will be fairly simple, but this chapter will give you some of the background knowledge you need to understand a real-world project such as ripgrep.": {
    "_translate": "一个 Rust 社区成员，Andrew Gallant，已经创建了一个功能齐全、非常快速的 <code>grep</code> 版本，称为 <code>ripgrep</code>。相比之下，我们的版本将相当简单，但本章将为您提供一些理解如 <code>ripgrep</code> 这样的实际项目所需的背景知识。",
    "_note": ""
  },
  "We’ll also briefly introduce closures, iterators, and trait objects, which Chapter 13 and Chapter 18 will cover in detail.": {
    "_translate": "我们还将简要介绍闭包、迭代器和特征对象，<a href=\"ch13-00-functional-features.html\">第 13 章</a><!-- ignore --> 和 <a href=\"ch18-00-oop.html\">第 18 章</a><!-- ignore --> 将详细讨论这些内容。",
    "_note": ""
  },
  "An I/O Project: Building a Command Line Program - The Rust Programming Language": {
    "_translate": "一个 I/O 项目：构建命令行程序 - 《Rust 编程语言》",
    "_note": ""
  },
  "Organizing code (Chapter 7)": {
    "_translate": "组织代码 (<a href=\"ch07-00-managing-growing-projects-with-packages-crates-and-modules.html\">第 7 章</a><!-- ignore -->)",
    "_note": ""
  },
  "Using vectors and strings (Chapter 8)": {
    "_translate": "使用向量和字符串(<a href=\"ch08-00-common-collections.html\">第8章</a><!-- ignore -->",
    "_note": ""
  },
  "Handling errors (Chapter 9)": {
    "_translate": "处理错误(<a href=\"ch09-00-error-handling.html\">第9章</a>)",
    "_note": ""
  },
  "Using traits and lifetimes where appropriate (Chapter 10)": {
    "_translate": "在适当的地方使用特质和生命周期(<a href=\"ch10-00-generics.html\">第10章</a><!-- ignore -->)",
    "_note": ""
  },
  "Writing tests (Chapter 11)": {
    "_translate": "编写测试 (<a href=\"ch11-00-testing.html\">第 11 章</a><!-- ignore -->)",
    "_note": ""
  },
  "Rust’s speed, safety, single binary output, and cross-platform support make it an ideal language for creating command line tools, so for our project, we’ll make our own version of the classic command line search tool grep (globally search a regular expression and print). In the simplest use case, grep searches a specified file for a specified string. To do so, grep takes as its arguments a file path and a string. Then, it reads the file, finds lines in that file that contain the string argument, and prints those lines.": {
    "_translate": "Rust 的速度、安全性、单一二进制输出和跨平台支持使其成为创建命令行工具的理想语言，因此在我们的项目中，我们将创建经典命令行搜索工具 <code>grep</code> (<strong>g</strong>lobally search a <strong>r</strong>egular <strong>e</strong>xpression and <strong>p</strong>rint) 的我们自己的版本。在最简单的用例中，<code>grep</code> 在指定文件中搜索指定字符串。为此，<code>grep</code> 将文件路径和字符串作为其参数。然后，它读取文件，找到包含字符串参数的行，并打印这些行。",
    "_note": ""
  }
}