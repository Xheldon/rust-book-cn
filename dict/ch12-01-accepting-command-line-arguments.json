{
  "Accepting Command Line Arguments": {
    "_translate": "<a class=\"header\" href=\"#accepting-command-line-arguments\">接受命令行参数</a>",
    "_note": ""
  },
  "Let’s create a new project with, as always, cargo new. We’ll call our project minigrep to distinguish it from the grep tool that you might already have on your system.": {
    "_translate": "让我们用一如既往的<code>cargo new</code>创建一个新项目。我们将把项目命名为<code>minigrep</code>，以区别于你系统中可能已经存在的<code>grep</code>工具。",
    "_note": ""
  },
  "The first task is to make minigrep accept its two command line arguments: the file path and a string to search for. That is, we want to be able to run our program with cargo run, two hyphens to indicate the following arguments are for our program rather than for cargo, a string to search for, and a path to a file to search in, like so:": {
    "_translate": "第一个任务是让<code>minigrep</code>接受其两个命令行参数：文件路径和要搜索的字符串。也就是说，我们希望能够使用<code>cargo run</code>运行我们的程序，两个破折号表示随后的参数是给我们的程序而不是给<code>cargo</code>的，一个要搜索的字符串，以及一个要搜索的文件的路径，如下所示：",
    "_note": ""
  },
  "Right now, the program generated by cargo new cannot process arguments we give it. Some existing libraries on crates.io can help with writing a program that accepts command line arguments, but because you’re just learning this concept, let’s implement this capability ourselves.": {
    "_translate": "目前，由 <code>cargo new</code> 生成的程序无法处理我们给它的参数。在 <a href=\"https://crates.io/\">crates.io</a> 上有一些现有的库可以帮助编写接受命令行参数的程序，但因为你刚刚学习这个概念，让我们自己实现这个功能。",
    "_note": ""
  },
  "Reading the Argument Values": {
    "_translate": "<a class=\"header\" href=\"#reading-the-argument-values\">读取参数值</a>",
    "_note": ""
  },
  "The code in Listing 12-1 allows your minigrep program to read any command line arguments passed to it, and then collect the values into a vector.": {
    "_translate": "清单 12-1 中的代码允许您的 <code>minigrep</code> 程序读取传递给它的任何命令行参数，然后将这些值收集到一个向量中。",
    "_note": ""
  },
  "To enable minigrep to read the values of command line arguments we pass to it, we’ll need the std::env::args function provided in Rust’s standard library. This function returns an iterator of the command line arguments passed to minigrep. We’ll cover iterators fully in Chapter 13. For now, you only need to know two details about iterators: iterators produce a series of values, and we can call the collect method on an iterator to turn it into a collection, such as a vector, that contains all the elements the iterator produces.": {
    "_translate": "为了使 <code>minigrep</code> 能够读取我们传递给它的命令行参数的值，我们需要使用 Rust 标准库中提供的 <code>std::env::args</code> 函数。此函数返回传递给 <code>minigrep</code> 的命令行参数的迭代器。我们将在 <a href=\"ch13-00-functional-features.html\">第 13 章</a><!-- ignore\n--> 中全面介绍迭代器。现在，你只需要了解迭代器的两个细节：迭代器生成一系列值，我们可以在迭代器上调用 <code>collect</code> 方法将其转换为包含迭代器生成的所有元素的集合，例如向量。",
    "_note": ""
  },
  "The args Function and Invalid Unicode": {
    "_translate": "<a class=\"header\" href=\"#the-args-function-and-invalid-unicode\">函数 <code>args</code> 和无效的 Unicode</a>",
    "_note": ""
  },
  "Note that std::env::args will panic if any argument contains invalid Unicode. If your program needs to accept arguments containing invalid Unicode, use std::env::args_os instead. That function returns an iterator that produces OsString values instead of String values. We’ve chosen to use std::env::args here for simplicity because OsString values differ per platform and are more complex to work with than String values.": {
    "_translate": "请注意，<code>std::env::args</code> 如果任何参数包含无效的 Unicode 会引发 panic。如果您的程序需要接受包含无效 Unicode 的参数，请改用 <code>std::env::args_os</code>。该函数返回一个生成 <code>OsString</code> 值的迭代器，而不是 <code>String</code> 值。我们在这里选择使用 <code>std::env::args</code> 是为了简单，因为 <code>OsString</code> 值因平台而异，并且比 <code>String</code> 值更复杂。",
    "_note": ""
  },
  "First we bring the std::env module into scope with a use statement so we can use its args function. Notice that the std::env::args function is nested in two levels of modules. As we discussed in Chapter 7, in cases where the desired function is nested in more than one module, we’ve chosen to bring the parent module into scope rather than the function. By doing so, we can easily use other functions from std::env. It’s also less ambiguous than adding use std::env::args and then calling the function with just args, because args might easily be mistaken for a function that’s defined in the current module.": {
    "_translate": "首先，我们通过 <code>use</code> 语句将 <code>std::env</code> 模块引入作用域，这样我们就可以使用它的 <code>args</code> 函数。请注意，<code>std::env::args</code> 函数嵌套在两层模块中。正如我们在 <a href=\"ch07-04-bringing-paths-into-scope-with-the-use-keyword.html#creating-idiomatic-use-paths\">第 7 章</a><!-- ignore --> 中讨论的，在所需函数嵌套在多个模块中的情况下，我们选择将父模块引入作用域而不是函数本身。这样做，我们可以轻松使用 <code>std::env</code> 中的其他函数。这也比添加 <code>use std::env::args</code> 然后仅用 <code>args</code> 调用函数更清晰，因为 <code>args</code> 可能会被误认为是在当前模块中定义的函数。",
    "_note": ""
  },
  "Finally, we print the vector using the debug macro. Let’s try running the code first with no arguments and then with two arguments:": {
    "_translate": "最后，我们使用调试宏打印向量。让我们先尝试不带参数运行代码，然后再带两个参数运行：<code>",
    "_note": ""
  },
  "On the first line of main, we call env::args, and we immediately use collect to turn the iterator into a vector containing all the values produced by the iterator. We can use the collect function to create many kinds of collections, so we explicitly annotate the type of args to specify that we want a vector of strings. Although you very rarely need to annotate types in Rust, collect is one function you do often need to annotate because Rust isn’t able to infer the kind of collection you want.": {
    "_translate": "在 <code>main</code> 的第一行，我们调用 <code>env::args</code>，并立即使用 <code>collect</code> 将迭代器转换为包含迭代器生成的所有值的向量。我们可以使用 <code>collect</code> 函数创建多种类型的集合，因此我们显式地注解了 <code>args</code> 的类型，以指定我们想要一个字符串向量。虽然在 Rust 中很少需要注解类型，但 <code>collect</code> 是一个你经常需要注解的函数，因为 Rust 无法推断你想要的集合类型。",
    "_note": ""
  },
  "Saving the Argument Values in Variables": {
    "_translate": "<a class=\"header\" href=\"#saving-the-argument-values-in-variables\">将参数值保存在变量中</a>",
    "_note": ""
  },
  "Notice that the first value in the vector is \"target/debug/minigrep\", which is the name of our binary. This matches the behavior of the arguments list in C, letting programs use the name by which they were invoked in their execution. It’s often convenient to have access to the program name in case you want to print it in messages or change the behavior of the program based on what command line alias was used to invoke the program. But for the purposes of this chapter, we’ll ignore it and save only the two arguments we need.": {
    "_translate": "注意向量中的第一个值是<code>\"target/debug/minigrep\"</code>，这是我们的二进制文件的名称。这与C中参数列表的行为相匹配，允许程序在执行过程中使用调用它们的名称。通常，如果要在消息中打印程序名称或根据用于调用程序的命令行别名更改程序行为，访问程序名称会非常方便。但为了本章的目的，我们将忽略它，只保存我们需要的两个参数。",
    "_note": ""
  },
  "The program is currently able to access the values specified as command line arguments. Now we need to save the values of the two arguments in variables so we can use the values throughout the rest of the program. We do that in Listing 12-2.": {
    "_translate": "程序目前能够访问指定为命令行参数的值。现在我们需要将这两个参数的值保存在变量中，以便在整个程序的其余部分中使用这些值。我们在清单 12-2 中这样做。",
    "_note": ""
  },
  "We temporarily print the values of these variables to prove that the code is working as we intend. Let’s run this program again with the arguments test and sample.txt:": {
    "_translate": "我们暂时打印这些变量的值，以证明代码按我们的预期工作。让我们再次运行这个程序，参数为<code>test</code>和<code>sample.txt</code>：",
    "_note": ""
  },
  "As we saw when we printed the vector, the program’s name takes up the first value in the vector at args[0], so we’re starting arguments at index 1. The first argument minigrep takes is the string we’re searching for, so we put a reference to the first argument in the variable query. The second argument will be the file path, so we put a reference to the second argument in the variable file_path.": {
    "_translate": "正如我们在打印向量时看到的，程序的名称占据了向量中的第一个值 <code>args[0]</code>，所以我们从索引 1 开始参数。<code>minigrep</code> 接受的第一个参数是我们要搜索的字符串，所以我们把第一个参数的引用放在变量 <code>query</code> 中。第二个参数将是文件路径，所以我们把第二个参数的引用放在变量 <code>file_path</code> 中。",
    "_note": ""
  },
  "Great, the program is working! The values of the arguments we need are being saved into the right variables. Later we’ll add some error handling to deal with certain potential erroneous situations, such as when the user provides no arguments; for now, we’ll ignore that situation and work on adding file-reading capabilities instead.": {
    "_translate": "很好，程序正在运行！我们需要的参数值正在被保存到正确的变量中。稍后我们将添加一些错误处理来处理某些潜在的错误情况，例如用户未提供任何参数；目前，我们将忽略这种情况，而是专注于添加文件读取功能。",
    "_note": ""
  },
  "Accepting Command Line Arguments - The Rust Programming Language": {
    "_translate": "接受命令行参数 - 《Rust 编程语言》",
    "_note": ""
  },
  "Let’s create a new project with, as always, cargo new. We’ll call our project minigrep to distinguish it from the grep tool that you might already have on your system:": {
    "_translate": "让我们用一如既往的<code>cargo new</code>创建一个新项目。我们将把项目命名为<code>minigrep</code>，以区别于你系统中可能已经存在的<code>grep</code>工具：",
    "_note": ""
  },
  "The code in Listing 12-1 allows your minigrep program to read any command line arguments passed to it and then collect the values into a vector.": {
    "_translate": "清单 12-1 中的代码允许您的 <code>minigrep</code> 程序读取传递给它的任何命令行参数，然后将这些值收集到一个向量中。",
    "_note": ""
  },
  "To enable minigrep to read the values of command line arguments we pass to it, we’ll need the std::env::args function provided in Rust’s standard library. This function returns an iterator of the command line arguments passed to minigrep. We’ll cover iterators fully in Chapter 13. For now, you only need to know two details about iterators: Iterators produce a series of values, and we can call the collect method on an iterator to turn it into a collection, such as a vector, which contains all the elements the iterator produces.": {
    "_translate": "为了使 <code>minigrep</code> 能够读取我们传递给它的命令行参数的值，我们需要使用 Rust 标准库提供的 <code>std::env::args</code> 函数。这个函数返回一个迭代器，其中包含传递给 <code>minigrep</code> 的命令行参数。我们将在 <a href=\"ch13-00-functional-features.html\">第 13 章</a><!-- ignore\n--> 中详细介绍迭代器。现在，你只需要了解迭代器的两个细节：迭代器生成一系列值，我们可以在迭代器上调用 <code>collect</code> 方法将其转换为包含迭代器生成的所有元素的集合，例如向量。",
    "_note": ""
  },
  "The program is currently able to access the values specified as command line arguments. Now we need to save the values of the two arguments in variables so that we can use the values throughout the rest of the program. We do that in Listing 12-2.": {
    "_translate": "程序目前能够访问作为命令行参数指定的值。现在我们需要将这两个参数的值保存在变量中，以便我们可以在程序的其余部分使用这些值。我们在清单 12-2 中这样做。",
    "_note": ""
  },
  "First, we bring the std::env module into scope with a use statement so that we can use its args function. Notice that the std::env::args function is nested in two levels of modules. As we discussed in Chapter 7, in cases where the desired function is nested in more than one module, we’ve chosen to bring the parent module into scope rather than the function. By doing so, we can easily use other functions from std::env. It’s also less ambiguous than adding use std::env::args and then calling the function with just args, because args might easily be mistaken for a function that’s defined in the current module.": {
    "_translate": "首先，我们通过 <code>use</code> 语句将 <code>std::env</code> 模块引入作用域，这样我们就可以使用它的 <code>args</code> 函数。请注意，<code>std::env::args</code> 函数嵌套在两个模块层级中。正如我们在 <a href=\"ch07-04-bringing-paths-into-scope-with-the-use-keyword.html#creating-idiomatic-use-paths\">第 7 章</a><!-- ignore --> 中讨论的那样，在所需函数嵌套在多个模块中的情况下，我们选择将父模块引入作用域而不是函数本身。这样做，我们可以轻松使用 <code>std::env</code> 中的其他函数。这也比添加 <code>use std::env::args</code> 然后仅用 <code>args</code> 调用函数更清晰，因为 <code>args</code> 可能会被误认为是在当前模块中定义的函数。",
    "_note": ""
  }
}