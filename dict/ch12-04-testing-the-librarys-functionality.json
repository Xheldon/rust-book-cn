{
  "Developing the Library’s Functionality with Test-Driven Development": {
    "_translate": "<a class=\"header\" href=\"#developing-the-librarys-functionality-with-test-driven-development\">使用测试驱动开发开发库的功能</a>",
    "_note": ""
  },
  "Now that we’ve extracted the logic into src/lib.rs and left the argument collecting and error handling in src/main.rs, it’s much easier to write tests for the core functionality of our code. We can call functions directly with various arguments and check return values without having to call our binary from the command line.": {
    "_translate": "现在我们已经将逻辑提取到<em>src/lib.rs</em>中，并将参数收集和错误处理保留在<em>src/main.rs</em>中，为代码的核心功能编写测试变得更加容易。我们可以直接调用带有不同参数的函数并检查返回值，而无需从命令行调用我们的二进制文件。",
    "_note": ""
  },
  "In this section, we’ll add the searching logic to the minigrep program using the test-driven development (TDD) process with the following steps:": {
    "_translate": "在本节中，我们将使用测试驱动开发（TDD）过程为<code>minigrep</code>程序添加搜索逻辑，具体步骤如下：",
    "_note": ""
  },
  "Though it’s just one of many ways to write software, TDD can help drive code design. Writing the test before you write the code that makes the test pass helps to maintain high test coverage throughout the process.": {
    "_translate": "虽然这只是编写软件的众多方法之一，但 TDD 可以帮助驱动代码设计。在编写使测试通过的代码之前先编写测试，有助于在整个过程中保持高测试覆盖率。",
    "_note": ""
  },
  "We’ll test-drive the implementation of the functionality that will actually do the searching for the query string in the file contents and produce a list of lines that match the query. We’ll add this functionality in a function called search.": {
    "_translate": "我们将测试实现的功能，该功能将在文件内容中搜索查询字符串，并生成与查询匹配的行列表。我们将在一个名为<code>search</code>的函数中添加此功能。",
    "_note": ""
  },
  "Writing a Failing Test": {
    "_translate": "<a class=\"header\" href=\"#writing-a-failing-test\">编写一个失败的测试</a>",
    "_note": ""
  },
  "This test searches for the string \"duct\". The text we’re searching is three lines, only one of which contains \"duct\" (note that the backslash after the opening double quote tells Rust not to put a newline character at the beginning of the contents of this string literal). We assert that the value returned from the search function contains only the line we expect.": {
    "_translate": "这个测试查找字符串<code>\"duct\"</code>。我们要搜索的文本有三行，只有一行包含<code>\"duct\"</code>（注意，开头双引号后的反斜杠告诉Rust不要在该字符串字面量的开头添加换行符）。我们断言<code>search</code>函数返回的值只包含我们预期的那一行。",
    "_note": ""
  },
  "Because we don’t need them anymore, let’s remove the println! statements from src/lib.rs and src/main.rs that we used to check the program’s behavior. Then, in src/lib.rs, we’ll add a tests module with a test function, as we did in Chapter 11. The test function specifies the behavior we want the search function to have: it will take a query and the text to search, and it will return only the lines from the text that contain the query. Listing 12-15 shows this test, which won’t compile yet.": {
    "_translate": "因为我们不再需要它们了，让我们从 <em>src/lib.rs</em> 和 <em>src/main.rs</em> 中移除用于检查程序行为的 <code>println!</code> 语句。然后，在 <em>src/lib.rs</em> 中，我们将添加一个 <code>tests</code> 模块，其中包含一个测试函数，就像我们在 <a href=\"ch11-01-writing-tests.html#the-anatomy-of-a-test-function\">第 11 章</a><!-- ignore --> 中所做的那样。测试函数指定了我们希望 <code>search</code> 函数具有的行为：它将接受一个查询和要搜索的文本，并仅返回包含查询的文本行。列表 12-15 显示了这个测试，但目前还无法编译。",
    "_note": ""
  },
  "We aren’t yet able to run this test and watch it fail because the test doesn’t even compile: the search function doesn’t exist yet! In accordance with TDD principles, we’ll add just enough code to get the test to compile and run by adding a definition of the search function that always returns an empty vector, as shown in Listing 12-16. Then the test should compile and fail because an empty vector doesn’t match a vector containing the line \"safe, fast, productive.\"": {
    "_translate": "我们还不能运行这个测试并看着它失败，因为测试甚至无法编译：<code>search</code> 函数还不存在！根据 TDD 原则，我们将添加足够的代码以使测试能够编译和运行，方法是添加一个总是返回空向量的 <code>search</code> 函数定义，如列表 12-16 所示。然后测试应该能够编译并失败，因为一个空向量与包含行 <code>\"safe, fast, productive.\"</code> 的向量不匹配。",
    "_note": ""
  },
  "In other words, we tell Rust that the data returned by the search function will live as long as the data passed into the search function in the contents argument. This is important! The data referenced by a slice needs to be valid for the reference to be valid; if the compiler assumes we’re making string slices of query rather than contents, it will do its safety checking incorrectly.": {
    "_translate": "换句话说，我们告诉 Rust <code>search</code> 函数返回的数据\n将与传递给 <code>search</code> 函数的 <code>contents</code> 参数中的数据一样长寿。这很重要！切片引用的数据需要有效，引用才能有效；如果编译器假设我们正在对 <code>query</code> 而不是 <code>contents</code> 进行字符串切片，它将错误地进行安全检查。",
    "_note": ""
  },
  "If we forget the lifetime annotations and try to compile this function, we’ll get this error:": {
    "_translate": "如果我们忘记生命周期注解并尝试编译此函数，我们将得到以下错误：",
    "_note": ""
  },
  "Notice that we need to define an explicit lifetime 'a in the signature of search and use that lifetime with the contents argument and the return value. Recall in Chapter 10 that the lifetime parameters specify which argument lifetime is connected to the lifetime of the return value. In this case, we indicate that the returned vector should contain string slices that reference slices of the argument contents (rather than the argument query).": {
    "_translate": "请注意，我们需要在 <code>search</code> 的签名中定义一个显式的生命周期 <code>'a</code>，并使用该生命周期与 <code>contents</code> 参数和返回值。回想 <a href=\"ch10-03-lifetime-syntax.html\">第 10 章</a><!-- ignore --> 中，生命周期参数指定了哪个参数的生命周期与返回值的生命周期相关联。在这种情况下，我们表示返回的向量应包含引用 <code>contents</code> 参数的字符串切片（而不是 <code>query</code> 参数）。",
    "_note": ""
  },
  "Rust can’t possibly know which of the two arguments we need, so we need to tell it explicitly. Because contents is the argument that contains all of our text and we want to return the parts of that text that match, we know contents is the argument that should be connected to the return value using the lifetime syntax.": {
    "_translate": "Rust 无法知道我们具体需要哪个参数，所以我们需要明确地告诉它。因为 <code>contents</code> 是包含我们所有文本的参数，而我们希望返回与之匹配的文本部分，所以我们知道 <code>contents</code> 是应该使用生命周期语法与返回值关联的参数。",
    "_note": ""
  },
  "Now let’s run the test:": {
    "_translate": "现在让我们运行测试：",
    "_note": ""
  },
  "Great, the test fails, exactly as we expected. Let’s get the test to pass!": {
    "_translate": "很好，测试失败了，正如我们所预期的。让我们让测试通过！",
    "_note": ""
  },
  "Other programming languages don’t require you to connect arguments to return values in the signature, but this practice will get easier over time. You might want to compare this example with the examples in the “Validating References with Lifetimes” section in Chapter 10.": {
    "_translate": "其他编程语言不要求你在签名中将参数与返回值连接起来，但随着时间的推移，这种做法会变得更容易。你可能想要将此示例与第 10 章<a href=\"ch10-03-lifetime-syntax.html#validating-references-with-lifetimes\">“使用生命周期验证引用”</a><!-- ignore -->部分中的示例进行比较。",
    "_note": ""
  },
  "Writing Code to Pass the Test": {
    "_translate": "<a class=\"header\" href=\"#writing-code-to-pass-the-test\">编写通过测试的代码</a>",
    "_note": ""
  },
  "Currently, our test is failing because we always return an empty vector. To fix that and implement search, our program needs to follow these steps:": {
    "_translate": "目前，我们的测试失败是因为我们总是返回一个空的向量。要修复这个问题并实现<code>search</code>，我们的程序需要遵循以下步骤：",
    "_note": ""
  },
  "Let’s work through each step, starting with iterating through lines.": {
    "_translate": "让我们逐步进行，从遍历行开始。",
    "_note": ""
  },
  "Rust has a helpful method to handle line-by-line iteration of strings, conveniently named lines, that works as shown in Listing 12-17. Note that this won’t compile yet.": {
    "_translate": "Rust 有一个有助于处理字符串逐行迭代的有用方法，方便地命名为 <code>lines</code>，如清单 12-17 所示。请注意，这还不能编译。",
    "_note": ""
  },
  "The lines method returns an iterator. We’ll talk about iterators in depth in Chapter 13, but recall that you saw this way of using an iterator in Listing 3-5, where we used a for loop with an iterator to run some code on each item in a collection.": {
    "_translate": "<code>lines</code> 方法返回一个迭代器。我们将在<a href=\"ch13-02-iterators.html\">第 13 章</a><!-- ignore -->中深入讨论迭代器，但请回想一下，您在<a href=\"ch03-05-control-flow.html#looping-through-a-collection-with-for\">示例 3-5</a><!-- ignore -->中看到了这种使用迭代器的方式，我们在其中使用了一个<code>for</code>循环和迭代器来对集合中的每个项目运行一些代码。",
    "_note": ""
  },
  "At the moment, we’re building up functionality. To get the code to compile, we need to return a value from the body as we indicated we would in the function signature.": {
    "_translate": "目前，我们正在构建功能。为了让代码编译通过，我们需要从函数体中返回一个值，正如我们在函数签名中所指示的那样。",
    "_note": ""
  },
  "Next, we’ll check whether the current line contains our query string. Fortunately, strings have a helpful method named contains that does this for us! Add a call to the contains method in the search function, as shown in Listing 12-18. Note that this still won’t compile yet.": {
    "_translate": "接下来，我们将检查当前行是否包含我们的查询字符串。\n幸运的是，字符串有一个名为<code>contains</code>的有用方法，可以为我们完成这项工作！在<code>search</code>函数中添加对<code>contains</code>方法的调用，如清单12-18所示。请注意，这仍然无法编译。",
    "_note": ""
  },
  "Now the search function should return only the lines that contain query, and our test should pass. Let’s run the test:": {
    "_translate": "现在 <code>search</code> 函数应该只返回包含 <code>query</code> 的行，\n并且我们的测试应该通过。让我们运行测试：",
    "_note": ""
  },
  "Our test passed, so we know it works!": {
    "_translate": "我们的测试通过了，所以我们知道它有效！",
    "_note": ""
  },
  "To finish this function, we need a way to store the matching lines that we want to return. For that, we can make a mutable vector before the for loop and call the push method to store a line in the vector. After the for loop, we return the vector, as shown in Listing 12-19.": {
    "_translate": "为了完成这个函数，我们需要一种方法来存储我们想要返回的匹配行。为此，我们可以在 <code>for</code> 循环之前创建一个可变向量，并调用 <code>push</code> 方法将 <code>line</code> 存储在向量中。在 <code>for</code> 循环之后，我们返回该向量，如列表 12-19 所示。",
    "_note": ""
  },
  "At this point, we could consider opportunities for refactoring the implementation of the search function while keeping the tests passing to maintain the same functionality. The code in the search function isn’t too bad, but it doesn’t take advantage of some useful features of iterators. We’ll return to this example in Chapter 13, where we’ll explore iterators in detail, and look at how to improve it.": {
    "_translate": "在这一点上，我们可以考虑在保持测试通过以维护相同功能的同时，重构搜索函数的实现的机会。搜索函数中的代码还不错，但没有充分利用迭代器的一些有用特性。我们将在<a href=\"ch13-02-iterators.html\">第13章</a><!-- ignore -->中详细探讨迭代器，并看看如何改进它。",
    "_note": ""
  },
  "Filename: src/lib.rs": {
    "_translate": "<span class=\"filename\">文件名: src/lib.rs</span>",
    "_note": ""
  },
  "Now that the search function is working and tested, we need to call search from our run function. We need to pass the config.query value and the contents that run reads from the file to the search function. Then run will print each line returned from search:": {
    "_translate": "现在 <code>search</code> 函数已经可以工作并且经过了测试，我们需要从 <code>run</code> 函数中调用 <code>search</code>。我们需要将 <code>config.query</code> 值和 <code>run</code> 从文件中读取的 <code>contents</code> 传递给 <code>search</code> 函数。然后 <code>run</code> 将打印从 <code>search</code> 返回的每一行：",
    "_note": ""
  },
  "We’re still using a for loop to return each line from search and print it.": {
    "_translate": "我们仍然使用 <code>for</code> 循环从 <code>search</code> 返回每一行并打印它。",
    "_note": ""
  },
  "Now the entire program should work! Let’s try it out, first with a word that should return exactly one line from the Emily Dickinson poem: frog.": {
    "_translate": "现在整个程序应该可以工作了！让我们先试一下，用一个应该从艾米莉·狄金森的诗中返回恰好一行的词：<em>青蛙</em>。",
    "_note": ""
  },
  "Cool! Now let’s try a word that will match multiple lines, like body:": {
    "_translate": "酷！现在让我们尝试一个可以匹配多行的单词，比如 <em>body</em>：",
    "_note": ""
  },
  "And finally, let’s make sure that we don’t get any lines when we search for a word that isn’t anywhere in the poem, such as monomorphization:": {
    "_translate": "最后，让我们确保在搜索诗中不存在的单词时，比如<em>monomorphization</em>，不会得到任何行：",
    "_note": ""
  },
  "Excellent! We’ve built our own mini version of a classic tool and learned a lot about how to structure applications. We’ve also learned a bit about file input and output, lifetimes, testing, and command line parsing.": {
    "_translate": "优秀！我们构建了自己的迷你版经典工具，并学到了很多关于如何构建应用程序的知识。我们还学到了一些关于文件输入和输出、生命周期、测试和命令行解析的知识。",
    "_note": ""
  },
  "To round out this project, we’ll briefly demonstrate how to work with environment variables and how to print to standard error, both of which are useful when you’re writing command line programs.": {
    "_translate": "为了完善这个项目，我们将简要演示如何使用环境变量以及如何打印到标准错误，这两者在编写命令行程序时都非常有用。",
    "_note": ""
  },
  "Developing the Library’s Functionality with Test Driven Development - The Rust Programming Language": {
    "_translate": "使用测试驱动开发开发库的功能 - 《Rust编程语言》",
    "_note": ""
  }
}