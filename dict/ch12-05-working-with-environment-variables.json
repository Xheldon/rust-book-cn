{
  "Working with Environment Variables": {
    "_translate": "<a class=\"header\" href=\"#working-with-environment-variables\">处理环境变量</a>",
    "_note": ""
  },
  "Writing a Failing Test for the Case-Insensitive search Function": {
    "_translate": "<a class=\"header\" href=\"#writing-a-failing-test-for-the-case-insensitive-search-function\">为不区分大小写的 <code>search</code> 函数编写一个失败的测试</a>",
    "_note": ""
  },
  "We’ll improve minigrep by adding an extra feature: an option for case-insensitive searching that the user can turn on via an environment variable. We could make this feature a command line option and require that users enter it each time they want it to apply, but by instead making it an environment variable, we allow our users to set the environment variable once and have all their searches be case insensitive in that terminal session.": {
    "_translate": "我们将通过添加一个额外的功能来改进<code>minigrep</code>：一个用户可以通过环境变量启用的不区分大小写的搜索选项。我们本可以将此功能设为命令行选项，并要求用户每次使用时都输入，但通过将其设为环境变量，我们允许用户一次性设置环境变量，从而在该终端会话中使所有搜索都不区分大小写。",
    "_note": ""
  },
  "We first add a new search_case_insensitive function that will be called when the environment variable has a value. We’ll continue to follow the TDD process, so the first step is again to write a failing test. We’ll add a new test for the new search_case_insensitive function and rename our old test from one_result to case_sensitive to clarify the differences between the two tests, as shown in Listing 12-20.": {
    "_translate": "我们首先添加一个新的<code>search_case_insensitive</code>函数，当环境变量有值时将调用该函数。我们将继续遵循TDD过程，因此第一步同样是编写一个失败的测试。我们将为新的<code>search_case_insensitive</code>函数添加一个新的测试，并将我们旧的测试从<code>one_result</code>重命名为<code>case_sensitive</code>，以澄清这两个测试之间的区别，如清单12-20所示。",
    "_note": ""
  },
  "Note that we’ve edited the old test’s contents too. We’ve added a new line with the text \"Duct tape.\" using a capital D that shouldn’t match the query \"duct\" when we’re searching in a case-sensitive manner. Changing the old test in this way helps ensure that we don’t accidentally break the case-sensitive search functionality that we’ve already implemented. This test should pass now and should continue to pass as we work on the case-insensitive search.": {
    "_translate": "请注意，我们还编辑了旧测试的 <code>contents</code>。我们添加了一行新的文本 <code>\"Duct tape.\"</code>，使用了大写的 <em>D</em>，这在我们进行区分大小写的搜索时不应该匹配查询 <code>\"duct\"</code>。以这种方式更改旧测试有助于确保我们不会意外破坏已经实现的区分大小写的搜索功能。此测试现在应该通过，并且在我们进行不区分大小写的搜索时应该继续通过。",
    "_note": ""
  },
  "Implementing the search_case_insensitive Function": {
    "_translate": "<a class=\"header\" href=\"#implementing-the-search_case_insensitive-function\">实现 <code>search_case_insensitive</code> 函数</a>",
    "_note": ""
  },
  "The new test for the case-insensitive search uses \"rUsT\" as its query. In the search_case_insensitive function we’re about to add, the query \"rUsT\" should match the line containing \"Rust:\" with a capital R and match the line \"Trust me.\" even though both have different casing from the query. This is our failing test, and it will fail to compile because we haven’t yet defined the search_case_insensitive function. Feel free to add a skeleton implementation that always returns an empty vector, similar to the way we did for the search function in Listing 12-16 to see the test compile and fail.": {
    "_translate": "新的不区分大小写的搜索测试使用 <code>\"rUsT\"</code> 作为查询。在我们即将添加的 <code>search_case_insensitive</code> 函数中，查询 <code>\"rUsT\"</code> 应该匹配包含 <code>\"Rust:\"</code> 的行，其中 <em>R</em> 是大写的，并且应该匹配 <code>\"Trust me.\"</code> 这一行，即使这两行的大小写与查询不同。这是我们的失败测试，它将无法编译，因为我们还没有定义 <code>search_case_insensitive</code> 函数。你可以添加一个总是返回空向量的骨架实现，类似于我们在清单 12-16 中为 <code>search</code> 函数所做的那样，以查看测试编译并失败。",
    "_note": ""
  },
  "The search_case_insensitive function, shown in Listing 12-21, will be almost the same as the search function. The only difference is that we’ll lowercase the query and each line so that whatever the case of the input arguments, they’ll be the same case when we check whether the line contains the query.": {
    "_translate": "<code>search_case_insensitive</code> 函数，如清单 12-21 所示，将几乎与 <code>search</code> 函数相同。唯一的区别是我们将把 <code>query</code> 和每个 <code>line</code> 转换为小写，这样无论输入参数的大小写如何，在检查行是否包含查询时，它们的大小写将相同。",
    "_note": ""
  },
  "First we lowercase the query string and store it in a shadowed variable with the same name. Calling to_lowercase on the query is necessary so that no matter whether the user’s query is \"rust\", \"RUST\", \"Rust\", or \"rUsT\", we’ll treat the query as if it were \"rust\" and be insensitive to the case. While to_lowercase will handle basic Unicode, it won’t be 100% accurate. If we were writing a real application, we’d want to do a bit more work here, but this section is about environment variables, not Unicode, so we’ll leave it at that here.": {
    "_translate": "首先我们将 <code>query</code> 字符串转换为小写，并将其存储在一个同名的阴影变量中。对查询调用 <code>to_lowercase</code> 是必要的，这样无论用户的查询是 <code>\"rust\"</code>、<code>\"RUST\"</code>、<code>\"Rust\"</code> 还是 <code>\"rUsT\"</code>，我们都会将其视为 <code>\"rust\"</code> 并且不区分大小写。虽然 <code>to_lowercase</code> 会处理基本的 Unicode，但它不会 100% 准确。如果我们正在编写一个真实的应用程序，我们在这里需要做更多的工作，但本节是关于环境变量的，而不是 Unicode，所以我们在这里就不再深入了。",
    "_note": ""
  },
  "Next, we add a call to to_lowercase on each line to lowercase all characters. Now that we’ve converted line and query to lowercase, we’ll find matches no matter what the case of the query is.": {
    "_translate": "接下来，我们在每个<code>line</code>上调用<code>to_lowercase</code>方法，将所有字符转换为小写。现在我们已经将<code>line</code>和<code>query</code>转换为小写，无论查询的大小写如何，我们都能找到匹配项。",
    "_note": ""
  },
  "Note that query is now a String rather than a string slice because calling to_lowercase creates new data rather than referencing existing data. Say the query is \"rUsT\", as an example: that string slice doesn’t contain a lowercase u or t for us to use, so we have to allocate a new String containing \"rust\". When we pass query as an argument to the contains method now, we need to add an ampersand because the signature of contains is defined to take a string slice.": {
    "_translate": "注意，<code>query</code> 现在是一个 <code>String</code> 而不是一个字符串切片，因为调用 <code>to_lowercase</code> 会创建新数据而不是引用现有数据。以 <code>\"rUsT\"</code> 为例：该字符串切片中不包含小写的 <code>u</code> 或 <code>t</code> 供我们使用，所以我们必须分配一个包含 <code>\"rust\"</code> 的新 <code>String</code>。当我们现在将 <code>query</code> 作为参数传递给 <code>contains</code> 方法时，我们需要添加一个取地址符，因为 <code>contains</code> 的签名定义为接受一个字符串切片。",
    "_note": ""
  },
  "Let’s see if this implementation passes the tests:": {
    "_translate": "让我们看看这个实现是否能通过测试：",
    "_note": ""
  },
  "Filename: src/lib.rs": {
    "_translate": "<span class=\"filename\">文件名: src/lib.rs</span>",
    "_note": ""
  },
  "Great! They passed. Now, let’s call the new search_case_insensitive function from the run function. First we’ll add a configuration option to the Config struct to switch between case-sensitive and case-insensitive search. Adding this field will cause compiler errors because we aren’t initializing this field anywhere yet:": {
    "_translate": "很好！它们通过了。现在，让我们从 <code>run</code> 函数中调用新的 <code>search_case_insensitive</code> 函数。首先我们将在 <code>Config</code> 结构体中添加一个配置选项，以在区分大小写和不区分大小写的搜索之间切换。添加此字段会导致编译错误，因为我们还没有在任何地方初始化此字段：",
    "_note": ""
  },
  "Finally, we need to check for the environment variable. The functions for working with environment variables are in the env module in the standard library, so we bring that module into scope at the top of src/lib.rs. Then we’ll use the var function from the env module to check to see if any value has been set for an environment variable named IGNORE_CASE, as shown in Listing 12-23.": {
    "_translate": "最后，我们需要检查环境变量。处理环境变量的函数在标准库的<code>env</code>模块中，因此我们在<em>src/lib.rs</em>的顶部将该模块引入作用域。然后我们将使用<code>env</code>模块中的<code>var</code>函数来检查是否为名为<code>IGNORE_CASE</code>的环境变量设置了任何值，如清单12-23所示。",
    "_note": ""
  },
  "We added the ignore_case field that holds a Boolean. Next, we need the run function to check the ignore_case field’s value and use that to decide whether to call the search function or the search_case_insensitive function, as shown in Listing 12-22. This still won’t compile yet.": {
    "_translate": "我们添加了持有布尔值的<code>ignore_case</code>字段。接下来，我们需要<code>run</code>函数检查<code>ignore_case</code>字段的值，并使用该值来决定调用<code>search</code>函数还是<code>search_case_insensitive</code>函数，如列表12-22所示。这仍然无法编译。",
    "_note": ""
  },
  "Here, we create a new variable, ignore_case. To set its value, we call the env::var function and pass it the name of the IGNORE_CASE environment variable. The env::var function returns a Result that will be the successful Ok variant that contains the value of the environment variable if the environment variable is set to any value. It will return the Err variant if the environment variable is not set.": {
    "_translate": "这里，我们创建了一个新的变量，<code>ignore_case</code>。为了设置它的值，我们调用<code>env::var</code>函数并传递<code>IGNORE_CASE</code>环境变量的名称。<code>env::var</code>函数返回一个<code>Result</code>，如果环境变量被设置为任何值，它将是包含环境变量值的成功<code>Ok</code>变体。如果环境变量未被设置，它将返回<code>Err</code>变体。",
    "_note": ""
  },
  "We’re using the is_ok method on the Result to check whether the environment variable is set, which means the program should do a case-insensitive search. If the IGNORE_CASE environment variable isn’t set to anything, is_ok will return false and the program will perform a case-sensitive search. We don’t care about the value of the environment variable, just whether it’s set or unset, so we’re checking is_ok rather than using unwrap, expect, or any of the other methods we’ve seen on Result.": {
    "_translate": "我们使用 <code>is_ok</code> 方法在 <code>Result</code> 上检查环境变量是否已设置，这意味着程序应该执行不区分大小写的搜索。如果 <code>IGNORE_CASE</code> 环境变量未设置为任何值，<code>is_ok</code> 将返回 <code>false</code>，程序将执行区分大小写的搜索。我们不关心环境变量的 <em>值</em>，只关心它是否已设置或未设置，因此我们检查 <code>is_ok</code> 而不是使用 <code>unwrap</code>、<code>expect</code> 或我们在 <code>Result</code> 上见过的任何其他方法。",
    "_note": ""
  },
  "We pass the value in the ignore_case variable to the Config instance so the run function can read that value and decide whether to call search_case_insensitive or search, as we implemented in Listing 12-22.": {
    "_translate": "我们将 <code>ignore_case</code> 变量中的值传递给 <code>Config</code> 实例，以便 <code>run</code> 函数可以读取该值并决定是调用 <code>search_case_insensitive</code> 还是 <code>search</code>，如我们在清单 12-22 中实现的那样。",
    "_note": ""
  },
  "Let’s give it a try! First we’ll run our program without the environment variable set and with the query to, which should match any line that contains the word to in all lowercase:": {
    "_translate": "让我们试一试！首先我们将在没有设置环境变量的情况下运行我们的程序，并使用查询 <code>to</code>，这应该匹配包含全部小写的单词 <em>to</em> 的任何行：",
    "_note": ""
  },
  "If you’re using PowerShell, you will need to set the environment variable and run the program as separate commands:": {
    "_translate": "如果您使用的是 PowerShell，您需要将环境变量设置和运行程序作为单独的命令：",
    "_note": ""
  },
  "Looks like that still works! Now let’s run the program with IGNORE_CASE set to 1 but with the same query to:": {
    "_translate": "看起来仍然有效！现在让我们用 <code>IGNORE_CASE</code> 设置为 <code>1</code> 但使用相同的查询 <em>to</em> 来运行程序：",
    "_note": ""
  },
  "We should get lines that contain to that might have uppercase letters:": {
    "_translate": "我们应该获取包含 <em>to</em> 的行，这些行可能包含大写字母：",
    "_note": ""
  },
  "This will make IGNORE_CASE persist for the remainder of your shell session. It can be unset with the Remove-Item cmdlet:": {
    "_translate": "这将使 <code>IGNORE_CASE</code> 在您当前的 shell 会话中持续生效。\n可以使用 <code>Remove-Item</code> cmdlet 取消设置：",
    "_note": ""
  },
  "Excellent, we also got lines containing To! Our minigrep program can now do case-insensitive searching controlled by an environment variable. Now you know how to manage options set using either command line arguments or environment variables.": {
    "_translate": "很好，我们也得到了包含<em>To</em>的行！我们的<code>minigrep</code>程序现在可以由环境变量控制进行不区分大小写的搜索。现在你知道如何管理通过命令行参数或环境变量设置的选项。",
    "_note": ""
  },
  "The std::env module contains many more useful features for dealing with environment variables: check out its documentation to see what is available.": {
    "_translate": "<code>std::env</code> 模块包含许多用于处理环境变量的有用功能：请查看其文档以了解可用的功能。",
    "_note": ""
  },
  "Some programs allow arguments and environment variables for the same configuration. In those cases, the programs decide that one or the other takes precedence. For another exercise on your own, try controlling case sensitivity through either a command line argument or an environment variable. Decide whether the command line argument or the environment variable should take precedence if the program is run with one set to case sensitive and one set to ignore case.": {
    "_translate": "一些程序允许使用参数 <em>和</em> 环境变量进行相同的配置。在这些情况下，程序决定哪一个优先。对于另一个你自己练习，尝试通过命令行参数或环境变量控制大小写敏感性。决定如果程序运行时一个设置为大小写敏感而另一个设置为忽略大小写，命令行参数或环境变量哪一个应该优先。",
    "_note": ""
  },
  "Working with Environment Variables - The Rust Programming Language": {
    "_translate": "使用环境变量 - 《Rust编程语言》",
    "_note": ""
  },
  "First we lowercase the query string and store it in a new variable with the same name, shadowing the original. Calling to_lowercase on the query is necessary so that no matter whether the user’s query is \"rust\", \"RUST\", \"Rust\", or \"rUsT\", we’ll treat the query as if it were \"rust\" and be insensitive to the case. While to_lowercase will handle basic Unicode, it won’t be 100% accurate. If we were writing a real application, we’d want to do a bit more work here, but this section is about environment variables, not Unicode, so we’ll leave it at that here.": {
    "_translate": "首先我们将 <code>query</code> 字符串转换为小写，并将其存储在一个同名的新变量中，覆盖原始变量。对查询调用 <code>to_lowercase</code> 是必要的，这样无论用户的查询是 <code>\"rust\"</code>、<code>\"RUST\"</code>、<code>\"Rust\"</code> 还是 <code>\"rUsT\"</code>，我们都会将其视为 <code>\"rust\"</code> 并忽略大小写。虽然 <code>to_lowercase</code> 可以处理基本的 Unicode，但它不会 100% 准确。如果我们正在编写一个真实的应用程序，我们在这里需要做更多的工作，但本节是关于环境变量的，而不是 Unicode，所以我们在这里就不再深入了。",
    "_note": ""
  }
}