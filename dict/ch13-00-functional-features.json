{
  "Functional Language Features: Iterators and Closures": {
    "_translate": "<a class=\"header\" href=\"#functional-language-features-iterators-and-closures\">函数式语言特性：迭代器和闭包</a>",
    "_note": ""
  },
  "Rust’s design has taken inspiration from many existing languages and techniques, and one significant influence is functional programming. Programming in a functional style often includes using functions as values by passing them in arguments, returning them from other functions, assigning them to variables for later execution, and so forth.": {
    "_translate": "Rust 的设计受到了许多现有语言和技术的启发，其中一个重要的影响是 <em>函数式编程</em>。以函数式风格编程通常包括将函数用作值，通过传递它们作为参数、从其他函数返回它们、将它们分配给变量以供稍后执行等。",
    "_note": ""
  },
  "More specifically, we’ll cover:": {
    "_translate": "更具体地说，我们将涵盖：",
    "_note": ""
  },
  "In this chapter, we won’t debate the issue of what functional programming is or isn’t but will instead discuss some features of Rust that are similar to features in many languages often referred to as functional.": {
    "_translate": "在本章中，我们不会讨论什么是函数式编程或不是函数式编程，而是将讨论 Rust 中的一些与许多常被称为函数式语言的特性相似的特性。",
    "_note": ""
  },
  "We’ve already covered some other Rust features, such as pattern matching and enums, that are also influenced by the functional style. Because mastering closures and iterators is an important part of writing idiomatic, fast Rust code, we’ll devote this entire chapter to them.": {
    "_translate": "我们已经介绍了一些其他受函数式风格影响的Rust特性，如模式匹配和枚举。因为掌握闭包和迭代器是编写惯用、快速的Rust代码的重要部分，我们将整个这一章 devoted to them.",
    "_note": ""
  },
  "Functional Language Features: Iterators and Closures - The Rust Programming Language": {
    "_translate": "功能语言特性：迭代器和闭包 - 《Rust编程语言》",
    "_note": ""
  },
  "Closures, a function-like construct you can store in a variable": {
    "_translate": "<em>闭包</em>，一种可以存储在变量中的类似函数的结构",
    "_note": ""
  },
  "Iterators, a way of processing a series of elements": {
    "_translate": "<em>迭代器</em>，一种处理一系列元素的方式。",
    "_note": ""
  },
  "How to use closures and iterators to improve the I/O project in Chapter 12": {
    "_translate": "如何使用闭包和迭代器来改进第12章的I/O项目",
    "_note": ""
  },
  "The performance of closures and iterators (Spoiler alert: they’re faster than you might think!)": {
    "_translate": "闭包和迭代器的性能（剧透警告：它们可能比你想象的要快！）",
    "_note": ""
  },
  "The performance of closures and iterators (spoiler alert: they’re faster than you might think!)": {
    "_translate": "闭包和迭代器的性能（剧透警告：它们可能比你想象的要快！）",
    "_note": ""
  }
}