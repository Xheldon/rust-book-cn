{
  "Comparing Performance: Loops vs. Iterators": {
    "_translate": "<a class=\"header\" href=\"#comparing-performance-loops-vs-iterators\">性能比较：循环与迭代器</a>",
    "_note": ""
  },
  "To determine whether to use loops or iterators, you need to know which implementation is faster: the version of the search function with an explicit for loop or the version with iterators.": {
    "_translate": "要确定是否使用循环或迭代器，您需要知道哪个实现更快：<code>search</code> 函数的显式 <code>for</code> 循环版本还是迭代器版本。",
    "_note": ""
  },
  "The iterator version was slightly faster! We won’t explain the benchmark code here, because the point is not to prove that the two versions are equivalent but to get a general sense of how these two implementations compare performance-wise.": {
    "_translate": "迭代器版本稍微快一些！我们不会在这里解释基准测试代码，因为重点不是证明这两个版本是等价的，而是大致了解这两种实现的性能比较。",
    "_note": ""
  },
  "We ran a benchmark by loading the entire contents of The Adventures of Sherlock Holmes by Sir Arthur Conan Doyle into a String and looking for the word the in the contents. Here are the results of the benchmark on the version of search using the for loop and the version using iterators:": {
    "_translate": "我们通过将阿瑟·柯南·道尔爵士的《福尔摩斯探案集》的全部内容加载到一个<code>String</code>中，并在内容中查找单词<em>the</em>来进行了一次基准测试。以下是使用<code>for</code>循环和使用迭代器的<code>search</code>版本的基准测试结果：",
    "_note": ""
  },
  "In general, C++ implementations obey the zero-overhead principle: What you don’t use, you don’t pay for. And further: What you do use, you couldn’t hand code any better.": {
    "_translate": "通常，C++ 实现遵循零开销原则：你不用的，你就不需要为此付费。而且：你所使用的，你无法手动编写得更好。",
    "_note": ""
  },
  "For a more comprehensive benchmark, you should check using various texts of various sizes as the contents, different words and words of different lengths as the query, and all kinds of other variations. The point is this: iterators, although a high-level abstraction, get compiled down to roughly the same code as if you’d written the lower-level code yourself. Iterators are one of Rust’s zero-cost abstractions, by which we mean using the abstraction imposes no additional runtime overhead. This is analogous to how Bjarne Stroustrup, the original designer and implementor of C++, defines zero-overhead in “Foundations of C++” (2012):": {
    "_translate": "为了进行更全面的基准测试，你应该使用各种大小的文本作为<code>contents</code>，不同的单词和不同长度的单词作为<code>query</code>，以及其他各种变化。重点是：迭代器虽然是一种高级抽象，但编译后的代码大致与你自己编写低级代码的结果相同。迭代器是Rust的<em>零成本抽象</em>之一，我们的意思是使用这种抽象不会增加任何额外的运行时开销。这类似于C++的原始设计者和实现者Bjarne Stroustrup在“C++的基础”（2012年）中定义的<em>零开销</em>：",
    "_note": ""
  },
  "As another example, the following code is taken from an audio decoder. The decoding algorithm uses the linear prediction mathematical operation to estimate future values based on a linear function of the previous samples. This code uses an iterator chain to do some math on three variables in scope: a buffer slice of data, an array of 12 coefficients, and an amount by which to shift data in qlp_shift. We’ve declared the variables within this example but not given them any values; although this code doesn’t have much meaning outside of its context, it’s still a concise, real-world example of how Rust translates high-level ideas to low-level code.": {
    "_translate": "作为另一个例子，以下代码来自一个音频解码器。解码算法使用线性预测数学运算根据先前样本的线性函数来估计未来的值。这段代码使用迭代器链对作用域内的三个变量进行一些数学运算：一个<code>buffer</code>数据切片，一个包含12个<code>coefficients</code>的数组，以及一个用于在<code>qlp_shift</code>中移动数据的量。我们在示例中声明了这些变量，但没有赋予它们任何值；虽然这段代码在其上下文之外没有太多意义，但它仍然是一个简洁的、现实世界的例子，展示了Rust如何将高层次的概念转化为低层次的代码。",
    "_note": ""
  },
  "To calculate the value of prediction, this code iterates through each of the 12 values in coefficients and uses the zip method to pair the coefficient values with the previous 12 values in buffer. Then, for each pair, we multiply the values together, sum all the results, and shift the bits in the sum qlp_shift bits to the right.": {
    "_translate": "为了计算 <code>prediction</code> 的值，此代码遍历 <code>coefficients</code> 中的每个 12 个值，并使用 <code>zip</code> 方法将系数值与 <code>buffer</code> 中的前 12 个值配对。然后，对于每对值，我们将它们相乘，将所有结果相加，并将和右移 <code>qlp_shift</code> 位。",
    "_note": ""
  },
  "Calculations in applications like audio decoders often prioritize performance most highly. Here, we’re creating an iterator, using two adapters, and then consuming the value. What assembly code would this Rust code compile to? Well, as of this writing, it compiles down to the same assembly you’d write by hand. There’s no loop at all corresponding to the iteration over the values in coefficients: Rust knows that there are 12 iterations, so it “unrolls” the loop. Unrolling is an optimization that removes the overhead of the loop controlling code and instead generates repetitive code for each iteration of the loop.": {
    "_translate": "在像音频解码器这样的应用程序中的计算通常最优先考虑性能。在这里，我们创建了一个迭代器，使用了两个适配器，然后消费了值。这段 Rust 代码会编译成什么样的汇编代码？嗯，截至本文撰写时，它编译成与你手工编写的相同汇编代码。根本没有与 <code>coefficients</code> 中的值迭代相对应的循环：Rust 知道有 12 次迭代，所以它“展开”了循环。<em>展开</em>是一种优化，它消除了循环控制代码的开销，而是为循环的每次迭代生成重复的代码。",
    "_note": ""
  },
  "All of the coefficients get stored in registers, which means accessing the values is very fast. There are no bounds checks on the array access at runtime. All these optimizations that Rust is able to apply make the resulting code extremely efficient. Now that you know this, you can use iterators and closures without fear! They make code seem like it’s higher level but don’t impose a runtime performance penalty for doing so.": {
    "_translate": "所有系数都存储在寄存器中，这意味着访问这些值非常快。在运行时对数组访问没有边界检查。所有这些 Rust 能够应用的优化使生成的代码极其高效。现在你了解了这一点，可以放心地使用迭代器和闭包！它们使代码看起来像是更高层次的，但并不会因此而带来运行时性能损失。",
    "_note": ""
  },
  "Summary": {
    "_translate": "<a class=\"header\" href=\"#summary\">摘要</a>",
    "_note": ""
  },
  "Now that we’ve improved the expressiveness of our I/O project, let’s look at some more features of cargo that will help us share the project with the world.": {
    "_translate": "现在我们已经提高了 I/O 项目的表达能力，让我们来看看 <code>cargo</code> 的一些更多功能，这些功能将帮助我们与世界分享该项目。",
    "_note": ""
  },
  "Closures and iterators are Rust features inspired by functional programming language ideas. They contribute to Rust’s capability to clearly express high-level ideas at low-level performance. The implementations of closures and iterators are such that runtime performance is not affected. This is part of Rust’s goal to strive to provide zero-cost abstractions.": {
    "_translate": "闭包和迭代器是受函数式编程语言思想启发的 Rust 特性。它们有助于 Rust 清晰地表达高层次的想法，同时保持低层次的性能。闭包和迭代器的实现方式不会影响运行时性能。这是 Rust 力求提供零成本抽象目标的一部分。",
    "_note": ""
  },
  "Comparing Performance: Loops vs. Iterators - The Rust Programming Language": {
    "_translate": "比较性能：循环与迭代器 - 《Rust 编程语言》",
    "_note": ""
  }
}