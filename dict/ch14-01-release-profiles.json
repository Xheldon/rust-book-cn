{
  "Customizing Builds with Release Profiles": {
    "_translate": "<a class=\"header\" href=\"#customizing-builds-with-release-profiles\">使用发布配置自定义构建</a>",
    "_note": ""
  },
  "In Rust, release profiles are predefined and customizable profiles with different configurations that allow a programmer to have more control over various options for compiling code. Each profile is configured independently of the others.": {
    "_translate": "在 Rust 中，<em>发布配置</em>是预定义且可自定义的配置文件，具有不同的配置，允许程序员对编译代码的各种选项拥有更多控制。每个配置文件都是独立配置的。",
    "_note": ""
  },
  "These profile names might be familiar from the output of your builds:": {
    "_translate": "这些配置文件名称可能在你的构建输出中很熟悉：",
    "_note": ""
  },
  "Cargo has two main profiles: the dev profile Cargo uses when you run cargo build and the release profile Cargo uses when you run cargo build --release. The dev profile is defined with good defaults for development, and the release profile has good defaults for release builds.": {
    "_translate": "Cargo 有两个主要配置文件：当您运行 <code>cargo build</code> 时 Cargo 使用的 <code>dev</code> 配置文件，以及当您运行 <code>cargo build --release</code> 时 Cargo 使用的 <code>release</code> 配置文件。<code>dev</code> 配置文件定义了开发的良好默认值，而 <code>release</code> 配置文件则为发布构建提供了良好的默认值。",
    "_note": ""
  },
  "The dev and release are these different profiles used by the compiler.": {
    "_translate": "<code>dev</code> 和 <code>release</code> 是编译器使用的不同配置文件。",
    "_note": ""
  },
  "Filename: Cargo.toml": {
    "_translate": "<span class=\"filename\">文件名: Cargo.toml</span>",
    "_note": ""
  },
  "Cargo has default settings for each of the profiles that apply when you haven’t explicitly added any [profile.*] sections in the project’s Cargo.toml file. By adding [profile.*] sections for any profile you want to customize, you override any subset of the default settings. For example, here are the default values for the opt-level setting for the dev and release profiles:": {
    "_translate": "Cargo 为每个配置文件提供了默认设置，当您没有在项目的 <em>Cargo.toml</em> 文件中显式添加任何 <code>[profile.*]</code> 部分时，这些设置将生效。通过为任何您想要自定义的配置文件添加 <code>[profile.*]</code> 部分，您可以覆盖默认设置的任何子集。例如，这是 <code>dev</code> 和 <code>release</code> 配置文件的 <code>opt-level</code> 设置的默认值：",
    "_note": ""
  },
  "You can override a default setting by adding a different value for it in Cargo.toml. For example, if we want to use optimization level 1 in the development profile, we can add these two lines to our project’s Cargo.toml file:": {
    "_translate": "您可以通过在 <em>Cargo.toml</em> 中添加不同的值来覆盖默认设置。例如，如果我们要在开发配置文件中使用优化级别 1，可以在项目的 <em>Cargo.toml</em> 文件中添加以下两行：",
    "_note": ""
  },
  "The opt-level setting controls the number of optimizations Rust will apply to your code, with a range of 0 to 3. Applying more optimizations extends compiling time, so if you’re in development and compiling your code often, you’ll want fewer optimizations to compile faster even if the resulting code runs slower. The default opt-level for dev is therefore 0. When you’re ready to release your code, it’s best to spend more time compiling. You’ll only compile in release mode once, but you’ll run the compiled program many times, so release mode trades longer compile time for code that runs faster. That is why the default opt-level for the release profile is 3.": {
    "_translate": "<code>opt-level</code> 设置控制 Rust 将应用到您的代码的优化数量，范围从 0 到 3。应用更多的优化会延长编译时间，因此如果您正在开发中并且经常编译代码，您会希望减少优化以更快地编译，即使生成的代码运行速度较慢。因此，<code>dev</code> 的默认 <code>opt-level</code> 是 <code>0</code>。当您准备发布代码时，最好花更多时间编译。您只会一次在发布模式下编译，但您会多次运行编译后的程序，因此发布模式通过更长的编译时间换取运行更快的代码。这就是为什么 <code>release</code> 配置文件的默认 <code>opt-level</code> 是 <code>3</code>。",
    "_note": ""
  },
  "For the full list of configuration options and defaults for each profile, see Cargo’s documentation.": {
    "_translate": "有关每个配置文件的完整配置选项和默认值列表，请参阅<a href=\"https://doc.rust-lang.org/cargo/reference/profiles.html\">Cargo的文档</a>。",
    "_note": ""
  },
  "This code overrides the default setting of 0. Now when we run cargo build, Cargo will use the defaults for the dev profile plus our customization to opt-level. Because we set opt-level to 1, Cargo will apply more optimizations than the default, but not as many as in a release build.": {
    "_translate": "这段代码覆盖了默认设置 <code>0</code>。现在当我们运行 <code>cargo build</code> 时，\nCargo 将使用 <code>dev</code> 配置文件的默认设置加上我们对 <code>opt-level</code> 的自定义。\n因为我们把 <code>opt-level</code> 设置为 <code>1</code>，Cargo 将应用比默认更多的优化，但不如发布构建中的多。",
    "_note": ""
  },
  "Customizing Builds with Release Profiles - The Rust Programming Language": {
    "_translate": "自定义构建使用发布配置文件 - 《Rust编程语言》",
    "_note": ""
  },
  "The opt-level setting controls the number of optimizations Rust will apply to your code, with a range of 0 to 3. Applying more optimizations extends compiling time, so if you’re in development and compiling your code often, you’ll want fewer optimizations to compile faster even if the resultant code runs slower. The default opt-level for dev is therefore 0. When you’re ready to release your code, it’s best to spend more time compiling. You’ll only compile in release mode once, but you’ll run the compiled program many times, so release mode trades longer compile time for code that runs faster. That is why the default opt-level for the release profile is 3.": {
    "_translate": "<code>opt-level</code> 设置控制 Rust 将应用到你的代码的优化数量，范围从 0 到 3。应用更多的优化会延长编译时间，因此如果你正在开发中并且经常编译你的代码，你希望有更少的优化以更快地编译，即使生成的代码运行得更慢。因此，<code>dev</code> 的默认 <code>opt-level</code> 是 <code>0</code>。当你准备发布你的代码时，最好花更多时间编译。你只会一次在发布模式下编译，但你会多次运行编译后的程序，所以发布模式通过更长的编译时间换取运行更快的代码。这就是为什么 <code>release</code> 配置文件的默认 <code>opt-level</code> 是 <code>3</code>。",
    "_note": ""
  },
  "Cargo has two main profiles: the dev profile Cargo uses when you run cargo build, and the release profile Cargo uses when you run cargo build --release. The dev profile is defined with good defaults for development, and the release profile has good defaults for release builds.": {
    "_translate": "Cargo 有两个主要配置文件：当你运行 <code>cargo build</code> 时 Cargo 使用的 <code>dev</code> 配置文件，以及当你运行 <code>cargo build --release</code> 时 Cargo 使用的 <code>release</code> 配置文件。<code>dev</code> 配置文件定义了开发时的良好默认设置，而 <code>release</code> 配置文件则为发布构建提供了良好的默认设置。",
    "_note": ""
  }
}