{
  "Publishing a Crate to Crates.io": {
    "_translate": "<a class=\"header\" href=\"#publishing-a-crate-to-cratesio\">将Crate发布到Crates.io</a>",
    "_note": ""
  },
  "Rust and Cargo have features that make your published package easier for people to find and use. We’ll talk about some of these features next and then explain how to publish a package.": {
    "_translate": "Rust 和 Cargo 拥有使您的发布包更容易被人发现和使用的功能。我们接下来将讨论其中的一些功能，然后解释如何发布一个包。",
    "_note": ""
  },
  "We’ve used packages from crates.io as dependencies of our project, but you can also share your code with other people by publishing your own packages. The crate registry at crates.io distributes the source code of your packages, so it primarily hosts code that is open source.": {
    "_translate": "我们已经使用了来自<a href=\"https://crates.io/\">crates.io</a><!-- ignore -->的包作为我们项目的依赖，但你也可以通过发布自己的包来与他人共享代码。<a href=\"https://crates.io/\">crates.io</a><!-- ignore -->的包注册表分发你的包的源代码，因此它主要托管开源代码。",
    "_note": ""
  },
  "Making Useful Documentation Comments": {
    "_translate": "<a class=\"header\" href=\"#making-useful-documentation-comments\">编写有用的文档注释</a>",
    "_note": ""
  },
  "Documentation comments use three slashes, ///, instead of two and support Markdown notation for formatting the text. Place documentation comments just before the item they’re documenting. Listing 14-1 shows documentation comments for an add_one function in a crate named my_crate.": {
    "_translate": "文档注释使用三个斜杠，<code>///</code>，而不是两个，并支持使用 Markdown 标记来格式化文本。将文档注释放在它们所描述的项之前。列表 14-1 显示了在名为 <code>my_crate</code> 的 crate 中的 <code>add_one</code> 函数的文档注释。",
    "_note": ""
  },
  "Accurately documenting your packages will help other users know how and when to use them, so it’s worth investing the time to write documentation. In Chapter 3, we discussed how to comment Rust code using two slashes, //. Rust also has a particular kind of comment for documentation, known conveniently as a documentation comment, that will generate HTML documentation. The HTML displays the contents of documentation comments for public API items intended for programmers interested in knowing how to use your crate as opposed to how your crate is implemented.": {
    "_translate": "准确地记录你的包将帮助其他用户知道如何以及何时使用它们，因此值得花时间编写文档。在第 3 章中，我们讨论了如何使用两个斜杠 <code>//</code> 来注释 Rust 代码。Rust 还有一种特别的注释用于文档，方便地称为 <em>文档注释</em>，它将生成 HTML 文档。HTML 显示了文档注释中公共 API 项的内容，这些内容是为那些对如何 <em>使用</em> 你的 crate 感兴趣的程序员准备的，而不是对你的 crate 是如何 <em>实现</em> 的感兴趣。",
    "_note": ""
  },
  "Here, we give a description of what the add_one function does, start a section with the heading Examples, and then provide code that demonstrates how to use the add_one function. We can generate the HTML documentation from this documentation comment by running cargo doc. This command runs the rustdoc tool distributed with Rust and puts the generated HTML documentation in the target/doc directory.": {
    "_translate": "这里，我们描述了 <code>add_one</code> 函数的作用，开始一个标题为 <code>Examples</code> 的部分，然后提供演示如何使用 <code>add_one</code> 函数的代码。我们可以通过运行 <code>cargo doc</code> 从这个文档注释生成 HTML 文档。此命令运行随 Rust 分发的 <code>rustdoc</code> 工具，并将生成的 HTML 文档放在 <em>target/doc</em> 目录中。",
    "_note": ""
  },
  "For convenience, running cargo doc --open will build the HTML for your current crate’s documentation (as well as the documentation for all of your crate’s dependencies) and open the result in a web browser. Navigate to the add_one function and you’ll see how the text in the documentation comments is rendered, as shown in Figure 14-1:": {
    "_translate": "为了方便起见，运行 <code>cargo doc --open</code> 将为您的当前 crate 的文档（以及您的所有 crate 依赖项的文档）构建 HTML，并在网页浏览器中打开结果。导航到 <code>add_one</code> 函数，您将看到文档注释中的文本是如何呈现的，如图 14-1 所示：",
    "_note": ""
  },
  "Figure 14-1: HTML documentation for the add_one function": {
    "_translate": "<span class=\"caption\">图14-1：HTML 文档中的 <code>add_one</code> 函数</span>",
    "_note": ""
  },
  "Most documentation comments don’t need all of these sections, but this is a good checklist to remind you of the aspects of your code users will be interested in knowing about.": {
    "_translate": "大多数文档注释并不需要所有这些部分，但这是一个很好的检查列表，可以提醒你用户会对你的代码的哪些方面感兴趣。",
    "_note": ""
  },
  "We used the # Examples Markdown heading in Listing 14-1 to create a section in the HTML with the title “Examples.” Here are some other sections that crate authors commonly use in their documentation:": {
    "_translate": "我们在清单 14-1 中使用了 <code># Examples</code> Markdown 标题来创建一个标题为“Examples”的 HTML 部分。这里有一些其他部分，crate 作者通常会在他们的文档中使用：",
    "_note": ""
  },
  "Now if we change either the function or the example so the assert_eq! in the example panics and run cargo test again, we’ll see that the doc tests catch that the example and the code are out of sync with each other!": {
    "_translate": "现在，如果我们更改函数或示例，使示例中的 <code>assert_eq!</code> 触发 panic 并再次运行 <code>cargo test</code>，我们会看到文档测试捕获了示例和代码不同步的问题！",
    "_note": ""
  },
  "Adding example code blocks in your documentation comments can help demonstrate how to use your library, and doing so has an additional bonus: running cargo test will run the code examples in your documentation as tests! Nothing is better than documentation with examples. But nothing is worse than examples that don’t work because the code has changed since the documentation was written. If we run cargo test with the documentation for the add_one function from Listing 14-1, we will see a section in the test results like this:": {
    "_translate": "在文档注释中添加示例代码块可以帮助演示如何使用您的库，这样做还有一个额外的好处：运行<code>cargo test</code>会将文档中的代码示例作为测试运行！没有什么比带有示例的文档更好的了。但没有什么比那些因为代码自文档编写以来已更改而不工作的示例更糟糕的了。如果我们使用第14-1列表中的<code>add_one</code>函数的文档运行<code>cargo test</code>，我们将在测试结果中看到如下部分：",
    "_note": ""
  },
  "The style of doc comment //! adds documentation to the item that contains the comments rather than to the items following the comments. We typically use these doc comments inside the crate root file (src/lib.rs by convention) or inside a module to document the crate or the module as a whole.": {
    "_translate": "文档注释风格 <code>//!</code> 会将文档添加到包含注释的项中，而不是添加到注释之后的项中。我们通常在 crate 根文件（按惯例为 <em>src/lib.rs</em>）或模块内部使用这些文档注释，以记录整个 crate 或模块。",
    "_note": ""
  },
  "For example, to add documentation that describes the purpose of the my_crate crate that contains the add_one function, we add documentation comments that start with //! to the beginning of the src/lib.rs file, as shown in Listing 14-2:": {
    "_translate": "例如，要添加描述包含 <code>add_one</code> 函数的 <code>my_crate</code> crate 目的的文档，我们在 <em>src/lib.rs</em> 文件的开头添加以 <code>//!</code> 开头的文档注释，如清单 14-2 所示：",
    "_note": ""
  },
  "When we run cargo doc --open, these comments will display on the front page of the documentation for my_crate above the list of public items in the crate, as shown in Figure 14-2:": {
    "_translate": "当我们运行<code>cargo doc --open</code>时，这些注释将显示在<code>my_crate</code>文档的首页上，在crate的公共项目列表上方，如图14-2所示：",
    "_note": ""
  },
  "Figure 14-2: Rendered documentation for my_crate, including the comment describing the crate as a whole": {
    "_translate": "<span class=\"caption\">图14-2: <code>my_crate</code> 的渲染文档，包括描述整个 crate 的注释</span>",
    "_note": ""
  },
  "Notice there isn’t any code after the last line that begins with //!. Because we started the comments with //! instead of ///, we’re documenting the item that contains this comment rather than an item that follows this comment. In this case, that item is the src/lib.rs file, which is the crate root. These comments describe the entire crate.": {
    "_translate": "注意，在以 <code>//!</code> 开头的最后一行之后没有任何代码。因为\n我们用 <code>//!</code> 而不是 <code>///</code> 开始了注释，所以我们正在为包含此注释的项编写文档，而不是为此注释之后的项编写文档。在\n这种情况下，该项是 <em>src/lib.rs</em> 文件，它是 crate 根。这些\n注释描述了整个 crate。",
    "_note": ""
  },
  "Documentation comments within items are useful for describing crates and modules especially. Use them to explain the overall purpose of the container to help your users understand the crate’s organization.": {
    "_translate": "文档注释在项内非常有用，特别是用于描述 crate 和模块。使用它们来解释容器的总体目的，以帮助用户理解 crate 的组织结构。",
    "_note": ""
  },
  "The structure of your public API is a major consideration when publishing a crate. People who use your crate are less familiar with the structure than you are and might have difficulty finding the pieces they want to use if your crate has a large module hierarchy.": {
    "_translate": "发布 crate 时，您的公共 API 的结构是一个重要的考虑因素。使用您的 crate 的人对结构的熟悉程度不如您，如果您的 crate 拥有大型模块层次结构，他们可能会难以找到他们想要使用的部分。",
    "_note": ""
  },
  "Exporting a Convenient Public API with pub use": {
    "_translate": "<a class=\"header\" href=\"#exporting-a-convenient-public-api-with-pub-use\">使用 <code>pub use</code> 导出方便的公共 API</a>",
    "_note": ""
  },
  "The good news is that if the structure isn’t convenient for others to use from another library, you don’t have to rearrange your internal organization: instead, you can re-export items to make a public structure that’s different from your private structure by using pub use. Re-exporting takes a public item in one location and makes it public in another location, as if it were defined in the other location instead.": {
    "_translate": "好消息是，如果该结构<em>不</em>便于其他库使用，您不必重新安排内部组织：相反，您可以使用<code>pub use</code>重新导出项目，以创建一个与您的私有结构不同的公共结构。重新导出会将一个位置的公共项目在另一个位置也设为公共，就像它是在另一个位置定义的一样。",
    "_note": ""
  },
  "In Chapter 7, we covered how to make items public using the pub keyword, and bring items into a scope with the use keyword. However, the structure that makes sense to you while you’re developing a crate might not be very convenient for your users. You might want to organize your structs in a hierarchy containing multiple levels, but then people who want to use a type you’ve defined deep in the hierarchy might have trouble finding out that type exists. They might also be annoyed at having to enter use my_crate::some_module::another_module::UsefulType; rather than use my_crate::UsefulType;.": {
    "_translate": "在第 7 章中，我们介绍了如何使用 <code>pub</code> 关键字使项目公开，以及如何使用 <code>use</code> 关键字将项目引入作用域。然而，你在开发一个 crate 时觉得合理的结构可能对你的用户来说并不方便。你可能希望将你的结构组织成包含多个层次的层次结构，但这样可能会使想要使用你定义的深层类型的人难以找到该类型。他们可能也会因为必须输入 <code>use</code> <code>my_crate::some_module::another_module::UsefulType;</code> 而不是 <code>use</code> <code>my_crate::UsefulType;</code> 而感到烦恼。",
    "_note": ""
  },
  "Figure 14-3 shows what the front page of the documentation for this crate generated by cargo doc would look like:": {
    "_translate": "图14-3显示了由<code>cargo doc</code>生成的此crate的文档首页的样子：",
    "_note": ""
  },
  "Figure 14-3: Front page of the documentation for art that lists the kinds and utils modules": {
    "_translate": "<span class=\"caption\">图14-3: <code>art</code> 文档的首页，列出了 <code>kinds</code> 和 <code>utils</code> 模块</span>",
    "_note": ""
  },
  "For example, say we made a library named art for modeling artistic concepts. Within this library are two modules: a kinds module containing two enums named PrimaryColor and SecondaryColor and a utils module containing a function named mix, as shown in Listing 14-3:": {
    "_translate": "例如，假设我们创建了一个名为 <code>art</code> 的库，用于建模艺术概念。\n在这个库中有两个模块：一个 <code>kinds</code> 模块包含两个枚举类型\n名为 <code>PrimaryColor</code> 和 <code>SecondaryColor</code>，以及一个 <code>utils</code> 模块包含一个\n名为 <code>mix</code> 的函数，如清单 14-3 所示：",
    "_note": ""
  },
  "Note that the PrimaryColor and SecondaryColor types aren’t listed on the front page, nor is the mix function. We have to click kinds and utils to see them.": {
    "_translate": "请注意，<code>PrimaryColor</code> 和 <code>SecondaryColor</code> 类型没有列在首页上，<code>mix</code> 函数也没有。我们必须点击 <code>kinds</code> 和 <code>utils</code> 才能看到它们。",
    "_note": ""
  },
  "Another crate that depends on this library would need use statements that bring the items from art into scope, specifying the module structure that’s currently defined. Listing 14-4 shows an example of a crate that uses the PrimaryColor and mix items from the art crate:": {
    "_translate": "另一个依赖于这个库的crate需要<code>use</code>语句，将<code>art</code>中的项引入作用域，并指定当前定义的模块结构。清单14-4展示了使用<code>art</code> crate中的<code>PrimaryColor</code>和<code>mix</code>项的crate示例：",
    "_note": ""
  },
  "To remove the internal organization from the public API, we can modify the art crate code in Listing 14-3 to add pub use statements to re-export the items at the top level, as shown in Listing 14-5:": {
    "_translate": "为了从公共 API 中移除内部组织，我们可以修改 <code>art</code> crate 代码（如清单 14-3 所示），添加 <code>pub use</code> 语句以在顶级重新导出这些项，如清单 14-5 所示：",
    "_note": ""
  },
  "The author of the code in Listing 14-4, which uses the art crate, had to figure out that PrimaryColor is in the kinds module and mix is in the utils module. The module structure of the art crate is more relevant to developers working on the art crate than to those using it. The internal structure doesn’t contain any useful information for someone trying to understand how to use the art crate, but rather causes confusion because developers who use it have to figure out where to look, and must specify the module names in the use statements.": {
    "_translate": "列表 14-4 中使用了 <code>art</code> crate 的代码作者不得不弄清楚 <code>PrimaryColor</code> 位于 <code>kinds</code> 模块中，而 <code>mix</code> 位于 <code>utils</code> 模块中。<code>art</code> crate 的模块结构对于开发 <code>art</code> crate 的开发者来说更为重要，而对于使用它的开发者来说则不然。内部结构对于试图了解如何使用 <code>art</code> crate 的人来说并不包含任何有用的信息，反而会造成混淆，因为使用它的开发者必须弄清楚去哪里查找，并且必须在 <code>use</code> 语句中指定模块名称。",
    "_note": ""
  },
  "The API documentation that cargo doc generates for this crate will now list and link re-exports on the front page, as shown in Figure 14-4, making the PrimaryColor and SecondaryColor types and the mix function easier to find.": {
    "_translate": "<code>cargo doc</code> 为这个 crate 生成的 API 文档现在将在首页列出并链接重新导出的内容，如图 14-4 所示，使 <code>PrimaryColor</code> 和 <code>SecondaryColor</code> 类型以及 <code>mix</code> 函数更容易找到。",
    "_note": ""
  },
  "Figure 14-4: The front page of the documentation for art that lists the re-exports": {
    "_translate": "<span class=\"caption\">图14-4: <code>art</code> 文档的首页，列出了重新导出的内容</span>",
    "_note": ""
  },
  "The art crate users can still see and use the internal structure from Listing 14-3 as demonstrated in Listing 14-4, or they can use the more convenient structure in Listing 14-5, as shown in Listing 14-6:": {
    "_translate": "<code>art</code> crate 的用户仍然可以查看和使用来自列表 14-3 的内部结构，如列表 14-4 所示，或者他们可以使用列表 14-5 中更方便的结构，如列表 14-6 所示：",
    "_note": ""
  },
  "In cases where there are many nested modules, re-exporting the types at the top level with pub use can make a significant difference in the experience of people who use the crate. Another common use of pub use is to re-export definitions of a dependency in the current crate to make that crate’s definitions part of your crate’s public API.": {
    "_translate": "在有许多嵌套模块的情况下，使用 <code>pub use</code> 在顶层重新导出类型可以显著改善使用该 crate 的人的体验。另一种常见的 <code>pub use</code> 用法是重新导出依赖项的定义，使这些定义成为你 crate 的公共 API 的一部分。",
    "_note": ""
  },
  "Setting Up a Crates.io Account": {
    "_translate": "<a class=\"header\" href=\"#setting-up-a-cratesio-account\">设置 Crates.io 账户</a>",
    "_note": ""
  },
  "Creating a useful public API structure is more of an art than a science, and you can iterate to find the API that works best for your users. Choosing pub use gives you flexibility in how you structure your crate internally and decouples that internal structure from what you present to your users. Look at some of the code of crates you’ve installed to see if their internal structure differs from their public API.": {
    "_translate": "创建一个有用的公共 API 结构更像是一门艺术而不是科学，你可以通过迭代来找到最适合你用户的 API。选择 <code>pub use</code> 为你提供了在 crate 内部结构上的灵活性，并将这种内部结构与你呈现给用户的部分解耦。查看一些你已安装的 crate 的代码，看看它们的内部结构是否与其公共 API 不同。",
    "_note": ""
  },
  "This command will inform Cargo of your API token and store it locally in ~/.cargo/credentials. Note that this token is a secret: do not share it with anyone else. If you do share it with anyone for any reason, you should revoke it and generate a new token on crates.io.": {
    "_translate": "此命令将告知 Cargo 您的 API 令牌，并将其存储在 <em>~/.cargo/credentials</em> 中。请注意，此令牌是 <em>机密</em>：不要与任何人共享。如果您因任何原因与任何人共享了此令牌，您应该撤销它并在 <a href=\"https://crates.io/\">crates.io</a><!-- ignore --> 生成一个新的令牌。",
    "_note": ""
  },
  "Adding Metadata to a New Crate": {
    "_translate": "<a class=\"header\" href=\"#adding-metadata-to-a-new-crate\">为新 crate 添加元数据</a>",
    "_note": ""
  },
  "Before you can publish any crates, you need to create an account on crates.io and get an API token. To do so, visit the home page at crates.io and log in via a GitHub account. (The GitHub account is currently a requirement, but the site might support other ways of creating an account in the future.) Once you’re logged in, visit your account settings at https://crates.io/me/ and retrieve your API key. Then run the cargo login command and paste your API key when prompted, like this:": {
    "_translate": "在发布任何 crate 之前，您需要在 <a href=\"https://crates.io/\">crates.io</a><!-- ignore --> 上创建一个帐户并获取一个 API 令牌。为此，请访问 <a href=\"https://crates.io/\">crates.io</a><!-- ignore --> 的首页并通过 GitHub 帐户登录。（目前 GitHub 帐户是必需的，但该网站将来可能会支持其他创建帐户的方式。）登录后，请访问您的帐户设置页面 <a href=\"https://crates.io/me/\">https://crates.io/me/</a><!-- ignore --> 并获取您的 API 密钥。然后运行 <code>cargo login</code> 命令，并在提示时粘贴您的 API 密钥，如下所示：",
    "_note": ""
  },
  "Let’s say you have a crate you want to publish. Before publishing, you’ll need to add some metadata in the [package] section of the crate’s Cargo.toml file.": {
    "_translate": "假设你有一个想要发布的 crate。在发布之前，你需要在 crate 的 <em>Cargo.toml</em> 文件的 <code>[package]</code> 部分添加一些元数据。",
    "_note": ""
  },
  "Filename: Cargo.toml": {
    "_translate": "<span class=\"filename\">文件名: Cargo.toml</span>",
    "_note": ""
  },
  "Even if you’ve chosen a unique name, when you run cargo publish to publish the crate at this point, you’ll get a warning and then an error:": {
    "_translate": "即使您选择了一个独特的名称，当您运行<code>cargo publish</code>来发布此阶段的 crate 时，您会收到一个警告，然后是一个错误：",
    "_note": ""
  },
  "Your crate will need a unique name. While you’re working on a crate locally, you can name a crate whatever you’d like. However, crate names on crates.io are allocated on a first-come, first-served basis. Once a crate name is taken, no one else can publish a crate with that name. Before attempting to publish a crate, search for the name you want to use. If the name has been used, you will need to find another name and edit the name field in the Cargo.toml file under the [package] section to use the new name for publishing, like so:": {
    "_translate": "您的crate需要一个独特的名称。当您在本地开发crate时，\n您可以随意命名crate。然而，<a href=\"https://crates.io/\">crates.io</a><!-- ignore --> 上的crate名称是按先到先得的原则分配的。一旦某个crate名称被占用，其他人就不能再发布同名的crate。在尝试发布crate之前，请搜索您想要使用的名称。如果该名称已被使用，您需要找到另一个名称，并编辑<em>Cargo.toml</em>文件中<code>[package]</code>部分下的<code>name</code>字段，以使用新名称进行发布，如下所示：",
    "_note": ""
  },
  "If you want to use a license that doesn’t appear in the SPDX, you need to place the text of that license in a file, include the file in your project, and then use license-file to specify the name of that file instead of using the license key.": {
    "_translate": "如果您想使用未出现在 SPDX 中的许可证，您需要将该许可证的文本放在一个文件中，将该文件包含在您的项目中，然后使用 <code>license-file</code> 来指定该文件的名称，而不是使用 <code>license</code> 键。",
    "_note": ""
  },
  "This errors because you’re missing some crucial information: a description and license are required so people will know what your crate does and under what terms they can use it. In Cargo.toml, add a description that’s just a sentence or two, because it will appear with your crate in search results. For the license field, you need to give a license identifier value. The Linux Foundation’s Software Package Data Exchange (SPDX) lists the identifiers you can use for this value. For example, to specify that you’ve licensed your crate using the MIT License, add the MIT identifier:": {
    "_translate": "这会出错，因为你缺少一些关键信息：需要提供描述和许可证，这样人们才能知道你的crate是做什么的，以及他们可以在什么条件下使用它。在<em>Cargo.toml</em>中，添加一个简短的描述，因为这将出现在搜索结果中与你的crate一起。对于<code>license</code>字段，你需要提供一个<em>许可证标识符值</em>。<a href=\"http://spdx.org/licenses/\">Linux基金会的软件包数据交换（SPDX）</a>列出了你可以用于此值的标识符。例如，要指定你使用MIT许可证授权你的crate，添加<code>MIT</code>标识符：",
    "_note": ""
  },
  "Guidance on which license is appropriate for your project is beyond the scope of this book. Many people in the Rust community license their projects in the same way as Rust by using a dual license of MIT OR Apache-2.0. This practice demonstrates that you can also specify multiple license identifiers separated by OR to have multiple licenses for your project.": {
    "_translate": "关于选择适合您项目的许可证的指导超出了本书的范围。Rust 社区中的许多人通过使用 <code>MIT OR Apache-2.0</code> 双许可证来授权他们的项目，这种做法与 Rust 本身相同。这表明您还可以通过用 <code>OR</code> 分隔多个许可证标识符来为您的项目指定多个许可证。",
    "_note": ""
  },
  "With a unique name, the version, your description, and a license added, the Cargo.toml file for a project that is ready to publish might look like this:": {
    "_translate": "有了一个独特的名称、版本号、描述和许可证后，准备发布的项目的 <em>Cargo.toml</em> 文件可能如下所示：",
    "_note": ""
  },
  "Publishing to Crates.io": {
    "_translate": "<a class=\"header\" href=\"#publishing-to-cratesio\">发布到 Crates.io</a>",
    "_note": ""
  },
  "Cargo’s documentation describes other metadata you can specify to ensure others can discover and use your crate more easily.": {
    "_translate": "<a href=\"https://doc.rust-lang.org/cargo/\">Cargo 的文档</a> 描述了您可以指定的其他元数据，以确保其他人可以更轻松地发现和使用您的 crate。",
    "_note": ""
  },
  "Now that you’ve created an account, saved your API token, chosen a name for your crate, and specified the required metadata, you’re ready to publish! Publishing a crate uploads a specific version to crates.io for others to use.": {
    "_translate": "现在你已经创建了帐户，保存了API令牌，选择了包的名字，并指定了所需的元数据，你已经准备好发布了！发布一个包会将特定版本上传到<a href=\"https://crates.io/\">crates.io</a><!-- ignore -->供其他人使用。",
    "_note": ""
  },
  "Be careful, because a publish is permanent. The version can never be overwritten, and the code cannot be deleted. One major goal of crates.io is to act as a permanent archive of code so that builds of all projects that depend on crates from crates.io will continue to work. Allowing version deletions would make fulfilling that goal impossible. However, there is no limit to the number of crate versions you can publish.": {
    "_translate": "小心，因为发布是<em>永久的</em>。版本不能被覆盖，代码也不能被删除。<a href=\"https://crates.io/\">crates.io</a><!-- ignore -->的一个主要目标是作为代码的永久存档，以确保依赖于来自<a href=\"https://crates.io/\">crates.io</a><!-- ignore -->的crate的所有项目的构建都能继续工作。允许删除版本将使实现这一目标变得不可能。但是，你可以发布的crate版本数量没有限制。",
    "_note": ""
  },
  "Run the cargo publish command again. It should succeed now:": {
    "_translate": "再次运行 <code>cargo publish</code> 命令。现在应该成功了：",
    "_note": ""
  },
  "Congratulations! You’ve now shared your code with the Rust community, and anyone can easily add your crate as a dependency of their project.": {
    "_translate": "恭喜！您现在已与 Rust 社区分享了您的代码，任何人都可以轻松地将您的 crate 作为他们项目的依赖项添加。",
    "_note": ""
  },
  "Publishing a New Version of an Existing Crate": {
    "_translate": "<a class=\"header\" href=\"#publishing-a-new-version-of-an-existing-crate\">发布现有 crate 的新版本</a>",
    "_note": ""
  },
  "Deprecating Versions from Crates.io with cargo yank": {
    "_translate": "<a class=\"header\" href=\"#deprecating-versions-from-cratesio-with-cargo-yank\">使用 <code>cargo yank</code> 从 Crates.io 退役版本</a>",
    "_note": ""
  },
  "When you’ve made changes to your crate and are ready to release a new version, you change the version value specified in your Cargo.toml file and republish. Use the Semantic Versioning rules to decide what an appropriate next version number is based on the kinds of changes you’ve made. Then run cargo publish to upload the new version.": {
    "_translate": "当你对你的 crate 做出更改并准备发布新版本时，你需要更改 <em>Cargo.toml</em> 文件中指定的 <code>version</code> 值并重新发布。使用 <a href=\"http://semver.org/\">语义化版本控制规则</a> 来决定基于你所做的更改类型，下一个合适的版本号是什么。然后运行 <code>cargo publish</code> 来上传新版本。",
    "_note": ""
  },
  "Although you can’t remove previous versions of a crate, you can prevent any future projects from adding them as a new dependency. This is useful when a crate version is broken for one reason or another. In such situations, Cargo supports yanking a crate version.": {
    "_translate": "虽然你不能删除先前版本的 crate，但可以防止任何未来的项目将它们添加为新的依赖项。这在某个 crate 版本因某种原因损坏时非常有用。在这种情况下，Cargo 支持 <em>撤销</em> 一个 crate 版本。",
    "_note": ""
  },
  "Yanking a version prevents new projects from depending on that version while allowing all existing projects that depend on it to continue. Essentially, a yank means that all projects with a Cargo.lock will not break, and any future Cargo.lock files generated will not use the yanked version.": {
    "_translate": "撤销一个版本可以防止新项目依赖于该版本，同时允许所有现有的依赖于它的项目继续使用。本质上，撤销意味着所有具有 <em>Cargo.lock</em> 的项目都不会中断，而任何未来生成的 <em>Cargo.lock</em> 文件都不会使用已撤销的版本。",
    "_note": ""
  },
  "To yank a version of a crate, in the directory of the crate that you’ve previously published, run cargo yank and specify which version you want to yank. For example, if we’ve published a crate named guessing_game version 1.0.1 and we want to yank it, in the project directory for guessing_game we’d run:": {
    "_translate": "要撤销某个版本的 crate，在你之前发布的 crate 的目录中运行 <code>cargo yank</code> 并指定要撤销的版本。例如，如果我们发布了一个名为 <code>guessing_game</code> 版本 1.0.1 的 crate 并且想要撤销它，在 <code>guessing_game</code> 的项目目录中我们会运行：",
    "_note": ""
  },
  "By adding --undo to the command, you can also undo a yank and allow projects to start depending on a version again:": {
    "_translate": "通过在命令中添加 <code>--undo</code>，您还可以撤销一次 yank 操作，并允许项目再次依赖于某个版本：",
    "_note": ""
  },
  "A yank does not delete any code. It cannot, for example, delete accidentally uploaded secrets. If that happens, you must reset those secrets immediately.": {
    "_translate": "A yank <em>不会</em> 删除任何代码。例如，它不能删除意外上传的秘密。如果发生这种情况，您必须立即重置这些秘密。",
    "_note": ""
  },
  "Publishing a Crate to Crates.io - The Rust Programming Language": {
    "_translate": "发布 Crate 到 Crates.io - 《Rust 编程语言》",
    "_note": ""
  },
  "Panics: The scenarios in which the function being documented could panic. Callers of the function who don’t want their programs to panic should make sure they don’t call the function in these situations.": {
    "_translate": "<strong>恐慌</strong>: 该函数可能引发恐慌的情况。不希望程序恐慌的调用者应确保不在这些情况下调用该函数。",
    "_note": ""
  },
  "Errors: If the function returns a Result, describing the kinds of errors that might occur and what conditions might cause those errors to be returned can be helpful to callers so they can write code to handle the different kinds of errors in different ways.": {
    "_translate": "<strong>错误</strong>: 如果函数返回一个 <code>Result</code>，描述可能会发生哪些类型的错误以及哪些条件可能导致这些错误的发生，对于调用者来说是有帮助的，这样他们可以编写代码以不同方式处理不同类型的错误。",
    "_note": ""
  },
  "Safety: If the function is unsafe to call (we discuss unsafety in Chapter 20), there should be a section explaining why the function is unsafe and covering the invariants that the function expects callers to uphold.": {
    "_translate": "<strong>安全性</strong>: 如果函数调用是<code>不安全的</code>（我们在第20章中讨论不安全性），应该有一个部分解释为什么该函数是不安全的，并涵盖函数期望调用者维护的不变性。",
    "_note": ""
  },
  "Commonly Used Sections": {
    "_translate": "<a class=\"header\" href=\"#commonly-used-sections\">常用部分</a>",
    "_note": ""
  },
  "Documentation Comments as Tests": {
    "_translate": "<a class=\"header\" href=\"#documentation-comments-as-tests\">文档注释作为测试</a>",
    "_note": ""
  },
  "Commenting Contained Items": {
    "_translate": "<a class=\"header\" href=\"#commenting-contained-items\">注释包含的项</a>",
    "_note": ""
  },
  "Now, if we change either the function or the example so the assert_eq! in the example panics and run cargo test again, we’ll see that the doc tests catch that the example and the code are out of sync with each other!": {
    "_translate": "现在，如果我们更改函数或示例，使示例中的 <code>assert_eq!</code> 触发 panic 并再次运行 <code>cargo test</code>，我们会看到文档测试捕获了示例和代码不同步的问题！",
    "_note": ""
  },
  "Adding example code blocks in your documentation comments can help demonstrate how to use your library, and doing so has an additional bonus: running cargo test will run the code examples in your documentation as tests! Nothing is better than documentation with examples. But nothing is worse than examples that don’t work because the code has changed since the documentation was written. If we run cargo test with the documentation for the add_one function from Listing 14-1, we will see a section in the test results that looks like this:": {
    "_translate": "在文档注释中添加示例代码块可以帮助演示如何使用您的库，这样做还有一个额外的好处：运行<code>cargo test</code>会将文档中的代码示例作为测试运行！没有什么比带有示例的文档更好的了。但没有什么比那些因为代码自文档编写以来已更改而不工作的示例更糟糕的了。如果我们使用第14-1章中的<code>add_one</code>函数的文档运行<code>cargo test</code>，我们将在测试结果中看到如下部分：",
    "_note": ""
  },
  "When we run cargo doc --open, these comments will display on the front page of the documentation for my_crate above the list of public items in the crate, as shown in Figure 14-2.": {
    "_translate": "当我们运行 <code>cargo doc --open</code> 时，这些注释将显示在 <code>my_crate</code> 文档的首页上，位于 crate 中公共项列表的上方，如图 14-2 所示。",
    "_note": ""
  },
  "This results in an error because you’re missing some crucial information: a description and license are required so people will know what your crate does and under what terms they can use it. In Cargo.toml, add a description that’s just a sentence or two, because it will appear with your crate in search results. For the license field, you need to give a license identifier value. The Linux Foundation’s Software Package Data Exchange (SPDX) lists the identifiers you can use for this value. For example, to specify that you’ve licensed your crate using the MIT License, add the MIT identifier:": {
    "_translate": "这会导致错误，因为你缺少一些关键信息：需要提供描述和许可证，以便人们知道你的crate做什么以及他们可以在什么条件下使用它。在<em>Cargo.toml</em>中，添加一个简短的描述，因为这将出现在搜索结果中的你的crate旁边。对于<code>license</code>字段，你需要提供一个<em>许可证标识符值</em>。<a href=\"http://spdx.org/licenses/\">Linux基金会的软件包数据交换（SPDX）</a>列出了你可以用于此值的标识符。例如，要指定你使用MIT许可证授权你的crate，添加<code>MIT</code>标识符：",
    "_note": ""
  },
  "Now, if we change either the function or the example so the assert_eq! in the example panics, and run cargo test again, we’ll see that the doc tests catch that the example and the code are out of sync with each other!": {
    "_translate": "现在，如果我们更改函数或示例，使示例中的 <code>assert_eq!</code> 触发 panic，并再次运行 <code>cargo test</code>，我们会看到文档测试捕获了示例和代码不同步的问题！",
    "_note": ""
  },
  "For convenience, running cargo doc --open will build the HTML for your current crate’s documentation (as well as the documentation for all of your crate’s dependencies) and open the result in a web browser. Navigate to the add_one function and you’ll see how the text in the documentation comments is rendered, as shown in Figure 14-1.": {
    "_translate": "为了方便，运行 <code>cargo doc --open</code> 将为您的当前 crate 的文档（以及您的所有 crate 依赖项的文档）构建 HTML，并在网页浏览器中打开结果。导航到 <code>add_one</code> 函数，您将看到文档注释中的文本是如何呈现的，如图 14-1 所示。",
    "_note": ""
  },
  "For example, to add documentation that describes the purpose of the my_crate crate that contains the add_one function, we add documentation comments that start with //! to the beginning of the src/lib.rs file, as shown in Listing 14-2.": {
    "_translate": "例如，要添加描述包含 <code>add_one</code> 函数的 <code>my_crate</code> crate 目的的文档，我们可以在 <em>src/lib.rs</em> 文件的开头添加以 <code>//!</code> 开头的文档注释，如清单 14-2 所示。",
    "_note": ""
  },
  "In Chapter 7, we covered how to make items public using the pub keyword, and how to bring items into a scope with the use keyword. However, the structure that makes sense to you while you’re developing a crate might not be very convenient for your users. You might want to organize your structs in a hierarchy containing multiple levels, but then people who want to use a type you’ve defined deep in the hierarchy might have trouble finding out that type exists. They might also be annoyed at having to enter use my_crate::some_module::another_module::UsefulType; rather than use my_crate::UsefulType;.": {
    "_translate": "在第 7 章中，我们介绍了如何使用 <code>pub</code> 关键字使项公开，以及如何使用 <code>use</code> 关键字将项引入作用域。然而，你在开发 crate 时觉得合理的结构可能对你的用户来说并不方便。你可能希望将结构组织成包含多个级别的层次结构，但这样，想要使用你定义的深层类型的人可能会很难找到该类型存在。他们可能也会因为必须输入 <code>use my_crate::some_module::another_module::UsefulType;</code> 而不是 <code>use my_crate::UsefulType;</code> 而感到烦恼。",
    "_note": ""
  },
  "For example, say we made a library named art for modeling artistic concepts. Within this library are two modules: a kinds module containing two enums named PrimaryColor and SecondaryColor and a utils module containing a function named mix, as shown in Listing 14-3.": {
    "_translate": "例如，假设我们制作了一个名为 <code>art</code> 的库，用于建模艺术概念。\n在这个库中有两个模块：一个 <code>kinds</code> 模块包含两个枚举类型\n名为 <code>PrimaryColor</code> 和 <code>SecondaryColor</code>，以及一个 <code>utils</code> 模块包含一个\n名为 <code>mix</code> 的函数，如清单 14-3 所示。",
    "_note": ""
  },
  "Figure 14-3 shows what the front page of the documentation for this crate generated by cargo doc would look like.": {
    "_translate": "图14-3展示了由<code>cargo doc</code>生成的此crate文档的首页会是什么样子。",
    "_note": ""
  },
  "To remove the internal organization from the public API, we can modify the art crate code in Listing 14-3 to add pub use statements to re-export the items at the top level, as shown in Listing 14-5.": {
    "_translate": "为了从公共 API 中移除内部组织，我们可以修改 <code>art</code> crate 代码（如清单 14-3 所示），添加 <code>pub use</code> 语句以在顶级重新导出这些项，如清单 14-5 所示。",
    "_note": ""
  },
  "Another crate that depends on this library would need use statements that bring the items from art into scope, specifying the module structure that’s currently defined. Listing 14-4 shows an example of a crate that uses the PrimaryColor and mix items from the art crate.": {
    "_translate": "另一个依赖于这个库的crate需要<code>use</code>语句，将<code>art</code>中的项引入作用域，并指定当前定义的模块结构。清单14-4显示了一个使用<code>art</code> crate中的<code>PrimaryColor</code>和<code>mix</code>项的crate示例。",
    "_note": ""
  },
  "The art crate users can still see and use the internal structure from Listing 14-3 as demonstrated in Listing 14-4, or they can use the more convenient structure in Listing 14-5, as shown in Listing 14-6.": {
    "_translate": "<code>art</code> crate 的用户仍然可以查看和使用来自列表 14-3 的内部结构，如列表 14-4 所示，或者他们可以使用列表 14-5 中更方便的结构，如列表 14-6 所示。",
    "_note": ""
  },
  "This command will inform Cargo of your API token and store it locally in ~/.cargo/credentials.toml. Note that this token is a secret: do not share it with anyone else. If you do share it with anyone for any reason, you should revoke it and generate a new token on crates.io.": {
    "_translate": "此命令将告知 Cargo 您的 API 令牌，并将其存储在 <em>~/.cargo/credentials.toml</em> 中。请注意，此令牌是 <em>机密</em>：不要与任何人共享。如果您因任何原因与任何人共享了此令牌，您应该撤销它并在 <a href=\"https://crates.io/\">crates.io</a> 上生成一个新的令牌。",
    "_note": ""
  },
  "Cargo’s documentation describes other metadata you can specify to ensure that others can discover and use your crate more easily.": {
    "_translate": "<a href=\"https://doc.rust-lang.org/cargo/\">Cargo 的文档</a> 描述了您可以指定的其他元数据，以确保其他人可以更容易地发现和使用您的 crate。",
    "_note": ""
  },
  "Be careful, because a publish is permanent. The version can never be overwritten, and the code cannot be deleted except in certain circumstances. One major goal of Crates.io is to act as a permanent archive of code so that builds of all projects that depend on crates from crates.io will continue to work. Allowing version deletions would make fulfilling that goal impossible. However, there is no limit to the number of crate versions you can publish.": {
    "_translate": "请注意，因为发布是<em>永久的</em>。版本不能被覆盖，代码也不能被删除，除非在某些特定情况下。Crates.io 的一个主要目标是作为代码的永久存档，以便依赖于来自<a href=\"https://crates.io/\">crates.io</a> 的 crate 的所有项目的构建都能继续工作。允许删除版本将使实现这一目标变得不可能。但是，你可以发布的 crate 版本数量没有限制。",
    "_note": ""
  },
  "When you’ve made changes to your crate and are ready to release a new version, you change the version value specified in your Cargo.toml file and republish. Use the Semantic Versioning rules to decide what an appropriate next version number is, based on the kinds of changes you’ve made. Then run cargo publish to upload the new version.": {
    "_translate": "当你对你的 crate 做出更改并准备发布新版本时，你需要更改 <em>Cargo.toml</em> 文件中指定的 <code>version</code> 值并重新发布。使用 <a href=\"https://semver.org/\">语义化版本控制规则</a> 来决定一个合适的下一个版本号，这取决于你所做的更改类型。然后运行 <code>cargo publish</code> 来上传新版本。",
    "_note": ""
  },
  "Contained Item Comments": {
    "_translate": "<a class=\"header\" href=\"#contained-item-comments\">包含的项注释</a>",
    "_note": ""
  },
  "Exporting a Convenient Public API": {
    "_translate": "<a class=\"header\" href=\"#exporting-a-convenient-public-api\">导出方便的公共API</a>",
    "_note": ""
  },
  "Deprecating Versions from Crates.io": {
    "_translate": "<a class=\"header\" href=\"#deprecating-versions-from-cratesio\">从 Crates.io 退役版本</a>",
    "_note": ""
  },
  "Figure 14-1: The HTML documentation for the add_one function": {
    "_translate": "<span class=\"caption\">图14-1：<code>add_one</code> 函数的 HTML 文档</span>",
    "_note": ""
  },
  "Panics: These are the scenarios in which the function being documented could panic. Callers of the function who don’t want their programs to panic should make sure they don’t call the function in these situations.": {
    "_translate": "<strong>恐慌</strong>: 这些是被记录的函数可能会发生恐慌的情况。不希望程序恐慌的函数调用者应确保不在这些情况下调用该函数。",
    "_note": ""
  },
  "Errors: If the function returns a Result, describing the kinds of errors that might occur and what conditions might cause those errors to be returned can be helpful to callers so that they can write code to handle the different kinds of errors in different ways.": {
    "_translate": "<strong>错误</strong>: 如果函数返回一个 <code>Result</code>，描述可能发生的错误类型以及可能导致这些错误的条件，对调用者来说是有帮助的，这样他们可以编写代码以不同方式处理不同类型的错误。",
    "_note": ""
  },
  "Now, if we change either the function or the example so that the assert_eq! in the example panics, and run cargo test again, we’ll see that the doc tests catch that the example and the code are out of sync with each other!": {
    "_translate": "现在，如果我们更改函数或示例，使示例中的 <code>assert_eq!</code> 触发 panic，并再次运行 <code>cargo test</code>，我们会看到文档测试捕获到示例和代码之间不同步的问题！",
    "_note": ""
  },
  "Adding example code blocks in your documentation comments can help demonstrate how to use your library and has an additional bonus: Running cargo test will run the code examples in your documentation as tests! Nothing is better than documentation with examples. But nothing is worse than examples that don’t work because the code has changed since the documentation was written. If we run cargo test with the documentation for the add_one function from Listing 14-1, we will see a section in the test results that looks like this:": {
    "_translate": "在文档注释中添加示例代码块可以帮助演示如何使用您的库，并且还有一个额外的好处：运行<code>cargo test</code>会将文档中的代码示例作为测试运行！没有什么比带有示例的文档更好的了。但没有什么比那些因为代码自文档编写以来已更改而不工作的示例更糟糕的了。如果我们使用第14-1章中<code>add_one</code>函数的文档运行<code>cargo test</code>，我们将在测试结果中看到一个如下所示的部分：",
    "_note": ""
  },
  "Figure 14-2: The rendered documentation for my_crate, including the comment describing the crate as a whole": {
    "_translate": "<span class=\"caption\">图14-2: 渲染的 <code>my_crate</code> 文档，包括描述整个 crate 的注释</span>",
    "_note": ""
  },
  "The good news is that if the structure isn’t convenient for others to use from another library, you don’t have to rearrange your internal organization: Instead, you can re-export items to make a public structure that’s different from your private structure by using pub use. Re-exporting takes a public item in one location and makes it public in another location, as if it were defined in the other location instead.": {
    "_translate": "好消息是，如果该结构<em>不</em>便于其他库使用，你不必重新安排你的内部组织：相反，你可以通过使用<code>pub use</code>重新导出项来创建一个与你的私有结构不同的公共结构。<em>重新导出</em>会将一个位置的公共项在另一个位置也公开，就像它是在另一个位置定义的一样。",
    "_note": ""
  },
  "Figure 14-3: The front page of the documentation for art that lists the kinds and utils modules": {
    "_translate": "<span class=\"caption\">图14-3: <code>art</code> 文档的首页，列出了 <code>kinds</code> 和 <code>utils</code> 模块</span>",
    "_note": ""
  },
  "Creating a useful public API structure is more an art than a science, and you can iterate to find the API that works best for your users. Choosing pub use gives you flexibility in how you structure your crate internally and decouples that internal structure from what you present to your users. Look at some of the code of crates you’ve installed to see if their internal structure differs from their public API.": {
    "_translate": "创建一个有用的公共API结构更像是一门艺术而不是科学，你可以通过迭代来找到最适合你用户的API。选择<code>pub use</code>可以让你在内部结构化crate时具有灵活性，并且将这种内部结构与你呈现给用户的部分解耦。查看一些你已安装的crate的代码，看看它们的内部结构是否与其公共API不同。",
    "_note": ""
  },
  "Before you can publish any crates, you need to create an account on crates.io and get an API token. To do so, visit the home page at crates.io and log in via a GitHub account. (The GitHub account is currently a requirement, but the site might support other ways of creating an account in the future.) Once you’re logged in, visit your account settings at https://crates.io/me/ and retrieve your API key. Then, run the cargo login command and paste your API key when prompted, like this:": {
    "_translate": "在发布任何 crate 之前，您需要在 <a href=\"https://crates.io/\">crates.io</a><!-- ignore --> 上创建一个帐户并获取一个 API 令牌。为此，请访问 <a href=\"https://crates.io/\">crates.io</a><!-- ignore --> 的首页并通过 GitHub 帐户登录。（目前 GitHub 帐户是必需的，但该网站将来可能会支持其他创建帐户的方式。）登录后，访问您的帐户设置 <a href=\"https://crates.io/me/\">https://crates.io/me/</a><!-- ignore --> 并获取您的 API 密钥。然后，运行 <code>cargo login</code> 命令并在提示时粘贴您的 API 密钥，如下所示：",
    "_note": ""
  },
  "This command will inform Cargo of your API token and store it locally in ~/.cargo/credentials.toml. Note that this token is a secret: Do not share it with anyone else. If you do share it with anyone for any reason, you should revoke it and generate a new token on crates.io.": {
    "_translate": "此命令将告知 Cargo 您的 API 令牌，并将其存储在 <em>~/.cargo/credentials.toml</em> 中。请注意，此令牌是机密的：不要与任何人共享。如果您因任何原因与任何人共享了此令牌，您应该撤销它并在 <a href=\"https://crates.io/\">crates.io</a> 生成一个新的令牌。",
    "_note": ""
  },
  "When you’ve made changes to your crate and are ready to release a new version, you change the version value specified in your Cargo.toml file and republish. Use the Semantic Versioning rules to decide what an appropriate next version number is, based on the kinds of changes you’ve made. Then, run cargo publish to upload the new version.": {
    "_translate": "当你对你的 crate 做出更改并准备发布新版本时，你需要更改 <em>Cargo.toml</em> 文件中指定的 <code>version</code> 值并重新发布。使用 <a href=\"https://semver.org/\">语义化版本规则</a> 来决定一个合适的下一个版本号，这取决于你所做的更改类型。然后，运行 <code>cargo publish</code> 来上传新版本。",
    "_note": ""
  },
  "This results in an error because you’re missing some crucial information: A description and license are required so that people will know what your crate does and under what terms they can use it. In Cargo.toml, add a description that’s just a sentence or two, because it will appear with your crate in search results. For the license field, you need to give a license identifier value. The Linux Foundation’s Software Package Data Exchange (SPDX) lists the identifiers you can use for this value. For example, to specify that you’ve licensed your crate using the MIT License, add the MIT identifier:": {
    "_translate": "这会导致错误，因为你缺少一些关键信息：需要提供描述和许可证，以便人们知道你的 crate 是做什么的以及他们可以在什么条件下使用它。在 <em>Cargo.toml</em> 中，添加一个简短的描述，因为这将出现在搜索结果中与你的 crate 一起。对于 <code>license</code> 字段，你需要提供一个 <em>许可证标识符值</em>。<a href=\"https://spdx.org/licenses/\">Linux 基金会的软件包数据交换 (SPDX)</a> 列出了你可以用于此值的标识符。例如，要指定你使用 MIT 许可证授权你的 crate，添加 <code>MIT</code> 标识符：",
    "_note": ""
  },
  "To yank a version of a crate, in the directory of the crate that you’ve previously published, run cargo yank and specify which version you want to yank. For example, if we’ve published a crate named guessing_game version 1.0.1 and we want to yank it, then we’d run the following in the project directory for guessing_game:": {
    "_translate": "要撤销某个版本的 crate，在你之前发布的 crate 目录中运行 <code>cargo yank</code> 并指定要撤销的版本。例如，如果我们发布了一个名为 <code>guessing_game</code> 的 crate，版本为 1.0.1，现在我们想撤销它，那么我们将在 <code>guessing_game</code> 的项目目录中运行以下命令：",
    "_note": ""
  }
}