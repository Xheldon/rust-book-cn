{
  "Smart Pointers": {
    "_translate": "<a class=\"header\" href=\"#smart-pointers\">智能指针</a>",
    "_note": ""
  },
  "A pointer is a general concept for a variable that contains an address in memory. This address refers to, or “points at,” some other data. The most common kind of pointer in Rust is a reference, which you learned about in Chapter 4. References are indicated by the & symbol and borrow the value they point to. They don’t have any special capabilities other than referring to data, and have no overhead.": {
    "_translate": "一个 <em>指针</em> 是一个通用的概念，表示一个包含内存地址的变量。这个地址指向或“指向”其他一些数据。Rust 中最常见的指针类型是引用，你在第 4 章中已经学过。引用由 <code>&amp;</code> 符号表示，并借用它们指向的值。它们除了引用数据之外没有任何特殊功能，并且没有开销。",
    "_note": ""
  },
  "Rust, with its concept of ownership and borrowing, has an additional difference between references and smart pointers: while references only borrow data, in many cases, smart pointers own the data they point to.": {
    "_translate": "Rust 通过其所有权和借用的概念，在引用和智能指针之间引入了额外的区别：虽然引用只是借用数据，但在许多情况下，智能指针<em>拥有</em>它们指向的数据。",
    "_note": ""
  },
  "Smart pointers, on the other hand, are data structures that act like a pointer but also have additional metadata and capabilities. The concept of smart pointers isn’t unique to Rust: smart pointers originated in C++ and exist in other languages as well. Rust has a variety of smart pointers defined in the standard library that provide functionality beyond that provided by references. To explore the general concept, we’ll look at a couple of different examples of smart pointers, including a reference counting smart pointer type. This pointer enables you to allow data to have multiple owners by keeping track of the number of owners and, when no owners remain, cleaning up the data.": {
    "_translate": "<em>智能指针</em>，另一方面，是像指针一样行为的数据结构，但还具有额外的元数据和功能。智能指针的概念并非 Rust 独有：智能指针起源于 C++，并且在其他语言中也存在。Rust 在标准库中定义了多种智能指针，提供了超出引用所提供的功能。为了探讨这一通用概念，我们将查看几种不同的智能指针示例，包括一个<em>引用计数</em>智能指针类型。这种指针通过跟踪所有者的数量，并在没有所有者时清理数据，使数据可以有多个所有者。",
    "_note": ""
  },
  "Smart pointers are usually implemented using structs. Unlike an ordinary struct, smart pointers implement the Deref and Drop traits. The Deref trait allows an instance of the smart pointer struct to behave like a reference so you can write your code to work with either references or smart pointers. The Drop trait allows you to customize the code that’s run when an instance of the smart pointer goes out of scope. In this chapter, we’ll discuss both traits and demonstrate why they’re important to smart pointers.": {
    "_translate": "智能指针通常使用结构体实现。与普通结构体不同，智能指针实现了 <code>Deref</code> 和 <code>Drop</code> 特性。<code>Deref</code> 特性允许智能指针结构体的实例像引用一样行为，因此你可以编写可以与引用或智能指针一起工作的代码。<code>Drop</code> 特性允许你自定义智能指针实例超出作用域时运行的代码。在本章中，我们将讨论这两个特性，并演示它们对智能指针的重要性。",
    "_note": ""
  },
  "Though we didn’t call them as such at the time, we’ve already encountered a few smart pointers in this book, including String and Vec<T> in Chapter 8. Both these types count as smart pointers because they own some memory and allow you to manipulate it. They also have metadata and extra capabilities or guarantees. String, for example, stores its capacity as metadata and has the extra ability to ensure its data will always be valid UTF-8.": {
    "_translate": "虽然我们在当时没有这样称呼它们，但在这本书中我们已经遇到了一些智能指针，包括第 8 章中的 <code>String</code> 和 <code>Vec&lt;T&gt;</code>。这两种类型都算作智能指针，因为它们拥有某些内存并允许你操纵这些内存。它们还具有元数据和额外的功能或保证。<code>String</code> 例如，存储其容量作为元数据，并具有确保其数据始终为有效 UTF-8 的额外能力。",
    "_note": ""
  },
  "Given that the smart pointer pattern is a general design pattern used frequently in Rust, this chapter won’t cover every existing smart pointer. Many libraries have their own smart pointers, and you can even write your own. We’ll cover the most common smart pointers in the standard library:": {
    "_translate": "鉴于智能指针模式是 Rust 中常用的一种通用设计模式，本章不会涵盖所有现有的智能指针。许多库都有自己的智能指针，你甚至可以编写自己的。我们将介绍标准库中最常见的智能指针：",
    "_note": ""
  },
  "In addition, we’ll cover the interior mutability pattern where an immutable type exposes an API for mutating an interior value. We’ll also discuss reference cycles: how they can leak memory and how to prevent them.": {
    "_translate": "此外，我们将介绍 <em>内部可变性</em> 模式，即一个不可变类型暴露出一个用于修改内部值的 API。我们还将讨论 <em>引用循环</em>：它们如何导致内存泄漏以及如何防止它们。",
    "_note": ""
  },
  "Let’s dive in!": {
    "_translate": "让我们开始吧！",
    "_note": ""
  },
  "Smart Pointers - The Rust Programming Language": {
    "_translate": "智能指针 - 《Rust编程语言》",
    "_note": ""
  },
  "Box<T> for allocating values on the heap": {
    "_translate": "<code>Box&lt;T&gt;</code> 用于在堆上分配值",
    "_note": ""
  },
  "Rc<T>, a reference counting type that enables multiple ownership": {
    "_translate": "<code>Rc&lt;T&gt;</code>，一个引用计数类型，允许多个所有权。",
    "_note": ""
  },
  "Ref<T> and RefMut<T>, accessed through RefCell<T>, a type that enforces the borrowing rules at runtime instead of compile time": {
    "_translate": "<code>Ref&lt;T&gt;</code> 和 <code>RefMut&lt;T&gt;</code>，通过 <code>RefCell&lt;T&gt;</code> 访问，这是一种在运行时而不是编译时强制执行借用规则的类型。",
    "_note": ""
  },
  "Smart pointers are usually implemented using structs. Unlike an ordinary struct, smart pointers implement the Deref and Drop traits. The Deref trait allows an instance of the smart pointer struct to behave like a reference so you can write your code to work with either references or smart pointers. The Drop trait allows you to customize the code that’s run when an instance of the smart pointer goes out of scope. In this chapter, we’ll discuss both of these traits and demonstrate why they’re important to smart pointers.": {
    "_translate": "智能指针通常使用结构体实现。与普通结构体不同，智能指针实现了<code>Deref</code>和<code>Drop</code>特质。<code>Deref</code>特质允许智能指针结构体的实例像引用一样行为，因此你可以编写可以与引用或智能指针一起工作的代码。<code>Drop</code>特质允许你自定义智能指针实例超出作用域时运行的代码。在本章中，我们将讨论这两个特质，并演示它们对智能指针的重要性。",
    "_note": ""
  },
  "A pointer is a general concept for a variable that contains an address in memory. This address refers to, or “points at,” some other data. The most common kind of pointer in Rust is a reference, which you learned about in Chapter 4. References are indicated by the & symbol and borrow the value they point to. They don’t have any special capabilities other than referring to data, and they have no overhead.": {
    "_translate": "一个 <em>指针</em> 是一个通用的概念，表示包含内存地址的变量。这个地址指向或“指向”其他一些数据。Rust 中最常见的指针类型是引用，你在第 4 章中已经学过。引用由 <code>&amp;</code> 符号表示，并借用它们指向的值。它们除了引用数据之外没有任何特殊功能，并且没有开销。",
    "_note": ""
  },
  "Rust, with its concept of ownership and borrowing, has an additional difference between references and smart pointers: while references only borrow data, in many cases smart pointers own the data they point to.": {
    "_translate": "Rust 通过其所有权和借用的概念，在引用和智能指针之间存在一个额外的区别：虽然引用只是借用数据，但在许多情况下，智能指针<em>拥有</em>它们所指向的数据。",
    "_note": ""
  },
  "Box<T>, for allocating values on the heap": {
    "_translate": "<code>Box&lt;T&gt;</code>，用于在堆上分配值",
    "_note": ""
  },
  "Though we didn’t call them as such at the time, we’ve already encountered a few smart pointers in this book, including String and Vec<T> in Chapter 8. Both of these types count as smart pointers because they own some memory and allow you to manipulate it. They also have metadata and extra capabilities or guarantees. String, for example, stores its capacity as metadata and has the extra ability to ensure its data will always be valid UTF-8.": {
    "_translate": "虽然我们在当时没有这样称呼它们，但在这本书中我们已经遇到了一些智能指针，包括第 8 章中的 <code>String</code> 和 <code>Vec&lt;T&gt;</code>。这两种类型都算作智能指针，因为它们拥有某些内存并允许你操作这些内存。它们还具有元数据和额外的功能或保证。例如，<code>String</code> 存储其容量作为元数据，并具有确保其数据始终为有效 UTF-8 的额外能力。",
    "_note": ""
  }
}