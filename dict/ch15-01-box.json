{
  "Using Box<T> to Point to Data on the Heap": {
    "_translate": "<a class=\"header\" href=\"#using-boxt-to-point-to-data-on-the-heap\">使用 <code>Box&lt;T&gt;</code> 指向堆上的数据</a>",
    "_note": ""
  },
  "The most straightforward smart pointer is a box, whose type is written Box<T>. Boxes allow you to store data on the heap rather than the stack. What remains on the stack is the pointer to the heap data. Refer to Chapter 4 to review the difference between the stack and the heap.": {
    "_translate": "最直接的智能指针是<em>box</em>，其类型写作<code>Box&lt;T&gt;</code>。Box允许你将数据存储在堆上而不是栈上。留在栈上的是指向堆数据的指针。参阅第4章以回顾栈和堆之间的区别。",
    "_note": ""
  },
  "Boxes don’t have performance overhead, other than storing their data on the heap instead of on the stack. But they don’t have many extra capabilities either. You’ll use them most often in these situations:": {
    "_translate": "Boxes 不会有性能开销，除了将数据存储在堆上而不是栈上。但它们也没有太多额外的功能。你最常在以下情况下使用它们：",
    "_note": ""
  },
  "Using a Box<T> to Store Data on the Heap": {
    "_translate": "<a class=\"header\" href=\"#using-a-boxt-to-store-data-on-the-heap\">使用 <code>Box&lt;T&gt;</code> 在堆上存储数据</a>",
    "_note": ""
  },
  "Before we discuss the heap storage use case for Box<T>, we’ll cover the syntax and how to interact with values stored within a Box<T>.": {
    "_translate": "在我们讨论 <code>Box&lt;T&gt;</code> 的堆存储用例之前，我们将介绍其语法以及如何与存储在 <code>Box&lt;T&gt;</code> 中的值进行交互。",
    "_note": ""
  },
  "We’ll demonstrate the first situation in the “Enabling Recursive Types with Boxes” section. In the second case, transferring ownership of a large amount of data can take a long time because the data is copied around on the stack. To improve performance in this situation, we can store the large amount of data on the heap in a box. Then, only the small amount of pointer data is copied around on the stack, while the data it references stays in one place on the heap. The third case is known as a trait object, and Chapter 18 devotes an entire section, “Using Trait Objects That Allow for Values of Different Types,” just to that topic. So what you learn here you’ll apply again in Chapter 18!": {
    "_translate": "我们将通过<a href=\"#enabling-recursive-types-with-boxes\">“使用盒子启用递归类型”</a><!-- ignore -->部分来演示第一种情况。在\n第二种情况下，转移大量数据的所有权可能需要很长时间，因为数据会在栈上被复制。为了在这种情况下提高性能，我们可以将大量数据存储在堆上的盒子中。\n然后，只有少量的指针数据会在栈上被复制，而它引用的数据会保持在堆上的一个位置。第三种情况被称为<em>特征对象</em>，第18章专门有一个部分，<a href=\"ch18-02-trait-objects.html#using-trait-objects-that-allow-for-values-of-different-types\">“使用允许不同类型的值的特征对象”</a><!--\nignore -->，专门讨论这个主题。所以你在这里学到的内容在第18章还会再次应用！",
    "_note": ""
  },
  "Listing 15-1 shows how to use a box to store an i32 value on the heap:": {
    "_translate": "列表 15-1 显示了如何使用一个盒子在堆上存储一个 <code>i32</code> 值：",
    "_note": ""
  },
  "Putting a single value on the heap isn’t very useful, so you won’t use boxes by themselves in this way very often. Having values like a single i32 on the stack, where they’re stored by default, is more appropriate in the majority of situations. Let’s look at a case where boxes allow us to define types that we wouldn’t be allowed to if we didn’t have boxes.": {
    "_translate": "将单个值放在堆上并不是很有用，所以你不会经常以这种方式单独使用盒子。像单个<code>i32</code>这样的值，默认存储在栈上，在大多数情况下更为合适。让我们看看一个使用盒子可以定义我们没有盒子就无法定义的类型的例子。",
    "_note": ""
  },
  "We define the variable b to have the value of a Box that points to the value 5, which is allocated on the heap. This program will print b = 5; in this case, we can access the data in the box similar to how we would if this data were on the stack. Just like any owned value, when a box goes out of scope, as b does at the end of main, it will be deallocated. The deallocation happens both for the box (stored on the stack) and the data it points to (stored on the heap).": {
    "_translate": "我们定义变量<code>b</code>具有指向值<code>5</code>的<code>Box</code>，该值分配在堆上。此程序将打印<code>b = 5</code>；在这种情况下，我们可以像访问栈上的数据一样访问盒子中的数据。就像任何拥有值一样，当盒子超出作用域时，例如<code>b</code>在<code>main</code>结束时，它将被释放。释放包括盒子（存储在栈上）和它指向的数据（存储在堆上）。",
    "_note": ""
  },
  "Enabling Recursive Types with Boxes": {
    "_translate": "<a class=\"header\" href=\"#enabling-recursive-types-with-boxes\">使用 Box 启用递归类型</a>",
    "_note": ""
  },
  "A value of recursive type can have another value of the same type as part of itself. Recursive types pose an issue because at compile time Rust needs to know how much space a type takes up. However, the nesting of values of recursive types could theoretically continue infinitely, so Rust can’t know how much space the value needs. Because boxes have a known size, we can enable recursive types by inserting a box in the recursive type definition.": {
    "_translate": "<em>递归类型</em>的值可以包含另一个相同类型的值。递归类型存在问题，因为在编译时 Rust 需要知道一个类型占用多少空间。然而，递归类型值的嵌套理论上可以无限继续，所以 Rust 无法知道该值需要多少空间。因为盒子有一个已知的大小，我们可以通过在递归类型定义中插入一个盒子来启用递归类型。",
    "_note": ""
  },
  "As an example of a recursive type, let’s explore the cons list. This is a data type commonly found in functional programming languages. The cons list type we’ll define is straightforward except for the recursion; therefore, the concepts in the example we’ll work with will be useful any time you get into more complex situations involving recursive types.": {
    "_translate": "作为递归类型的一个例子，让我们探讨一下<em>cons list</em>。这是一种在函数式编程语言中常见的数据类型。我们将定义的 cons list 类型除了递归之外非常直接；因此，我们将在示例中使用的概念在涉及更复杂递归类型的情况时也会很有用。",
    "_note": ""
  },
  "For example, here’s a pseudocode representation of a cons list containing the list 1, 2, 3 with each pair in parentheses:": {
    "_translate": "例如，以下是一个包含列表 1, 2, 3 的 cons 列表的伪代码表示，每对元素用括号表示：",
    "_note": ""
  },
  "A cons list is a data structure that comes from the Lisp programming language and its dialects and is made up of nested pairs, and is the Lisp version of a linked list. Its name comes from the cons function (short for “construct function”) in Lisp that constructs a new pair from its two arguments. By calling cons on a pair consisting of a value and another pair, we can construct cons lists made up of recursive pairs.": {
    "_translate": "一个 <em>cons list</em> 是一种来自 Lisp 编程语言及其方言的数据结构，由嵌套的对组成，是 Lisp 版本的链表。它的名称来源于 Lisp 中的 <code>cons</code> 函数（“构造函数”的缩写），该函数从其两个参数构造一个新的对。通过在由一个值和另一个对组成的对上调用 <code>cons</code>，我们可以构造由递归对组成的 cons 列表。",
    "_note": ""
  },
  "Each item in a cons list contains two elements: the value of the current item and the next item. The last item in the list contains only a value called Nil without a next item. A cons list is produced by recursively calling the cons function. The canonical name to denote the base case of the recursion is Nil. Note that this is not the same as the “null” or “nil” concept in Chapter 6, which is an invalid or absent value.": {
    "_translate": "每个 cons 列表中的项目包含两个元素：当前项目的值和下一个项目。列表中的最后一个项目仅包含一个称为 <code>Nil</code> 的值，没有下一个项目。cons 列表是通过递归调用 <code>cons</code> 函数生成的。递归的基本情况的规范名称是 <code>Nil</code>。请注意，这与第 6 章中的“null”或“nil”概念不同，后者表示无效或不存在的值。",
    "_note": ""
  },
  "The cons list isn’t a commonly used data structure in Rust. Most of the time when you have a list of items in Rust, Vec<T> is a better choice to use. Other, more complex recursive data types are useful in various situations, but by starting with the cons list in this chapter, we can explore how boxes let us define a recursive data type without much distraction.": {
    "_translate": "cons 列表在 Rust 中并不是常用的数据结构。大多数时候，当你在 Rust 中有一系列项目时，<code>Vec&lt;T&gt;</code> 是更好的选择。其他更复杂的递归数据类型 <em>确实</em> 在各种情况下有用，但通过在本章中从 cons 列表开始，我们可以探索盒子如何让我们定义递归数据类型而不受太多干扰。",
    "_note": ""
  },
  "Listing 15-2 contains an enum definition for a cons list. Note that this code won’t compile yet because the List type doesn’t have a known size, which we’ll demonstrate.": {
    "_translate": "列表 15-2 包含一个 cons 列表的枚举定义。请注意，此代码还不能编译，因为 <code>List</code> 类型没有已知的大小，我们将对此进行演示。",
    "_note": ""
  },
  "Note: We’re implementing a cons list that holds only i32 values for the purposes of this example. We could have implemented it using generics, as we discussed in Chapter 10, to define a cons list type that could store values of any type.": {
    "_translate": "注意：为了这个例子，我们实现了一个只持有<code>i32</code>值的 cons 列表。我们本可以使用泛型来实现它，正如我们在第 10 章中讨论的那样，定义一个可以存储任何类型值的 cons 列表类型。",
    "_note": ""
  },
  "Using the List type to store the list 1, 2, 3 would look like the code in Listing 15-3:": {
    "_translate": "使用 <code>List</code> 类型来存储列表 <code>1, 2, 3</code> 将如清单 15-3 所示：",
    "_note": ""
  },
  "If we try to compile the code in Listing 15-3, we get the error shown in Listing 15-4:": {
    "_translate": "如果我们尝试编译列表 15-3 中的代码，我们会得到列表 15-4 中显示的错误：",
    "_note": ""
  },
  "The first Cons value holds 1 and another List value. This List value is another Cons value that holds 2 and another List value. This List value is one more Cons value that holds 3 and a List value, which is finally Nil, the non-recursive variant that signals the end of the list.": {
    "_translate": "第一个 <code>Cons</code> 值持有 <code>1</code> 和另一个 <code>List</code> 值。这个 <code>List</code> 值是\n另一个 <code>Cons</code> 值，持有 <code>2</code> 和另一个 <code>List</code> 值。这个 <code>List</code> 值\n是另一个 <code>Cons</code> 值，持有 <code>3</code> 和一个 <code>List</code> 值，最终是\n<code>Nil</code>，这个非递归变体表示列表的结束。",
    "_note": ""
  },
  "Recall the Message enum we defined in Listing 6-2 when we discussed enum definitions in Chapter 6:": {
    "_translate": "回忆我们在第 6 章讨论枚举定义时，在列表 6-2 中定义的 <code>Message</code> 枚举：",
    "_note": ""
  },
  "The error shows this type “has infinite size.” The reason is that we’ve defined List with a variant that is recursive: it holds another value of itself directly. As a result, Rust can’t figure out how much space it needs to store a List value. Let’s break down why we get this error. First, we’ll look at how Rust decides how much space it needs to store a value of a non-recursive type.": {
    "_translate": "错误显示这种类型“具有无限大小。”原因是我们在定义<code>List</code>时使用了一个递归的变体：它直接持有另一个自身的值。因此，Rust 无法确定存储<code>List</code>值所需的空间。让我们分析为什么会发生这个错误。首先，我们将看看 Rust 是如何决定存储非递归类型值所需的空间。",
    "_note": ""
  },
  "To determine how much space to allocate for a Message value, Rust goes through each of the variants to see which variant needs the most space. Rust sees that Message::Quit doesn’t need any space, Message::Move needs enough space to store two i32 values, and so forth. Because only one variant will be used, the most space a Message value will need is the space it would take to store the largest of its variants.": {
    "_translate": "为了确定为 <code>Message</code> 值分配多少空间，Rust 会遍历每个变体以查看哪个变体需要最多的空间。Rust 发现 <code>Message::Quit</code> 不需要任何空间，<code>Message::Move</code> 需要足够的空间来存储两个 <code>i32</code> 值，依此类推。因为只有一个变体会被使用，所以 <code>Message</code> 值需要的最大空间就是存储其最大变体所需的空间。",
    "_note": ""
  },
  "Figure 15-1: An infinite List consisting of infinite Cons variants": {
    "_translate": "<span class=\"caption\">图15-1：由无限的 <code>Cons</code> 变体组成的无限 <code>List</code></span>",
    "_note": ""
  },
  "Contrast this with what happens when Rust tries to determine how much space a recursive type like the List enum in Listing 15-2 needs. The compiler starts by looking at the Cons variant, which holds a value of type i32 and a value of type List. Therefore, Cons needs an amount of space equal to the size of an i32 plus the size of a List. To figure out how much memory the List type needs, the compiler looks at the variants, starting with the Cons variant. The Cons variant holds a value of type i32 and a value of type List, and this process continues infinitely, as shown in Figure 15-1.": {
    "_translate": "将此与 Rust 尝试确定像 Listing 15-2 中的 <code>List</code> 枚举这样的递归类型需要多少空间时发生的情况进行对比。编译器首先查看 <code>Cons</code> 变体，它包含一个类型为 <code>i32</code> 的值和一个类型为 <code>List</code> 的值。因此，<code>Cons</code> 需要的空间量等于 <code>i32</code> 的大小加上 <code>List</code> 的大小。为了确定 <code>List</code> 类型需要多少内存，编译器查看变体，从 <code>Cons</code> 变体开始。<code>Cons</code> 变体包含一个类型为 <code>i32</code> 的值和一个类型为 <code>List</code> 的值，这个过程会无限继续，如图 15-1 所示。",
    "_note": ""
  },
  "Because Rust can’t figure out how much space to allocate for recursively defined types, the compiler gives an error with this helpful suggestion:": {
    "_translate": "因为 Rust 无法确定为递归定义的类型分配多少空间，编译器会给出一个带有此有用建议的错误：",
    "_note": ""
  },
  "In this suggestion, “indirection” means that instead of storing a value directly, we should change the data structure to store the value indirectly by storing a pointer to the value instead.": {
    "_translate": "在这个建议中，“间接性”意味着我们不应该直接存储值，而应该通过存储指向该值的指针来间接地存储值。",
    "_note": ""
  },
  "We can change the definition of the List enum in Listing 15-2 and the usage of the List in Listing 15-3 to the code in Listing 15-5, which will compile:": {
    "_translate": "我们可以更改列表 15-2 中的 <code>List</code> 枚举定义和列表 15-3 中的 <code>List</code> 使用，使其变为列表 15-5 中的代码，这样可以编译：",
    "_note": ""
  },
  "The Cons variant needs the size of an i32 plus the space to store the box’s pointer data. The Nil variant stores no values, so it needs less space than the Cons variant. We now know that any List value will take up the size of an i32 plus the size of a box’s pointer data. By using a box, we’ve broken the infinite, recursive chain, so the compiler can figure out the size it needs to store a List value. Figure 15-2 shows what the Cons variant looks like now.": {
    "_translate": "<code>Cons</code> 变体需要一个 <code>i32</code> 的大小加上存储盒子指针数据的空间。<code>Nil</code> 变体不存储任何值，所以它比 <code>Cons</code> 变体占用的空间更少。我们现在知道，任何 <code>List</code> 值都将占用一个 <code>i32</code> 的大小加上一个盒子指针数据的大小。通过使用盒子，我们打破了无限的递归链，因此编译器可以计算出存储一个 <code>List</code> 值所需的空间。图 15-2 显示了现在的 <code>Cons</code> 变体。",
    "_note": ""
  },
  "Because a Box<T> is a pointer, Rust always knows how much space a Box<T> needs: a pointer’s size doesn’t change based on the amount of data it’s pointing to. This means we can put a Box<T> inside the Cons variant instead of another List value directly. The Box<T> will point to the next List value that will be on the heap rather than inside the Cons variant. Conceptually, we still have a list, created with lists holding other lists, but this implementation is now more like placing the items next to one another rather than inside one another.": {
    "_translate": "因为 <code>Box&lt;T&gt;</code> 是一个指针，Rust 始终知道 <code>Box&lt;T&gt;</code> 需要多少空间：指针的大小不会根据它指向的数据量而变化。这意味着我们可以将 <code>Box&lt;T&gt;</code> 放在 <code>Cons</code> 变体中，而不是直接放另一个 <code>List</code> 值。<code>Box&lt;T&gt;</code> 将指向堆上的下一个 <code>List</code> 值，而不是放在 <code>Cons</code> 变体内部。从概念上讲，我们仍然有一个列表，通过列表包含其他列表来创建，但这种实现现在更像是将项目并排放置而不是嵌套在一起。",
    "_note": ""
  },
  "Figure 15-2: A List that is not infinitely sized because Cons holds a Box": {
    "_translate": "<span class=\"caption\">图15-2: 一个不是无限大小的<code>List</code>\n因为<code>Cons</code>持有一个<code>Box</code></span>",
    "_note": ""
  },
  "Boxes provide only the indirection and heap allocation; they don’t have any other special capabilities, like those we’ll see with the other smart pointer types. They also don’t have the performance overhead that these special capabilities incur, so they can be useful in cases like the cons list where the indirection is the only feature we need. We’ll look at more use cases for boxes in Chapter 18, too.": {
    "_translate": "Boxes 只提供间接性和堆分配；它们没有其他特殊功能，比如我们将在其他智能指针类型中看到的那些。它们也没有这些特殊功能带来的性能开销，因此在只需要间接性的情况下（如 cons 列表），它们可以非常有用。我们还将在第 18 章中探讨更多使用 Boxes 的场景。",
    "_note": ""
  },
  "The Box<T> type is a smart pointer because it implements the Deref trait, which allows Box<T> values to be treated like references. When a Box<T> value goes out of scope, the heap data that the box is pointing to is cleaned up as well because of the Drop trait implementation. These two traits will be even more important to the functionality provided by the other smart pointer types we’ll discuss in the rest of this chapter. Let’s explore these two traits in more detail.": {
    "_translate": "<code>Box&lt;T&gt;</code> 类型是一个智能指针，因为它实现了 <code>Deref</code> 特性，这使得 <code>Box&lt;T&gt;</code> 值可以像引用一样被处理。当 <code>Box&lt;T&gt;</code> 值超出作用域时，由于实现了 <code>Drop</code> 特性，盒子指向的堆数据也会被清理。这两个特性对于本章后续讨论的其他智能指针类型所提供的功能将更加重要。让我们更详细地探讨这两个特性。",
    "_note": ""
  },
  "Using Box<T> to Point to Data on the Heap - The Rust Programming Language": {
    "_translate": "使用 Box&lt;T&gt; 指向堆上的数据 - 《Rust 编程语言》",
    "_note": ""
  },
  "When you have a type whose size can’t be known at compile time and you want to use a value of that type in a context that requires an exact size": {
    "_translate": "当你有一个在编译时无法确定大小的类型，并且你想在需要确切大小的上下文中使用该类型的值时，",
    "_note": ""
  },
  "When you have a large amount of data and you want to transfer ownership but ensure the data won’t be copied when you do so": {
    "_translate": "当你有大量的数据并且你想转移所有权，但确保在这样做时数据不会被复制，",
    "_note": ""
  },
  "When you want to own a value and you care only that it’s a type that implements a particular trait rather than being of a specific type": {
    "_translate": "当你想要拥有一个值，而你只关心它是一个实现了特定特征的类型，而不是特定的类型时，",
    "_note": ""
  },
  "More Information About the Cons List": {
    "_translate": "<a class=\"header\" href=\"#more-information-about-the-cons-list\">关于 Cons 列表的更多信息</a>",
    "_note": ""
  },
  "Computing the Size of a Non-Recursive Type": {
    "_translate": "<a class=\"header\" href=\"#computing-the-size-of-a-non-recursive-type\">计算非递归类型的大小</a>",
    "_note": ""
  },
  "Using Box<T> to Get a Recursive Type with a Known Size": {
    "_translate": "<a class=\"header\" href=\"#using-boxt-to-get-a-recursive-type-with-a-known-size\">使用 <code>Box&lt;T&gt;</code> 获取具有已知大小的递归类型</a>",
    "_note": ""
  },
  "We define the variable b to have the value of a Box that points to the value 5, which is allocated on the heap. This program will print b = 5; in this case, we can access the data in the box similarly to how we would if this data were on the stack. Just like any owned value, when a box goes out of scope, as b does at the end of main, it will be deallocated. The deallocation happens both for the box (stored on the stack) and the data it points to (stored on the heap).": {
    "_translate": "我们定义变量<code>b</code>具有指向值<code>5</code>的<code>Box</code>，该值分配在堆上。此程序将打印<code>b = 5</code>；在这种情况下，我们可以像访问栈上的数据一样访问盒中的数据。就像任何拥有值一样，当盒超出作用域时，如<code>b</code>在<code>main</code>结束时那样，它将被释放。释放会同时发生于盒（存储在栈上）和它指向的数据（存储在堆上）。",
    "_note": ""
  },
  "A value of recursive type can have another value of the same type as part of itself. Recursive types pose an issue because, at compile time, Rust needs to know how much space a type takes up. However, the nesting of values of recursive types could theoretically continue infinitely, so Rust can’t know how much space the value needs. Because boxes have a known size, we can enable recursive types by inserting a box in the recursive type definition.": {
    "_translate": "一个<em>递归类型</em>的值可以包含另一个相同类型的值。递归类型存在问题，因为在编译时，Rust 需要知道一个类型占用多少空间。然而，递归类型值的嵌套理论上可以无限继续，所以 Rust 无法知道该值需要多少空间。因为盒子有一个已知的大小，我们可以通过在递归类型定义中插入一个盒子来启用递归类型。",
    "_note": ""
  },
  "Each item in a cons list contains two elements: the value of the current item and the next item. The last item in the list contains only a value called Nil without a next item. A cons list is produced by recursively calling the cons function. The canonical name to denote the base case of the recursion is Nil. Note that this is not the same as the “null” or “nil” concept discussed in Chapter 6, which is an invalid or absent value.": {
    "_translate": "cons 列表中的每个项包含两个元素：当前项的值和下一个项。列表中的最后一项仅包含一个名为 <code>Nil</code> 的值，没有下一个项。cons 列表是通过递归调用 <code>cons</code> 函数生成的。递归的基本情况的规范名称是 <code>Nil</code>。请注意，这与第 6 章中讨论的“null”或“nil”概念不同，后者表示无效或不存在的值。",
    "_note": ""
  },
  "Using Box<T> to Store Data on the Heap": {
    "_translate": "<a class=\"header\" href=\"#using-boxt-to-store-data-on-the-heap\">使用 <code>Box&lt;T&gt;</code> 在堆上存储数据</a>",
    "_note": ""
  },
  "We’ll demonstrate the first situation in “Enabling Recursive Types with Boxes”. In the second case, transferring ownership of a large amount of data can take a long time because the data is copied around on the stack. To improve performance in this situation, we can store the large amount of data on the heap in a box. Then, only the small amount of pointer data is copied around on the stack, while the data it references stays in one place on the heap. The third case is known as a trait object, and “Using Trait Objects That Allow for Values of Different Types,” in Chapter 18 is devoted to that topic. So what you learn here you’ll apply again in that section!": {
    "_translate": "我们将通过<a href=\"#enabling-recursive-types-with-boxes\">“使用Box启用递归类型”</a><!-- ignore -->来演示第一种情况。在第二种\n情况下，转移大量数据的所有权可能需要很长时间\n因为数据会在栈上被复制。为了在这种情况下提高性能，我们可以将大量数据存储在堆上的一个Box中。然后，\n只有少量的指针数据会在栈上被复制，而它引用的数据会保持在堆上的一个位置。第三种情况被称为<em>trait对象</em>，第18章的<a href=\"ch18-02-trait-objects.html#using-trait-objects-that-allow-for-values-of-different-types\">“使用允许不同类型的值的trait对象”</a><!-- ignore -->专门讨论了这个主题。\n所以你在这里学到的内容在那一节中也会再次应用！",
    "_note": ""
  },
  "Listing 15-1 shows how to use a box to store an i32 value on the heap.": {
    "_translate": "列表 15-1 显示了如何使用一个盒子在堆上存储一个 <code>i32</code> 值。",
    "_note": ""
  },
  "A value of a recursive type can have another value of the same type as part of itself. Recursive types pose an issue because Rust needs to know at compile time how much space a type takes up. However, the nesting of values of recursive types could theoretically continue infinitely, so Rust can’t know how much space the value needs. Because boxes have a known size, we can enable recursive types by inserting a box in the recursive type definition.": {
    "_translate": "一个<em>递归类型</em>的值可以包含另一个相同类型的值作为其自身的一部分。递归类型存在问题，因为Rust需要在编译时知道一个类型占用多少空间。然而，递归类型值的嵌套理论上可以无限继续，所以Rust无法知道该值需要多少空间。因为盒子有一个已知的大小，我们可以通过在递归类型定义中插入一个盒子来启用递归类型。",
    "_note": ""
  },
  "Using the List type to store the list 1, 2, 3 would look like the code in Listing 15-3.": {
    "_translate": "使用 <code>List</code> 类型来存储列表 <code>1, 2, 3</code> 将如清单 15-3 所示的代码。",
    "_note": ""
  },
  "A cons list is a data structure that comes from the Lisp programming language and its dialects, is made up of nested pairs, and is the Lisp version of a linked list. Its name comes from the cons function (short for construct function) in Lisp that constructs a new pair from its two arguments. By calling cons on a pair consisting of a value and another pair, we can construct cons lists made up of recursive pairs.": {
    "_translate": "一个 <em>cons list</em> 是一种来自 Lisp 编程语言及其方言的数据结构，由嵌套的对组成，是 Lisp 版本的链表。它的名称来源于 Lisp 中的 <code>cons</code> 函数（即 <em>构造函数</em> 的缩写），该函数从其两个参数构建一个新的对。通过在由一个值和另一个对组成的对上调用 <code>cons</code>，我们可以构建由递归对组成的 cons 列表。",
    "_note": ""
  },
  "If we try to compile the code in Listing 15-3, we get the error shown in Listing 15-4.": {
    "_translate": "如果我们尝试编译列表 15-3 中的代码，我们会得到列表 15-4 中所示的错误。",
    "_note": ""
  },
  "The error shows this type “has infinite size.” The reason is that we’ve defined List with a variant that is recursive: it holds another value of itself directly. As a result, Rust can’t figure out how much space it needs to store a List value. Let’s break down why we get this error. First we’ll look at how Rust decides how much space it needs to store a value of a non-recursive type.": {
    "_translate": "错误显示这种类型“具有无限大小。”原因是我们在定义<code>List</code>时使用了一个递归的变体：它直接持有另一个自身的值。因此，Rust 无法确定存储一个<code>List</code>值需要多少空间。让我们分析为什么会发生这个错误。首先，我们将看看 Rust 是如何决定存储一个非递归类型值所需的空间。",
    "_note": ""
  },
  "In this suggestion, indirection means that instead of storing a value directly, we should change the data structure to store the value indirectly by storing a pointer to the value instead.": {
    "_translate": "在这个建议中，<em>间接性</em>意味着我们不应该直接存储值，而应该通过存储指向该值的指针来间接地存储值。",
    "_note": ""
  },
  "We can change the definition of the List enum in Listing 15-2 and the usage of the List in Listing 15-3 to the code in Listing 15-5, which will compile.": {
    "_translate": "我们可以更改列表 15-2 中的 <code>List</code> 枚举定义和列表 15-3 中的 <code>List</code> 使用，使其变为列表 15-5 中的代码，这样可以编译。",
    "_note": ""
  },
  "Boxes provide only the indirection and heap allocation; they don’t have any other special capabilities, like those we’ll see with the other smart pointer types. They also don’t have the performance overhead that these special capabilities incur, so they can be useful in cases like the cons list where the indirection is the only feature we need. We’ll look at more use cases for boxes in Chapter 18.": {
    "_translate": "Boxes 只提供间接性和堆分配；它们没有其他特殊功能，比如我们将在其他智能指针类型中看到的那些。它们也没有这些特殊功能带来的性能开销，因此在只需要间接性的情况下（如 cons 列表），它们可以非常有用。我们将在第 18 章中探讨更多使用 Boxes 的场景。",
    "_note": ""
  },
  "Putting a single value on the heap isn’t very useful, so you won’t use boxes by themselves in this way very often. Having values like a single i32 on the stack, where they’re stored by default, is more appropriate in the majority of situations. Let’s look at a case where boxes allow us to define types that we wouldn’t be allowed to define if we didn’t have boxes.": {
    "_translate": "将单个值放在堆上并不是很有用，所以你不会经常以这种方式单独使用盒子。像单个<code>i32</code>这样的值，默认存储在栈上，在大多数情况下更为合适。让我们来看一个例子，如果没有盒子，我们是无法定义这些类型的。",
    "_note": ""
  },
  "The Cons variant needs the size of an i32 plus the space to store the box’s pointer data. The Nil variant stores no values, so it needs less space on the stack than the Cons variant. We now know that any List value will take up the size of an i32 plus the size of a box’s pointer data. By using a box, we’ve broken the infinite, recursive chain, so the compiler can figure out the size it needs to store a List value. Figure 15-2 shows what the Cons variant looks like now.": {
    "_translate": "<code>Cons</code> 变体需要一个 <code>i32</code> 的大小加上存储盒子指针数据的空间。<code>Nil</code> 变体不存储任何值，因此它在栈上占用的空间比 <code>Cons</code> 变体少。我们现在知道，任何 <code>List</code> 值都将占用一个 <code>i32</code> 的大小加上一个盒子指针数据的大小。通过使用盒子，我们打破了无限递归链，因此编译器可以计算出存储 <code>List</code> 值所需的空间。图 15-2 显示了现在的 <code>Cons</code> 变体的样子。",
    "_note": ""
  }
}