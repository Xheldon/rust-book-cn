{
  "Rc<T>, the Reference Counted Smart Pointer": {
    "_translate": "<a class=\"header\" href=\"#rct-the-reference-counted-smart-pointer\"><code>Rc&lt;T&gt;</code>, 引用计数智能指针</a>",
    "_note": ""
  },
  "In the majority of cases, ownership is clear: you know exactly which variable owns a given value. However, there are cases when a single value might have multiple owners. For example, in graph data structures, multiple edges might point to the same node, and that node is conceptually owned by all of the edges that point to it. A node shouldn’t be cleaned up unless it doesn’t have any edges pointing to it and so has no owners.": {
    "_translate": "在大多数情况下，所有权是明确的：你确切地知道哪个变量拥有给定的值。然而，存在单个值可能有多个所有者的情况。例如，在图数据结构中，多个边可能指向同一个节点，该节点在概念上由所有指向它的边共同拥有。除非节点没有任何边指向它，因此没有任何所有者，否则不应清理该节点。",
    "_note": ""
  },
  "You have to enable multiple ownership explicitly by using the Rust type Rc<T>, which is an abbreviation for reference counting. The Rc<T> type keeps track of the number of references to a value to determine whether or not the value is still in use. If there are zero references to a value, the value can be cleaned up without any references becoming invalid.": {
    "_translate": "您必须通过使用 Rust 类型 <code>Rc&lt;T&gt;</code> 显式启用多重所有权，这是 <em>引用计数</em> 的缩写。<code>Rc&lt;T&gt;</code> 类型跟踪对一个值的引用数量，以确定该值是否仍在使用中。如果对一个值的引用数量为零，该值可以被清理，而不会使任何引用失效。",
    "_note": ""
  },
  "Imagine Rc<T> as a TV in a family room. When one person enters to watch TV, they turn it on. Others can come into the room and watch the TV. When the last person leaves the room, they turn off the TV because it’s no longer being used. If someone turns off the TV while others are still watching it, there would be uproar from the remaining TV watchers!": {
    "_translate": "将 <code>Rc&lt;T&gt;</code> 想象成家庭房间里的电视。当一个人进入房间看电视时，他们会打开电视。其他人可以进入房间一起看电视。当最后一个人离开房间时，他们会关掉电视，因为电视不再被使用。如果有人在其他人还在看电视时关掉电视，剩下的电视观众会非常不满！",
    "_note": ""
  },
  "We use the Rc<T> type when we want to allocate some data on the heap for multiple parts of our program to read and we can’t determine at compile time which part will finish using the data last. If we knew which part would finish last, we could just make that part the data’s owner, and the normal ownership rules enforced at compile time would take effect.": {
    "_translate": "当我们希望在堆上分配一些数据，供程序的多个部分读取，并且无法在编译时确定哪一部分会最后使用完这些数据时，我们会使用<code>Rc&lt;T&gt;</code>类型。如果我们知道哪一部分会最后使用完，就可以让那一部分成为数据的所有者，那么编译时强制执行的正常所有权规则就会生效。",
    "_note": ""
  },
  "Note that Rc<T> is only for use in single-threaded scenarios. When we discuss concurrency in Chapter 16, we’ll cover how to do reference counting in multithreaded programs.": {
    "_translate": "请注意，<code>Rc&lt;T&gt;</code> 仅用于单线程场景。当我们在第 16 章讨论并发时，我们将介绍如何在多线程程序中进行引用计数。",
    "_note": ""
  },
  "Using Rc<T> to Share Data": {
    "_translate": "<a class=\"header\" href=\"#using-rct-to-share-data\">使用 <code>Rc&lt;T&gt;</code> 共享数据</a>",
    "_note": ""
  },
  "Figure 15-3: Two lists, b and c, sharing ownership of a third list, a": {
    "_translate": "<span class=\"caption\">图15-3: 两个列表，<code>b</code> 和 <code>c</code>，共享第三个列表 <code>a</code> 的所有权</span>",
    "_note": ""
  },
  "Let’s return to our cons list example in Listing 15-5. Recall that we defined it using Box<T>. This time, we’ll create two lists that both share ownership of a third list. Conceptually, this looks similar to Figure 15-3:": {
    "_translate": "让我们回到第 15-5 列表中的 cons 列表示例。回想一下，我们使用 <code>Box&lt;T&gt;</code> 定义了它。这次，我们将创建两个列表，它们都共享第三个列表的所有权。从概念上讲，这看起来类似于图 15-3：",
    "_note": ""
  },
  "Trying to implement this scenario using our definition of List with Box<T> won’t work, as shown in Listing 15-17:": {
    "_translate": "尝试使用我们的 <code>List</code> 定义和 <code>Box&lt;T&gt;</code> 实现这个场景\n不会奏效，如清单 15-17 所示：",
    "_note": ""
  },
  "When we compile this code, we get this error:": {
    "_translate": "当我们编译这段代码时，我们得到这个错误：",
    "_note": ""
  },
  "We’ll create list a that contains 5 and then 10. Then we’ll make two more lists: b that starts with 3 and c that starts with 4. Both b and c lists will then continue on to the first a list containing 5 and 10. In other words, both lists will share the first list containing 5 and 10.": {
    "_translate": "我们将创建一个包含 5 和 10 的列表 <code>a</code>。然后我们将创建两个更多的列表：<code>b</code> 以 3 开头，<code>c</code> 以 4 开头。<code>b</code> 和 <code>c</code> 两个列表都将接着包含 5 和 10 的第一个 <code>a</code> 列表。换句话说，两个列表都将共享包含 5 和 10 的第一个列表。",
    "_note": ""
  },
  "We could change the definition of Cons to hold references instead, but then we would have to specify lifetime parameters. By specifying lifetime parameters, we would be specifying that every element in the list will live at least as long as the entire list. This is the case for the elements and lists in Listing 15-17, but not in every scenario.": {
    "_translate": "我们可以将 <code>Cons</code> 的定义更改为持有引用，但这样我们就必须指定生命周期参数。通过指定生命周期参数，我们将指定列表中的每个元素至少与整个列表一样长。这是列表 15-17 中元素和列表的情况，但并非所有情况都是如此。",
    "_note": ""
  },
  "The Cons variants own the data they hold, so when we create the b list, a is moved into b and b owns a. Then, when we try to use a again when creating c, we’re not allowed to because a has been moved.": {
    "_translate": "<code>Cons</code> 变体拥有它们持有的数据，因此当我们创建 <code>b</code> 列表时，<code>a</code> 被移动到 <code>b</code> 中，<code>b</code> 拥有 <code>a</code>。然后，当我们尝试在创建 <code>c</code> 时再次使用 <code>a</code>，我们不被允许这样做，因为 <code>a</code> 已经被移动。",
    "_note": ""
  },
  "We need to add a use statement to bring Rc<T> into scope because it’s not in the prelude. In main, we create the list holding 5 and 10 and store it in a new Rc<List> in a. Then when we create b and c, we call the Rc::clone function and pass a reference to the Rc<List> in a as an argument.": {
    "_translate": "我们需要添加一个 <code>use</code> 语句来将 <code>Rc&lt;T&gt;</code> 引入作用域，因为它不在前言中。在 <code>main</code> 中，我们创建了一个包含 5 和 10 的列表，并将其存储在 <code>a</code> 中的新 <code>Rc&lt;List&gt;</code> 中。然后当我们创建 <code>b</code> 和 <code>c</code> 时，我们调用 <code>Rc::clone</code> 函数并将 <code>a</code> 中的 <code>Rc&lt;List&gt;</code> 的引用作为参数传递。",
    "_note": ""
  },
  "Instead, we’ll change our definition of List to use Rc<T> in place of Box<T>, as shown in Listing 15-18. Each Cons variant will now hold a value and an Rc<T> pointing to a List. When we create b, instead of taking ownership of a, we’ll clone the Rc<List> that a is holding, thereby increasing the number of references from one to two and letting a and b share ownership of the data in that Rc<List>. We’ll also clone a when creating c, increasing the number of references from two to three. Every time we call Rc::clone, the reference count to the data within the Rc<List> will increase, and the data won’t be cleaned up unless there are zero references to it.": {
    "_translate": "相反，我们将更改 <code>List</code> 的定义，用 <code>Rc&lt;T&gt;</code> 替换 <code>Box&lt;T&gt;</code>，如清单 15-18 所示。每个 <code>Cons</code> 变体现在将持有一个值和一个指向 <code>List</code> 的 <code>Rc&lt;T&gt;</code>。当我们创建 <code>b</code> 时，不是获取 <code>a</code> 的所有权，而是克隆 <code>a</code> 持有的 <code>Rc&lt;List&gt;</code>，从而将引用数从一增加到二，使 <code>a</code> 和 <code>b</code> 共享该 <code>Rc&lt;List&gt;</code> 中的数据的所有权。在创建 <code>c</code> 时，我们也会克隆 <code>a</code>，将引用数从二增加到三。每次调用 <code>Rc::clone</code> 时，<code>Rc&lt;List&gt;</code> 中数据的引用计数都会增加，除非引用计数为零，否则数据不会被清理。",
    "_note": ""
  },
  "Cloning an Rc<T> Increases the Reference Count": {
    "_translate": "<a class=\"header\" href=\"#cloning-an-rct-increases-the-reference-count\">克隆 <code>Rc&lt;T&gt;</code> 会增加引用计数</a>",
    "_note": ""
  },
  "Let’s change our working example in Listing 15-18 so we can see the reference counts changing as we create and drop references to the Rc<List> in a.": {
    "_translate": "让我们修改列表 15-18 中的工作示例，以便在我们创建和删除对 <code>a</code> 中的 <code>Rc&lt;List&gt;</code> 的引用时，可以看到引用计数的变化。",
    "_note": ""
  },
  "We could have called a.clone() rather than Rc::clone(&a), but Rust’s convention is to use Rc::clone in this case. The implementation of Rc::clone doesn’t make a deep copy of all the data like most types’ implementations of clone do. The call to Rc::clone only increments the reference count, which doesn’t take much time. Deep copies of data can take a lot of time. By using Rc::clone for reference counting, we can visually distinguish between the deep-copy kinds of clones and the kinds of clones that increase the reference count. When looking for performance problems in the code, we only need to consider the deep-copy clones and can disregard calls to Rc::clone.": {
    "_translate": "我们可以调用 <code>a.clone()</code> 而不是 <code>Rc::clone(&amp;a)</code>，但 Rust 的惯例是在这种情况下使用 <code>Rc::clone</code>。<code>Rc::clone</code> 的实现不会像大多数类型的 <code>clone</code> 实现那样对所有数据进行深度复制。调用 <code>Rc::clone</code> 只是增加引用计数，这不会花费太多时间。数据的深度复制可能会花费很多时间。通过使用 <code>Rc::clone</code> 进行引用计数，我们可以从视觉上区分深度复制类型的克隆和增加引用计数类型的克隆。在查找代码中的性能问题时，我们只需要考虑深度复制的克隆，可以忽略对 <code>Rc::clone</code> 的调用。",
    "_note": ""
  },
  "In Listing 15-19, we’ll change main so it has an inner scope around list c; then we can see how the reference count changes when c goes out of scope.": {
    "_translate": "在清单 15-19 中，我们将更改 <code>main</code>，使其在列表 <code>c</code> 周围有一个内部作用域；然后我们可以看到当 <code>c</code> 超出作用域时引用计数如何变化。",
    "_note": ""
  },
  "This code prints the following:": {
    "_translate": "这段代码打印以下内容：",
    "_note": ""
  },
  "At each point in the program where the reference count changes, we print the reference count, which we get by calling the Rc::strong_count function. This function is named strong_count rather than count because the Rc<T> type also has a weak_count; we’ll see what weak_count is used for in the “Preventing Reference Cycles: Turning an Rc<T> into a Weak<T>” section.": {
    "_translate": "在程序中每次引用计数发生变化时，我们都会打印引用计数，这是通过调用 <code>Rc::strong_count</code> 函数获得的。这个函数被称为 <code>strong_count</code> 而不是 <code>count</code>，因为 <code>Rc&lt;T&gt;</code> 类型还有 <code>weak_count</code>；我们将在 <a href=\"ch15-06-reference-cycles.html#preventing-reference-cycles-turning-an-rct-into-a-weakt\">“防止引用循环：将 <code>Rc&lt;T&gt;</code> 转换为 <code>Weak&lt;T&gt;</code>”</a><!-- ignore --> 部分中看到 <code>weak_count</code> 的用途。",
    "_note": ""
  },
  "We can see that the Rc<List> in a has an initial reference count of 1; then each time we call clone, the count goes up by 1. When c goes out of scope, the count goes down by 1. We don’t have to call a function to decrease the reference count like we have to call Rc::clone to increase the reference count: the implementation of the Drop trait decreases the reference count automatically when an Rc<T> value goes out of scope.": {
    "_translate": "我们可以看到，<code>a</code> 中的 <code>Rc&lt;List&gt;</code> 初始引用计数为 1；然后\n每次我们调用 <code>clone</code>，计数增加 1。当 <code>c</code> 超出作用域时，\n计数减少 1。我们不需要像调用 <code>Rc::clone</code> 增加引用计数那样调用一个函数来减少\n引用计数：<code>Drop</code> 特性的实现会在 <code>Rc&lt;T&gt;</code> 值超出作用域时自动减少引用计数。",
    "_note": ""
  },
  "What we can’t see in this example is that when b and then a go out of scope at the end of main, the count is then 0, and the Rc<List> is cleaned up completely. Using Rc<T> allows a single value to have multiple owners, and the count ensures that the value remains valid as long as any of the owners still exist.": {
    "_translate": "在这个例子中我们看不到的是，当 <code>b</code> 和然后 <code>a</code> 在 <code>main</code> 结束时超出作用域，计数变为 0，<code>Rc&lt;List&gt;</code> 完全被清理。使用 <code>Rc&lt;T&gt;</code> 允许单个值有多个所有者，计数确保只要任何一个所有者仍然存在，值就保持有效。",
    "_note": ""
  },
  "Via immutable references, Rc<T> allows you to share data between multiple parts of your program for reading only. If Rc<T> allowed you to have multiple mutable references too, you might violate one of the borrowing rules discussed in Chapter 4: multiple mutable borrows to the same place can cause data races and inconsistencies. But being able to mutate data is very useful! In the next section, we’ll discuss the interior mutability pattern and the RefCell<T> type that you can use in conjunction with an Rc<T> to work with this immutability restriction.": {
    "_translate": "通过不可变引用，<code>Rc&lt;T&gt;</code> 允许你在程序的多个部分之间共享数据，但仅限于读取。如果 <code>Rc&lt;T&gt;</code> 也允许你有多个可变引用，你可能会违反在第 4 章讨论的借用规则之一：对同一位置的多个可变借用可能导致数据竞争和不一致。但能够修改数据是非常有用的！在下一节中，我们将讨论内部可变性模式和 <code>RefCell&lt;T&gt;</code> 类型，你可以将其与 <code>Rc&lt;T&gt;</code> 结合使用，以应对这种不可变性限制。",
    "_note": ""
  },
  "Rc<T>, the Reference Counted Smart Pointer - The Rust Programming Language": {
    "_translate": "Rc&lt;T&gt;，引用计数的智能指针 - 《Rust编程语言》",
    "_note": ""
  },
  "At each point in the program where the reference count changes, we print the reference count, which we get by calling the Rc::strong_count function. This function is named strong_count rather than count because the Rc<T> type also has a weak_count; we’ll see what weak_count is used for in “Preventing Reference Cycles: Turning an Rc<T> into a Weak<T>”.": {
    "_translate": "在程序中每次引用计数发生变化时，我们都会打印引用计数，这是通过调用 <code>Rc::strong_count</code> 函数获得的。这个函数被称为 <code>strong_count</code> 而不是 <code>count</code>，因为 <code>Rc&lt;T&gt;</code> 类型还有 <code>weak_count</code>；我们将在 <a href=\"ch15-06-reference-cycles.html#preventing-reference-cycles-turning-an-rct-into-a-weakt\">“防止引用循环：将 <code>Rc&lt;T&gt;</code> 转换为 <code>Weak&lt;T&gt;</code>”</a><!-- ignore --> 中看到 <code>weak_count</code> 的用途。",
    "_note": ""
  }
}