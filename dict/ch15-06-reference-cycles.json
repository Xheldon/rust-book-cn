{
  "Reference Cycles Can Leak Memory": {
    "_translate": "<a class=\"header\" href=\"#reference-cycles-can-leak-memory\">引用循环可能导致内存泄漏</a>",
    "_note": ""
  },
  "Creating a Reference Cycle": {
    "_translate": "<a class=\"header\" href=\"#creating-a-reference-cycle\">创建引用循环</a>",
    "_note": ""
  },
  "Let’s look at how a reference cycle might happen and how to prevent it, starting with the definition of the List enum and a tail method in Listing 15-25:": {
    "_translate": "让我们看看引用循环是如何发生的以及如何防止它，从定义 <code>List</code> 枚举和 <code>tail</code> 方法开始，如清单 15-25 所示：",
    "_note": ""
  },
  "Rust’s memory safety guarantees make it difficult, but not impossible, to accidentally create memory that is never cleaned up (known as a memory leak). Preventing memory leaks entirely is not one of Rust’s guarantees, meaning memory leaks are memory safe in Rust. We can see that Rust allows memory leaks by using Rc<T> and RefCell<T>: it’s possible to create references where items refer to each other in a cycle. This creates memory leaks because the reference count of each item in the cycle will never reach 0, and the values will never be dropped.": {
    "_translate": "Rust 的内存安全保证使其难以但并非不可能意外创建永远不会被清理的内存（称为 <em>内存泄漏</em>）。完全防止内存泄漏并不是 Rust 的保证之一，这意味着内存泄漏在 Rust 中是内存安全的。我们可以通过使用 <code>Rc&lt;T&gt;</code> 和 <code>RefCell&lt;T&gt;</code> 来看到 Rust 允许内存泄漏：可以创建相互引用的循环引用。这会导致内存泄漏，因为循环中的每个项目的引用计数永远不会达到 0，值永远不会被释放。",
    "_note": ""
  },
  "In Listing 15-26, we’re adding a main function that uses the definitions in Listing 15-25. This code creates a list in a and a list in b that points to the list in a. Then it modifies the list in a to point to b, creating a reference cycle. There are println! statements along the way to show what the reference counts are at various points in this process.": {
    "_translate": "在清单 15-26 中，我们添加了一个 <code>main</code> 函数，该函数使用了清单 15-25 中的定义。这段代码在 <code>a</code> 中创建了一个列表，并在 <code>b</code> 中创建了一个指向 <code>a</code> 中列表的列表。然后它修改了 <code>a</code> 中的列表，使其指向 <code>b</code>，从而创建了一个引用循环。在此过程中，沿途有 <code>println!</code> 语句显示各个点的引用计数。",
    "_note": ""
  },
  "We’re using another variation of the List definition from Listing 15-5. The second element in the Cons variant is now RefCell<Rc<List>>, meaning that instead of having the ability to modify the i32 value as we did in Listing 15-24, we want to modify the List value a Cons variant is pointing to. We’re also adding a tail method to make it convenient for us to access the second item if we have a Cons variant.": {
    "_translate": "我们正在使用来自清单 15-5 的 <code>List</code> 定义的另一个变体。<code>Cons</code> 变体中的第二个元素现在是 <code>RefCell&lt;Rc&lt;List&gt;&gt;</code>，这意味着我们不再像在清单 15-24 中那样修改 <code>i32</code> 值，而是希望修改 <code>Cons</code> 变体指向的 <code>List</code> 值。我们还添加了一个 <code>tail</code> 方法，以便在我们有一个 <code>Cons</code> 变体时方便访问第二个元素。",
    "_note": ""
  },
  "We create an Rc<List> instance holding a List value in the variable a with an initial list of 5, Nil. We then create an Rc<List> instance holding another List value in the variable b that contains the value 10 and points to the list in a.": {
    "_translate": "我们创建一个 <code>Rc&lt;List&gt;</code> 实例，将一个 <code>List</code> 值存储在变量 <code>a</code> 中，初始列表为 <code>5, Nil</code>。然后我们创建另一个 <code>Rc&lt;List&gt;</code> 实例，将另一个 <code>List</code> 值存储在变量 <code>b</code> 中，该值包含 10 并指向 <code>a</code> 中的列表。",
    "_note": ""
  },
  "When we run this code, keeping the last println! commented out for the moment, we’ll get this output:": {
    "_translate": "当我们运行这段代码时，暂时保留最后一个<code>println!</code>的注释，我们将得到以下输出：",
    "_note": ""
  },
  "We modify a so it points to b instead of Nil, creating a cycle. We do that by using the tail method to get a reference to the RefCell<Rc<List>> in a, which we put in the variable link. Then we use the borrow_mut method on the RefCell<Rc<List>> to change the value inside from an Rc<List> that holds a Nil value to the Rc<List> in b.": {
    "_translate": "我们修改<code>a</code>，使其指向<code>b</code>而不是<code>Nil</code>，从而创建一个循环。我们通过使用<code>tail</code>方法获取<code>a</code>中的<code>RefCell&lt;Rc&lt;List&gt;&gt;</code>的引用，将其放入变量<code>link</code>中。然后我们使用<code>RefCell&lt;Rc&lt;List&gt;&gt;</code>上的<code>borrow_mut</code>方法，将内部的值从持有<code>Nil</code>值的<code>Rc&lt;List&gt;</code>更改为<code>b</code>中的<code>Rc&lt;List&gt;</code>。",
    "_note": ""
  },
  "Figure 15-4: A reference cycle of lists a and b pointing to each other": {
    "_translate": "<span class=\"caption\">图15-4：列表 <code>a</code> 和 <code>b</code> 互相引用的循环</span>",
    "_note": ""
  },
  "If you uncomment the last println! and run the program, Rust will try to print this cycle with a pointing to b pointing to a and so forth until it overflows the stack.": {
    "_translate": "如果您取消注释最后一个 <code>println!</code> 并运行程序，Rust 将尝试打印这个循环，<code>a</code> 指向 <code>b</code>，<code>b</code> 指向 <code>a</code>，如此循环直到堆栈溢出。",
    "_note": ""
  },
  "The reference count of the Rc<List> instances in both a and b are 2 after we change the list in a to point to b. At the end of main, Rust drops the variable b, which decreases the reference count of the b Rc<List> instance from 2 to 1. The memory that Rc<List> has on the heap won’t be dropped at this point, because its reference count is 1, not 0. Then Rust drops a, which decreases the reference count of the a Rc<List> instance from 2 to 1 as well. This instance’s memory can’t be dropped either, because the other Rc<List> instance still refers to it. The memory allocated to the list will remain uncollected forever. To visualize this reference cycle, we’ve created a diagram in Figure 15-4.": {
    "_translate": "在我们将 <code>a</code> 中的列表更改为指向 <code>b</code> 之后，<code>a</code> 和 <code>b</code> 中的 <code>Rc&lt;List&gt;</code> 实例的引用计数都是 2。在 <code>main</code> 结束时，Rust 会释放变量 <code>b</code>，这将 <code>b</code> 的 <code>Rc&lt;List&gt;</code> 实例的引用计数从 2 减少到 1。此时，堆上的 <code>Rc&lt;List&gt;</code> 内存不会被释放，因为其引用计数为 1，而不是 0。然后 Rust 会释放 <code>a</code>，这将 <code>a</code> 的 <code>Rc&lt;List&gt;</code> 实例的引用计数从 2 减少到 1。这个实例的内存也不能被释放，因为另一个 <code>Rc&lt;List&gt;</code> 实例仍然引用它。分配给列表的内存将永远无法回收。为了可视化这个引用循环，我们在图 15-4 中创建了一个图表。",
    "_note": ""
  },
  "Compared to a real-world program, the consequences of creating a reference cycle in this example aren’t very dire: right after we create the reference cycle, the program ends. However, if a more complex program allocated lots of memory in a cycle and held onto it for a long time, the program would use more memory than it needed and might overwhelm the system, causing it to run out of available memory.": {
    "_translate": "与现实世界中的程序相比，本例中创建引用循环的后果并不严重：在我们创建引用循环后，程序立即结束。然而，如果一个更复杂的程序在一个循环中分配了大量内存并长时间持有，程序将使用比实际需要更多的内存，可能会使系统不堪重负，导致其耗尽可用内存。",
    "_note": ""
  },
  "Another solution for avoiding reference cycles is reorganizing your data structures so that some references express ownership and some references don’t. As a result, you can have cycles made up of some ownership relationships and some non-ownership relationships, and only the ownership relationships affect whether or not a value can be dropped. In Listing 15-25, we always want Cons variants to own their list, so reorganizing the data structure isn’t possible. Let’s look at an example using graphs made up of parent nodes and child nodes to see when non-ownership relationships are an appropriate way to prevent reference cycles.": {
    "_translate": "避免引用循环的另一种方法是重组你的数据结构，使一些引用表达所有权，而一些引用不表达所有权。因此，你可以拥有由一些所有权关系和一些非所有权关系组成的循环，只有所有权关系会影响值是否可以被丢弃。在清单 15-25 中，我们总是希望 <code>Cons</code> 变体拥有它们的列表，因此重组数据结构是不可能的。让我们来看一个使用由父节点和子节点组成的图的例子，看看何时非所有权关系是防止引用循环的适当方法。",
    "_note": ""
  },
  "Creating reference cycles is not easily done, but it’s not impossible either. If you have RefCell<T> values that contain Rc<T> values or similar nested combinations of types with interior mutability and reference counting, you must ensure that you don’t create cycles; you can’t rely on Rust to catch them. Creating a reference cycle would be a logic bug in your program that you should use automated tests, code reviews, and other software development practices to minimize.": {
    "_translate": "创建引用循环并不容易，但也不是不可能。\n如果你有包含 <code>Rc&lt;T&gt;</code> 值的 <code>RefCell&lt;T&gt;</code> 值或类似的具有内部可变性和引用计数的类型的嵌套组合，你必须确保不会创建循环；你不能依赖 Rust 来捕获它们。\n创建引用循环将是程序中的逻辑错误，你应该使用自动化测试、代码审查和其他软件开发实践来最小化这种错误。",
    "_note": ""
  },
  "Preventing Reference Cycles: Turning an Rc<T> into a Weak<T>": {
    "_translate": "<a class=\"header\" href=\"#preventing-reference-cycles-turning-an-rct-into-a-weakt\">防止引用循环：将 <code>Rc&lt;T&gt;</code> 转换为 <code>Weak&lt;T&gt;</code></a>",
    "_note": ""
  },
  "So far, we’ve demonstrated that calling Rc::clone increases the strong_count of an Rc<T> instance, and an Rc<T> instance is only cleaned up if its strong_count is 0. You can also create a weak reference to the value within an Rc<T> instance by calling Rc::downgrade and passing a reference to the Rc<T>. Strong references are how you can share ownership of an Rc<T> instance. Weak references don’t express an ownership relationship, and their count doesn’t affect when an Rc<T> instance is cleaned up. They won’t cause a reference cycle because any cycle involving some weak references will be broken once the strong reference count of values involved is 0.": {
    "_translate": "到目前为止，我们已经证明调用<code>Rc::clone</code>会增加<code>Rc&lt;T&gt;</code>实例的<code>strong_count</code>，并且只有当<code>Rc&lt;T&gt;</code>实例的<code>strong_count</code>为0时，该实例才会被清理。你还可以通过调用<code>Rc::downgrade</code>并传递<code>Rc&lt;T&gt;</code>的引用，来创建对<code>Rc&lt;T&gt;</code>实例中值的<em>弱引用</em>。强引用是你共享<code>Rc&lt;T&gt;</code>实例所有权的方式。弱引用不表示所有权关系，它们的计数不会影响<code>Rc&lt;T&gt;</code>实例何时被清理。它们不会导致引用循环，因为一旦涉及的值的强引用计数为0，任何涉及弱引用的循环都会被打破。",
    "_note": ""
  },
  "When you call Rc::downgrade, you get a smart pointer of type Weak<T>. Instead of increasing the strong_count in the Rc<T> instance by 1, calling Rc::downgrade increases the weak_count by 1. The Rc<T> type uses weak_count to keep track of how many Weak<T> references exist, similar to strong_count. The difference is the weak_count doesn’t need to be 0 for the Rc<T> instance to be cleaned up.": {
    "_translate": "当你调用 <code>Rc::downgrade</code> 时，你会得到一个类型为 <code>Weak&lt;T&gt;</code> 的智能指针。而不是将 <code>Rc&lt;T&gt;</code> 实例中的 <code>strong_count</code> 增加 1，调用 <code>Rc::downgrade</code> 会将 <code>weak_count</code> 增加 1。<code>Rc&lt;T&gt;</code> 类型使用 <code>weak_count</code> 来跟踪存在多少个 <code>Weak&lt;T&gt;</code> 引用，类似于 <code>strong_count</code>。不同之处在于，<code>weak_count</code> 不需要为 0，<code>Rc&lt;T&gt;</code> 实例就可以被清理。",
    "_note": ""
  },
  "Because the value that Weak<T> references might have been dropped, to do anything with the value that a Weak<T> is pointing to, you must make sure the value still exists. Do this by calling the upgrade method on a Weak<T> instance, which will return an Option<Rc<T>>. You’ll get a result of Some if the Rc<T> value has not been dropped yet and a result of None if the Rc<T> value has been dropped. Because upgrade returns an Option<Rc<T>>, Rust will ensure that the Some case and the None case are handled, and there won’t be an invalid pointer.": {
    "_translate": "因为 <code>Weak&lt;T&gt;</code> 引用的值可能已经被释放，所以要对 <code>Weak&lt;T&gt;</code> 指向的值进行任何操作，必须确保该值仍然存在。通过调用 <code>Weak&lt;T&gt;</code> 实例上的 <code>upgrade</code> 方法来实现这一点，该方法将返回一个 <code>Option&lt;Rc&lt;T&gt;&gt;</code>。如果 <code>Rc&lt;T&gt;</code> 值尚未被释放，你将得到一个 <code>Some</code> 结果；如果 <code>Rc&lt;T&gt;</code> 值已被释放，你将得到一个 <code>None</code> 结果。因为 <code>upgrade</code> 返回一个 <code>Option&lt;Rc&lt;T&gt;&gt;</code>，Rust 将确保处理 <code>Some</code> 情况和 <code>None</code> 情况，而不会出现无效指针。",
    "_note": ""
  },
  "As an example, rather than using a list whose items know only about the next item, we’ll create a tree whose items know about their children items and their parent items.": {
    "_translate": "例如，我们将创建一个树，其项目不仅知道它们的子项目<em>还知道</em>它们的父项目。",
    "_note": ""
  },
  "Filename: src/main.rs": {
    "_translate": "<span class=\"filename\">文件名: src/main.rs</span>",
    "_note": ""
  },
  "To start, we’ll build a tree with nodes that know about their child nodes. We’ll create a struct named Node that holds its own i32 value as well as references to its children Node values:": {
    "_translate": "首先，我们将构建一个节点知道其子节点的树。\n我们将创建一个名为 <code>Node</code> 的结构体，该结构体持有其自身的 <code>i32</code> 值以及\n对其子 <code>Node</code> 值的引用：",
    "_note": ""
  },
  "We want a Node to own its children, and we want to share that ownership with variables so we can access each Node in the tree directly. To do this, we define the Vec<T> items to be values of type Rc<Node>. We also want to modify which nodes are children of another node, so we have a RefCell<T> in children around the Vec<Rc<Node>>.": {
    "_translate": "我们希望一个 <code>Node</code> 拥有其子节点，并且我们希望与变量共享该所有权，以便我们可以直接访问树中的每个 <code>Node</code>。为此，我们将 <code>Vec&lt;T&gt;</code> 项定义为 <code>Rc&lt;Node&gt;</code> 类型的值。我们还希望修改哪些节点是另一个节点的子节点，因此我们在 <code>children</code> 中使用了 <code>RefCell&lt;T&gt;</code> 包裹 <code>Vec&lt;Rc&lt;Node&gt;&gt;</code>。",
    "_note": ""
  },
  "Next, we’ll use our struct definition and create one Node instance named leaf with the value 3 and no children, and another instance named branch with the value 5 and leaf as one of its children, as shown in Listing 15-27:": {
    "_translate": "接下来，我们将使用我们的结构体定义，创建一个名为 <code>leaf</code> 的 <code>Node</code> 实例，其值为 3 且没有子节点，以及另一个名为 <code>branch</code> 的实例，其值为 5 且 <code>leaf</code> 是其子节点之一，如清单 15-27 所示：",
    "_note": ""
  },
  "To make the child node aware of its parent, we need to add a parent field to our Node struct definition. The trouble is in deciding what the type of parent should be. We know it can’t contain an Rc<T>, because that would create a reference cycle with leaf.parent pointing to branch and branch.children pointing to leaf, which would cause their strong_count values to never be 0.": {
    "_translate": "为了使子节点知道其父节点，我们需要在 <code>Node</code> 结构体定义中添加一个 <code>parent</code> 字段。问题在于决定 <code>parent</code> 的类型。我们知道它不能包含一个 <code>Rc&lt;T&gt;</code>，因为这会创建一个引用循环，<code>leaf.parent</code> 指向 <code>branch</code> 而 <code>branch.children</code> 指向 <code>leaf</code>，这会导致它们的 <code>strong_count</code> 值永远不会为 0。",
    "_note": ""
  },
  "We clone the Rc<Node> in leaf and store that in branch, meaning the Node in leaf now has two owners: leaf and branch. We can get from branch to leaf through branch.children, but there’s no way to get from leaf to branch. The reason is that leaf has no reference to branch and doesn’t know they’re related. We want leaf to know that branch is its parent. We’ll do that next.": {
    "_translate": "我们在 <code>leaf</code> 中克隆 <code>Rc&lt;Node&gt;</code> 并将其存储在 <code>branch</code> 中，这意味着 <code>leaf</code> 中的 <code>Node</code> 现在有两个所有者：<code>leaf</code> 和 <code>branch</code>。我们可以通过 <code>branch.children</code> 从 <code>branch</code> 到达 <code>leaf</code>，但无法从 <code>leaf</code> 到达 <code>branch</code>。原因是 <code>leaf</code> 没有对 <code>branch</code> 的引用，不知道它们是相关的。我们希望 <code>leaf</code> 知道 <code>branch</code> 是它的父节点。我们将在下一步实现这一点。",
    "_note": ""
  },
  "Thinking about the relationships another way, a parent node should own its children: if a parent node is dropped, its child nodes should be dropped as well. However, a child should not own its parent: if we drop a child node, the parent should still exist. This is a case for weak references!": {
    "_translate": "思考这些关系的另一种方式是，父节点应该拥有其子节点：如果父节点被丢弃，其子节点也应该被丢弃。然而，子节点不应该拥有其父节点：如果我们丢弃一个子节点，父节点仍然应该存在。这是一个使用弱引用的情况！",
    "_note": ""
  },
  "So instead of Rc<T>, we’ll make the type of parent use Weak<T>, specifically a RefCell<Weak<Node>>. Now our Node struct definition looks like this:": {
    "_translate": "所以我们将 <code>parent</code> 的类型改为使用 <code>Weak&lt;T&gt;</code>，具体来说是一个 <code>RefCell&lt;Weak&lt;Node&gt;&gt;</code>。现在我们的 <code>Node</code> 结构体定义如下：",
    "_note": ""
  },
  "A node will be able to refer to its parent node but doesn’t own its parent. In Listing 15-28, we update main to use this new definition so the leaf node will have a way to refer to its parent, branch:": {
    "_translate": "一个节点将能够引用其父节点，但不拥有其父节点。\n在清单 15-28 中，我们更新 <code>main</code> 以使用这个新定义，这样 <code>leaf</code> 节点将有一种方法引用其父节点 <code>branch</code>：",
    "_note": ""
  },
  "Creating the leaf node looks similar to Listing 15-27 with the exception of the parent field: leaf starts out without a parent, so we create a new, empty Weak<Node> reference instance.": {
    "_translate": "创建<code>leaf</code>节点看起来与清单15-27相似，例外是<code>parent</code>字段：<code>leaf</code>一开始没有父节点，所以我们创建一个新的、空的<code>Weak&lt;Node&gt;</code>引用实例。",
    "_note": ""
  },
  "At this point, when we try to get a reference to the parent of leaf by using the upgrade method, we get a None value. We see this in the output from the first println! statement:": {
    "_translate": "此时，当我们尝试通过使用 <code>upgrade</code> 方法获取 <code>leaf</code> 的父节点的引用时，我们得到了一个 <code>None</code> 值。我们在第一个 <code>println!</code> 语句的输出中看到了这一点：",
    "_note": ""
  },
  "When we print the parent of leaf again, this time we’ll get a Some variant holding branch: now leaf can access its parent! When we print leaf, we also avoid the cycle that eventually ended in a stack overflow like we had in Listing 15-26; the Weak<Node> references are printed as (Weak):": {
    "_translate": "当我们再次打印 <code>leaf</code> 的父节点时，这次我们将得到一个包含 <code>branch</code> 的 <code>Some</code> 变体：现在 <code>leaf</code> 可以访问其父节点了！当我们打印 <code>leaf</code> 时，我们也避免了最终导致堆栈溢出的循环，就像我们在清单 15-26 中遇到的那样；<code>Weak&lt;Node&gt;</code> 引用被打印为 <code>(Weak)</code>：",
    "_note": ""
  },
  "When we create the branch node, it will also have a new Weak<Node> reference in the parent field, because branch doesn’t have a parent node. We still have leaf as one of the children of branch. Once we have the Node instance in branch, we can modify leaf to give it a Weak<Node> reference to its parent. We use the borrow_mut method on the RefCell<Weak<Node>> in the parent field of leaf, and then we use the Rc::downgrade function to create a Weak<Node> reference to branch from the Rc<Node> in branch.": {
    "_translate": "当我们创建 <code>branch</code> 节点时，它在 <code>parent</code> 字段中也会有一个新的 <code>Weak&lt;Node&gt;</code>\n引用，因为 <code>branch</code> 没有父节点。\n我们仍然有 <code>leaf</code> 作为 <code>branch</code> 的一个子节点。一旦我们在 <code>branch</code> 中有了\n<code>Node</code> 实例，我们就可以修改 <code>leaf</code> 以给它一个指向其父节点的 <code>Weak&lt;Node&gt;</code>\n引用。我们在 <code>leaf</code> 的 <code>parent</code> 字段中的 <code>RefCell&lt;Weak&lt;Node&gt;&gt;</code> 上使用\n<code>borrow_mut</code> 方法，然后使用 <code>Rc::downgrade</code> 函数从 <code>branch</code> 中的\n<code>Rc&lt;Node&gt;</code> 创建一个指向 <code>branch</code> 的 <code>Weak&lt;Node&gt;</code> 引用。",
    "_note": ""
  },
  "The lack of infinite output indicates that this code didn’t create a reference cycle. We can also tell this by looking at the values we get from calling Rc::strong_count and Rc::weak_count.": {
    "_translate": "缺乏无限输出表明这段代码没有创建引用循环。我们也可以通过查看调用<code>Rc::strong_count</code>和<code>Rc::weak_count</code>得到的值来判断这一点。",
    "_note": ""
  },
  "Let’s look at how the strong_count and weak_count values of the Rc<Node> instances change by creating a new inner scope and moving the creation of branch into that scope. By doing so, we can see what happens when branch is created and then dropped when it goes out of scope. The modifications are shown in Listing 15-29:": {
    "_translate": "让我们看看通过创建一个新的内部作用域并将 <code>branch</code> 的创建移到该作用域中，<code>Rc&lt;Node&gt;</code> 实例的 <code>strong_count</code> 和 <code>weak_count</code> 值如何变化。通过这样做，我们可以看到当 <code>branch</code> 被创建然后在超出作用域时被销毁时会发生什么。修改内容如清单 15-29 所示：",
    "_note": ""
  },
  "After leaf is created, its Rc<Node> has a strong count of 1 and a weak count of 0. In the inner scope, we create branch and associate it with leaf, at which point when we print the counts, the Rc<Node> in branch will have a strong count of 1 and a weak count of 1 (for leaf.parent pointing to branch with a Weak<Node>). When we print the counts in leaf, we’ll see it will have a strong count of 2, because branch now has a clone of the Rc<Node> of leaf stored in branch.children, but will still have a weak count of 0.": {
    "_translate": "在创建 <code>leaf</code> 之后，其 <code>Rc&lt;Node&gt;</code> 的强引用计数为 1，弱引用计数为 0。在内部作用域中，我们创建了 <code>branch</code> 并将其与 <code>leaf</code> 关联，此时当我们打印计数时，<code>branch</code> 中的 <code>Rc&lt;Node&gt;</code> 将具有强引用计数 1 和弱引用计数 1（因为 <code>leaf.parent</code> 通过 <code>Weak&lt;Node&gt;</code> 指向 <code>branch</code>）。当我们打印 <code>leaf</code> 的计数时，我们会看到它的强引用计数为 2，因为 <code>branch</code> 现在在 <code>branch.children</code> 中存储了 <code>leaf</code> 的 <code>Rc&lt;Node&gt;</code> 的一个克隆，但弱引用计数仍为 0。",
    "_note": ""
  },
  "When the inner scope ends, branch goes out of scope and the strong count of the Rc<Node> decreases to 0, so its Node is dropped. The weak count of 1 from leaf.parent has no bearing on whether or not Node is dropped, so we don’t get any memory leaks!": {
    "_translate": "当内部作用域结束时，<code>branch</code> 超出作用域，<code>Rc&lt;Node&gt;</code> 的强引用计数减少到 0，因此其 <code>Node</code> 被释放。来自 <code>leaf.parent</code> 的弱引用计数 1 不会影响 <code>Node</code> 是否被释放，所以我们不会有任何内存泄漏！",
    "_note": ""
  },
  "If we try to access the parent of leaf after the end of the scope, we’ll get None again. At the end of the program, the Rc<Node> in leaf has a strong count of 1 and a weak count of 0, because the variable leaf is now the only reference to the Rc<Node> again.": {
    "_translate": "如果我们尝试在作用域结束后访问 <code>leaf</code> 的父节点，我们将再次得到 <code>None</code>。在程序结束时，<code>leaf</code> 中的 <code>Rc&lt;Node&gt;</code> 的强引用计数为 1，弱引用计数为 0，因为变量 <code>leaf</code> 现在再次成为指向 <code>Rc&lt;Node&gt;</code> 的唯一引用。",
    "_note": ""
  },
  "All of the logic that manages the counts and value dropping is built into Rc<T> and Weak<T> and their implementations of the Drop trait. By specifying that the relationship from a child to its parent should be a Weak<T> reference in the definition of Node, you’re able to have parent nodes point to child nodes and vice versa without creating a reference cycle and memory leaks.": {
    "_translate": "所有管理计数和值释放的逻辑都内置在 <code>Rc&lt;T&gt;</code> 和 <code>Weak&lt;T&gt;</code> 以及它们的 <code>Drop</code> 特性实现中。通过在 <code>Node</code> 的定义中指定从子节点到其父节点的关系应为 <code>Weak&lt;T&gt;</code> 引用，您可以在父节点和子节点之间相互指向，而不会创建引用循环和内存泄漏。",
    "_note": ""
  },
  "Summary": {
    "_translate": "<a class=\"header\" href=\"#summary\">摘要</a>",
    "_note": ""
  },
  "Also discussed were the Deref and Drop traits, which enable a lot of the functionality of smart pointers. We explored reference cycles that can cause memory leaks and how to prevent them using Weak<T>.": {
    "_translate": "还讨论了<code>Deref</code>和<code>Drop</code>特征，它们使智能指针的许多功能得以实现。我们探讨了可能导致内存泄漏的引用循环以及如何使用<code>Weak&lt;T&gt;</code>来防止它们。",
    "_note": ""
  },
  "If this chapter has piqued your interest and you want to implement your own smart pointers, check out “The Rustonomicon” for more useful information.": {
    "_translate": "如果本章引起了你的兴趣，并且你想要实现自己的智能指针，可以查阅<a href=\"../nomicon/index.html\">“Rustonomicon”</a>获取更多有用的信息。",
    "_note": ""
  },
  "This chapter covered how to use smart pointers to make different guarantees and trade-offs from those Rust makes by default with regular references. The Box<T> type has a known size and points to data allocated on the heap. The Rc<T> type keeps track of the number of references to data on the heap so that data can have multiple owners. The RefCell<T> type with its interior mutability gives us a type that we can use when we need an immutable type but need to change an inner value of that type; it also enforces the borrowing rules at runtime instead of at compile time.": {
    "_translate": "本章介绍了如何使用智能指针来做出与 Rust 默认使用常规引用时不同的保证和权衡。<code>Box&lt;T&gt;</code> 类型具有已知大小，并指向堆上分配的数据。<code>Rc&lt;T&gt;</code> 类型跟踪堆上数据的引用数量，以便数据可以有多个所有者。<code>RefCell&lt;T&gt;</code> 类型及其内部可变性使我们可以在需要不可变类型但需要更改该类型内部值时使用；它还在运行时而不是编译时强制执行借用规则。",
    "_note": ""
  },
  "Next, we’ll talk about concurrency in Rust. You’ll even learn about a few new smart pointers.": {
    "_translate": "接下来，我们将讨论 Rust 中的并发。你甚至会学到一些新的智能指针。",
    "_note": ""
  },
  "Reference Cycles Can Leak Memory - The Rust Programming Language": {
    "_translate": "引用循环可能导致内存泄漏 - 《Rust 编程语言》",
    "_note": ""
  },
  "Creating a Tree Data Structure: a Node with Child Nodes": {
    "_translate": "<a class=\"header\" href=\"#creating-a-tree-data-structure-a-node-with-child-nodes\">创建树数据结构：具有子节点的<code>Node</code></a>",
    "_note": ""
  },
  "Adding a Reference from a Child to Its Parent": {
    "_translate": "<a class=\"header\" href=\"#adding-a-reference-from-a-child-to-its-parent\">从子项添加指向其父项的引用</a>",
    "_note": ""
  },
  "Visualizing Changes to strong_count and weak_count": {
    "_translate": "<a class=\"header\" href=\"#visualizing-changes-to-strong_count-and-weak_count\">可视化 <code>strong_count</code> 和 <code>weak_count</code> 的变化</a>",
    "_note": ""
  },
  "If you uncomment the last println! and run the program, Rust will try to print this cycle with a pointing to b pointing to a, and so forth, until it overflows the stack.": {
    "_translate": "如果你取消注释最后一个 <code>println!</code> 并运行程序，Rust 将尝试打印这个循环，其中 <code>a</code> 指向 <code>b</code>，<code>b</code> 又指向 <code>a</code>，如此往复，直到堆栈溢出。",
    "_note": ""
  },
  "The reference count of the Rc<List> instances in both a and b are 2 after we change the list in a to point to b. At the end of main, Rust drops the variable b, which decreases the reference count of the b Rc<List> instance from 2 to 1. The memory that Rc<List> has on the heap won’t be dropped at this point, because its reference count is 1, not 0. Then Rust drops a, which decreases the reference count of the a Rc<List> instance from 2 to 1 as well. This instance’s memory can’t be dropped either, because the other Rc<List> instance still refers to it. The memory allocated to the list will remain uncollected forever. To visualize this reference cycle, we’ve created the diagram in Figure 15-4.": {
    "_translate": "在我们将 <code>a</code> 中的列表更改为指向 <code>b</code> 之后，<code>a</code> 和 <code>b</code> 中的 <code>Rc&lt;List&gt;</code> 实例的引用计数都是 2。在 <code>main</code> 结束时，Rust 会释放变量 <code>b</code>，这会使 <code>b</code> 的 <code>Rc&lt;List&gt;</code> 实例的引用计数从 2 减少到 1。此时，堆上的 <code>Rc&lt;List&gt;</code> 内存不会被释放，因为其引用计数为 1，而不是 0。然后 Rust 会释放 <code>a</code>，这会使 <code>a</code> 的 <code>Rc&lt;List&gt;</code> 实例的引用计数从 2 减少到 1。由于另一个 <code>Rc&lt;List&gt;</code> 实例仍然引用它，因此该实例的内存也不能被释放。分配给列表的内存将永远无法回收。为了可视化这个引用循环，我们创建了图 15-4 中的图。",
    "_note": ""
  },
  "After leaf is created, its Rc<Node> has a strong count of 1 and a weak count of 0. In the inner scope, we create branch and associate it with leaf, at which point, when we print the counts, the Rc<Node> in branch will have a strong count of 1 and a weak count of 1 (for leaf.parent pointing to branch with a Weak<Node>). When we print the counts in leaf, we’ll see it will have a strong count of 2, because branch now has a clone of the Rc<Node> of leaf stored in branch.children, but will still have a weak count of 0.": {
    "_translate": "在创建 <code>leaf</code> 之后，其 <code>Rc&lt;Node&gt;</code> 的强引用计数为 1，弱引用计数为 0。在内部作用域中，我们创建了 <code>branch</code> 并将其与 <code>leaf</code> 关联，此时，当我们打印计数时，<code>branch</code> 中的 <code>Rc&lt;Node&gt;</code> 将具有强引用计数 1 和弱引用计数 1（因为 <code>leaf.parent</code> 通过 <code>Weak&lt;Node&gt;</code> 指向 <code>branch</code>）。当我们打印 <code>leaf</code> 的计数时，我们会看到它的强引用计数为 2，因为 <code>branch</code> 现在在 <code>branch.children</code> 中存储了 <code>leaf</code> 的 <code>Rc&lt;Node&gt;</code> 的一个克隆，但弱引用计数仍为 0。",
    "_note": ""
  },
  "Let’s look at how a reference cycle might happen and how to prevent it, starting with the definition of the List enum and a tail method in Listing 15-25.": {
    "_translate": "让我们看看引用循环是如何发生的以及如何防止它，从定义 <code>List</code> 枚举和 <code>tail</code> 方法开始，如清单 15-25 所示。",
    "_note": ""
  },
  "Preventing Reference Cycles Using Weak<T>": {
    "_translate": "<a class=\"header\" href=\"#preventing-reference-cycles-using-weakt\">使用 <code>Weak&lt;T&gt;</code> 防止引用循环</a>",
    "_note": ""
  },
  "The reference count of the Rc<List> instances in both a and b is 2 after we change the list in a to point to b. At the end of main, Rust drops the variable b, which decreases the reference count of the b Rc<List> instance from 2 to 1. The memory that Rc<List> has on the heap won’t be dropped at this point, because its reference count is 1, not 0. Then Rust drops a, which decreases the reference count of the a Rc<List> instance from 2 to 1 as well. This instance’s memory can’t be dropped either, because the other Rc<List> instance still refers to it. The memory allocated to the list will remain uncollected forever. To visualize this reference cycle, we’ve created the diagram in Figure 15-4.": {
    "_translate": "在我们将 <code>a</code> 中的列表更改为指向 <code>b</code> 之后，<code>a</code> 和 <code>b</code> 中的 <code>Rc&lt;List&gt;</code> 实例的引用计数为 2。在 <code>main</code> 结束时，Rust 会释放变量 <code>b</code>，这将 <code>b</code> 的 <code>Rc&lt;List&gt;</code> 实例的引用计数从 2 减少到 1。此时，堆上的 <code>Rc&lt;List&gt;</code> 内存不会被释放，因为其引用计数为 1，而不是 0。然后 Rust 会释放 <code>a</code>，这将 <code>a</code> 的 <code>Rc&lt;List&gt;</code> 实例的引用计数从 2 减少到 1。这个实例的内存也不能被释放，因为另一个 <code>Rc&lt;List&gt;</code> 实例仍然引用它。分配给列表的内存将永远无法回收。为了可视化这个引用循环，我们创建了图 15-4 中的图表。",
    "_note": ""
  },
  "Because the value that Weak<T> references might have been dropped, to do anything with the value that a Weak<T> is pointing to you must make sure the value still exists. Do this by calling the upgrade method on a Weak<T> instance, which will return an Option<Rc<T>>. You’ll get a result of Some if the Rc<T> value has not been dropped yet and a result of None if the Rc<T> value has been dropped. Because upgrade returns an Option<Rc<T>>, Rust will ensure that the Some case and the None case are handled, and there won’t be an invalid pointer.": {
    "_translate": "因为 <code>Weak&lt;T&gt;</code> 引用的值可能已经被释放，所以要对 <code>Weak&lt;T&gt;</code> 指向的值进行任何操作，必须确保该值仍然存在。通过调用 <code>Weak&lt;T&gt;</code> 实例上的 <code>upgrade</code> 方法来实现这一点，该方法将返回一个 <code>Option&lt;Rc&lt;T&gt;&gt;</code>。如果 <code>Rc&lt;T&gt;</code> 值尚未被释放，你将得到一个 <code>Some</code> 结果；如果 <code>Rc&lt;T&gt;</code> 值已被释放，你将得到一个 <code>None</code> 结果。因为 <code>upgrade</code> 返回一个 <code>Option&lt;Rc&lt;T&gt;&gt;</code>，Rust 将确保处理 <code>Some</code> 和 <code>None</code> 两种情况，而不会出现无效指针。",
    "_note": ""
  },
  "Creating a Tree Data Structure: A Node with Child Nodes": {
    "_translate": "<a class=\"header\" href=\"#creating-a-tree-data-structure-a-node-with-child-nodes\">创建树数据结构：具有子节点的<code>Node</code></a>",
    "_note": ""
  },
  "Next, we’ll use our struct definition and create one Node instance named leaf with the value 3 and no children, and another instance named branch with the value 5 and leaf as one of its children, as shown in Listing 15-27.": {
    "_translate": "接下来，我们将使用我们的结构体定义，创建一个名为 <code>leaf</code> 的 <code>Node</code> 实例，其值为 <code>3</code> 且没有子节点，以及另一个名为 <code>branch</code> 的实例，其值为 <code>5</code> 并且 <code>leaf</code> 是其一个子节点，如清单 15-27 所示。",
    "_note": ""
  },
  "So, instead of Rc<T>, we’ll make the type of parent use Weak<T>, specifically a RefCell<Weak<Node>>. Now our Node struct definition looks like this:": {
    "_translate": "所以，我们将 <code>parent</code> 的类型改为使用 <code>Weak&lt;T&gt;</code>，具体来说是一个 <code>RefCell&lt;Weak&lt;Node&gt;&gt;</code>。现在我们的 <code>Node</code> 结构体定义如下：",
    "_note": ""
  },
  "To make the child node aware of its parent, we need to add a parent field to our Node struct definition. The trouble is in deciding what the type of parent should be. We know it can’t contain an Rc<T> because that would create a reference cycle with leaf.parent pointing to branch and branch.children pointing to leaf, which would cause their strong_count values to never be 0.": {
    "_translate": "为了让子节点知道其父节点，我们需要在 <code>Node</code> 结构体定义中添加一个 <code>parent</code> 字段。问题在于决定 <code>parent</code> 的类型。我们知道它不能包含 <code>Rc&lt;T&gt;</code>，因为这会创建一个引用循环，<code>leaf.parent</code> 指向 <code>branch</code>，而 <code>branch.children</code> 指向 <code>leaf</code>，这会导致它们的 <code>strong_count</code> 值永远不会为 0。",
    "_note": ""
  },
  "A node will be able to refer to its parent node but doesn’t own its parent. In Listing 15-28, we update main to use this new definition so the leaf node will have a way to refer to its parent, branch.": {
    "_translate": "一个节点将能够引用其父节点，但不拥有其父节点。\n在清单 15-28 中，我们更新 <code>main</code> 以使用这个新定义，这样 <code>leaf</code> 节点将有一种方法引用其父节点 <code>branch</code>。",
    "_note": ""
  },
  "Let’s look at how the strong_count and weak_count values of the Rc<Node> instances change by creating a new inner scope and moving the creation of branch into that scope. By doing so, we can see what happens when branch is created and then dropped when it goes out of scope. The modifications are shown in Listing 15-29.": {
    "_translate": "让我们看看通过创建一个新的内部作用域并将 <code>branch</code> 的创建移到该作用域中，<code>Rc&lt;Node&gt;</code> 实例的 <code>strong_count</code> 和 <code>weak_count</code> 值如何变化。通过这样做，我们可以看到当 <code>branch</code> 被创建然后在超出作用域时被丢弃时会发生什么。修改内容如清单 15-29 所示。",
    "_note": ""
  },
  "After leaf is created, its Rc<Node> has a strong count of 1 and a weak count of 0. In the inner scope, we create branch and associate it with leaf, at which point when we print the counts, the Rc<Node> in branch will have a strong count of 1 and a weak count of 1 (for leaf.parent pointing to branch with a Weak<Node>). When we print the counts in leaf, we’ll see it will have a strong count of 2 because branch now has a clone of the Rc<Node> of leaf stored in branch.children, but will still have a weak count of 0.": {
    "_translate": "在创建 <code>leaf</code> 之后，其 <code>Rc&lt;Node&gt;</code> 的强引用计数为 1，弱引用计数为 0。在内部作用域中，我们创建了 <code>branch</code> 并将其与 <code>leaf</code> 关联，此时当我们打印计数时，<code>branch</code> 中的 <code>Rc&lt;Node&gt;</code> 将具有强引用计数 1 和弱引用计数 1（因为 <code>leaf.parent</code> 通过 <code>Weak&lt;Node&gt;</code> 指向 <code>branch</code>）。当我们打印 <code>leaf</code> 中的计数时，我们会看到它的强引用计数为 2，因为 <code>branch</code> 现在在 <code>branch.children</code> 中存储了 <code>leaf</code> 的 <code>Rc&lt;Node&gt;</code> 的一个克隆，但弱引用计数仍为 0。",
    "_note": ""
  },
  "The reference count of the Rc<List> instances in both a and b is 2 after we change the list in a to point to b. At the end of main, Rust drops the variable b, which decreases the reference count of the b Rc<List> instance from 2 to 1. The memory that Rc<List> has on the heap won’t be dropped at this point because its reference count is 1, not 0. Then Rust drops a, which decreases the reference count of the a Rc<List> instance from 2 to 1 as well. This instance’s memory can’t be dropped either, because the other Rc<List> instance still refers to it. The memory allocated to the list will remain uncollected forever. To visualize this reference cycle, we’ve created the diagram in Figure 15-4.": {
    "_translate": "在我们将 <code>a</code> 中的列表更改为指向 <code>b</code> 之后，<code>a</code> 和 <code>b</code> 中的 <code>Rc&lt;List&gt;</code> 实例的引用计数为 2。在 <code>main</code> 结束时，Rust 会释放变量 <code>b</code>，这将 <code>b</code> 的 <code>Rc&lt;List&gt;</code> 实例的引用计数从 2 减少到 1。此时，堆上的 <code>Rc&lt;List&gt;</code> 内存不会被释放，因为其引用计数为 1，而不是 0。然后 Rust 会释放 <code>a</code>，这将 <code>a</code> 的 <code>Rc&lt;List&gt;</code> 实例的引用计数从 2 减少到 1。由于另一个 <code>Rc&lt;List&gt;</code> 实例仍然引用它，因此该实例的内存也不能被释放。分配给列表的内存将永远无法回收。为了可视化这个引用循环，我们创建了图 15-4 中的图表。",
    "_note": ""
  },
  "If we try to access the parent of leaf after the end of the scope, we’ll get None again. At the end of the program, the Rc<Node> in leaf has a strong count of 1 and a weak count of 0 because the variable leaf is now the only reference to the Rc<Node> again.": {
    "_translate": "如果我们尝试在作用域结束后访问 <code>leaf</code> 的父节点，我们将再次得到 <code>None</code>。在程序结束时，<code>leaf</code> 中的 <code>Rc&lt;Node&gt;</code> 的强计数为 1，弱计数为 0，因为变量 <code>leaf</code> 现在再次成为指向 <code>Rc&lt;Node&gt;</code> 的唯一引用。",
    "_note": ""
  },
  "When we create the branch node, it will also have a new Weak<Node> reference in the parent field because branch doesn’t have a parent node. We still have leaf as one of the children of branch. Once we have the Node instance in branch, we can modify leaf to give it a Weak<Node> reference to its parent. We use the borrow_mut method on the RefCell<Weak<Node>> in the parent field of leaf, and then we use the Rc::downgrade function to create a Weak<Node> reference to branch from the Rc<Node> in branch.": {
    "_translate": "当我们创建 <code>branch</code> 节点时，它在 <code>parent</code> 字段中也会有一个新的 <code>Weak&lt;Node&gt;</code>\n引用，因为 <code>branch</code> 没有父节点。\n我们仍然有 <code>leaf</code> 作为 <code>branch</code> 的一个子节点。一旦我们在 <code>branch</code> 中有了\n<code>Node</code> 实例，我们就可以修改 <code>leaf</code> 以给它一个指向其父节点的 <code>Weak&lt;Node&gt;</code>\n引用。我们在 <code>leaf</code> 的 <code>parent</code> 字段中的 <code>RefCell&lt;Weak&lt;Node&gt;&gt;</code> 上使用\n<code>borrow_mut</code> 方法，然后使用 <code>Rc::downgrade</code> 函数从 <code>branch</code> 中的\n<code>Rc&lt;Node&gt;</code> 创建一个指向 <code>branch</code> 的 <code>Weak&lt;Node&gt;</code> 引用。",
    "_note": ""
  },
  "Creating a Tree Data Structure": {
    "_translate": "<a class=\"header\" href=\"#creating-a-tree-data-structure\">创建树数据结构</a>",
    "_note": ""
  },
  "Rust’s memory safety guarantees make it difficult, but not impossible, to accidentally create memory that is never cleaned up (known as a memory leak). Preventing memory leaks entirely is not one of Rust’s guarantees, meaning memory leaks are memory safe in Rust. We can see that Rust allows memory leaks by using Rc<T> and RefCell<T>: It’s possible to create references where items refer to each other in a cycle. This creates memory leaks because the reference count of each item in the cycle will never reach 0, and the values will never be dropped.": {
    "_translate": "Rust 的内存安全保证使得意外创建永远不会被清理的内存（称为 <em>内存泄漏</em>）变得困难，但并非不可能。完全防止内存泄漏并不是 Rust 的保证之一，这意味着内存泄漏在 Rust 中是内存安全的。我们可以通过使用 <code>Rc&lt;T&gt;</code> 和 <code>RefCell&lt;T&gt;</code> 来看到 Rust 允许内存泄漏：可以创建相互引用的循环引用。这会导致内存泄漏，因为循环中的每个项目的引用计数永远不会达到 0，值永远不会被释放。",
    "_note": ""
  },
  "In Listing 15-26, we’re adding a main function that uses the definitions in Listing 15-25. This code creates a list in a and a list in b that points to the list in a. Then, it modifies the list in a to point to b, creating a reference cycle. There are println! statements along the way to show what the reference counts are at various points in this process.": {
    "_translate": "在清单 15-26 中，我们添加了一个 <code>main</code> 函数，该函数使用了清单 15-25 中的定义。这段代码在 <code>a</code> 中创建了一个列表，并在 <code>b</code> 中创建了一个指向 <code>a</code> 中列表的列表。然后，它修改 <code>a</code> 中的列表，使其指向 <code>b</code>，从而创建了一个引用循环。在此过程中，沿途有 <code>println!</code> 语句显示各个点的引用计数。",
    "_note": ""
  },
  "We modify a so that it points to b instead of Nil, creating a cycle. We do that by using the tail method to get a reference to the RefCell<Rc<List>> in a, which we put in the variable link. Then, we use the borrow_mut method on the RefCell<Rc<List>> to change the value inside from an Rc<List> that holds a Nil value to the Rc<List> in b.": {
    "_translate": "我们修改 <code>a</code> 使其指向 <code>b</code> 而不是 <code>Nil</code>，从而创建一个循环。我们通过使用 <code>tail</code> 方法获取 <code>a</code> 中的 <code>RefCell&lt;Rc&lt;List&gt;&gt;</code> 的引用，将其放入变量 <code>link</code> 中。然后，我们使用 <code>RefCell&lt;Rc&lt;List&gt;&gt;</code> 上的 <code>borrow_mut</code> 方法，将内部值从持有 <code>Nil</code> 值的 <code>Rc&lt;List&gt;</code> 更改为 <code>b</code> 中的 <code>Rc&lt;List&gt;</code>。",
    "_note": ""
  },
  "The reference count of the Rc<List> instances in both a and b is 2 after we change the list in a to point to b. At the end of main, Rust drops the variable b, which decreases the reference count of the b Rc<List> instance from 2 to 1. The memory that Rc<List> has on the heap won’t be dropped at this point because its reference count is 1, not 0. Then, Rust drops a, which decreases the reference count of the a Rc<List> instance from 2 to 1 as well. This instance’s memory can’t be dropped either, because the other Rc<List> instance still refers to it. The memory allocated to the list will remain uncollected forever. To visualize this reference cycle, we’ve created the diagram in Figure 15-4.": {
    "_translate": "在我们将 <code>a</code> 中的列表更改为指向 <code>b</code> 之后，<code>a</code> 和 <code>b</code> 中的 <code>Rc&lt;List&gt;</code> 实例的引用计数为 2。在 <code>main</code> 结束时，Rust 会释放变量 <code>b</code>，这将 <code>b</code> 的 <code>Rc&lt;List&gt;</code> 实例的引用计数从 2 减少到 1。此时，堆上的 <code>Rc&lt;List&gt;</code> 内存不会被释放，因为其引用计数为 1，而不是 0。然后，Rust 会释放 <code>a</code>，这将 <code>a</code> 的 <code>Rc&lt;List&gt;</code> 实例的引用计数从 2 减少到 1。由于另一个 <code>Rc&lt;List&gt;</code> 实例仍然引用它，因此该实例的内存也不能被释放。分配给列表的内存将永远无法回收。为了可视化这个引用循环，我们创建了图 15-4 中的图表。",
    "_note": ""
  },
  "Compared to a real-world program, the consequences of creating a reference cycle in this example aren’t very dire: Right after we create the reference cycle, the program ends. However, if a more complex program allocated lots of memory in a cycle and held onto it for a long time, the program would use more memory than it needed and might overwhelm the system, causing it to run out of available memory.": {
    "_translate": "与实际程序相比，本例中创建引用循环的后果并不严重：在我们创建引用循环后，程序立即结束。然而，如果一个更复杂的程序在一个循环中分配了大量内存并长时间持有，程序将使用比实际需要更多的内存，可能会使系统不堪重负，导致其耗尽可用内存。",
    "_note": ""
  },
  "As an example, rather than using a list whose items know only about the next item, we’ll create a tree whose items know about their child items and their parent items.": {
    "_translate": "例如，我们将创建一棵树，其项目不仅知道它们的子项目<em>还知道</em>它们的父项目。",
    "_note": ""
  },
  "To start, we’ll build a tree with nodes that know about their child nodes. We’ll create a struct named Node that holds its own i32 value as well as references to its child Node values:": {
    "_translate": "首先，我们将构建一个树，其中的节点知道它们的子节点。\n我们将创建一个名为 <code>Node</code> 的结构体，该结构体持有其自身的 <code>i32</code> 值以及\n对其子 <code>Node</code> 值的引用：",
    "_note": ""
  },
  "So far, we’ve demonstrated that calling Rc::clone increases the strong_count of an Rc<T> instance, and an Rc<T> instance is only cleaned up if its strong_count is 0. You can also create a weak reference to the value within an Rc<T> instance by calling Rc::downgrade and passing a reference to the Rc<T>. Strong references are how you can share ownership of an Rc<T> instance. Weak references don’t express an ownership relationship, and their count doesn’t affect when an Rc<T> instance is cleaned up. They won’t cause a reference cycle, because any cycle involving some weak references will be broken once the strong reference count of values involved is 0.": {
    "_translate": "到目前为止，我们已经证明了调用<code>Rc::clone</code>会增加<code>Rc&lt;T&gt;</code>实例的<code>strong_count</code>，并且只有当<code>Rc&lt;T&gt;</code>实例的<code>strong_count</code>为0时，该实例才会被清理。你还可以通过调用<code>Rc::downgrade</code>并传递<code>Rc&lt;T&gt;</code>的引用，来创建对<code>Rc&lt;T&gt;</code>实例中值的弱引用。<em>强引用</em>是你共享<code>Rc&lt;T&gt;</code>实例所有权的方式。<em>弱引用</em>不表示所有权关系，它们的计数不会影响<code>Rc&lt;T&gt;</code>实例何时被清理。它们不会导致引用循环，因为涉及某些弱引用的任何循环一旦相关值的强引用计数为0就会被打破。",
    "_note": ""
  },
  "Thinking about the relationships another way, a parent node should own its children: If a parent node is dropped, its child nodes should be dropped as well. However, a child should not own its parent: If we drop a child node, the parent should still exist. This is a case for weak references!": {
    "_translate": "换个角度思考这些关系，父节点应该拥有其子节点：如果父节点被丢弃，其子节点也应该被丢弃。然而，子节点不应该拥有其父节点：如果我们丢弃一个子节点，父节点仍然应该存在。这是一个使用弱引用的情况！",
    "_note": ""
  },
  "We want a Node to own its children, and we want to share that ownership with variables so that we can access each Node in the tree directly. To do this, we define the Vec<T> items to be values of type Rc<Node>. We also want to modify which nodes are children of another node, so we have a RefCell<T> in children around the Vec<Rc<Node>>.": {
    "_translate": "我们希望<code>Node</code>拥有其子节点，并且我们希望与变量共享所有权，以便我们可以直接访问树中的每个<code>Node</code>。为此，我们将<code>Vec&lt;T&gt;</code>项定义为<code>Rc&lt;Node&gt;</code>类型的值。我们还希望修改哪些节点是另一个节点的子节点，因此我们在<code>children</code>中使用<code>RefCell&lt;T&gt;</code>来包裹<code>Vec&lt;Rc&lt;Node&gt;&gt;</code>。",
    "_note": ""
  },
  "A node will be able to refer to its parent node but doesn’t own its parent. In Listing 15-28, we update main to use this new definition so that the leaf node will have a way to refer to its parent, branch.": {
    "_translate": "一个节点将能够引用其父节点，但不拥有其父节点。在清单 15-28 中，我们更新 <code>main</code> 以使用这个新定义，从而使 <code>leaf</code> 节点能够引用其父节点 <code>branch</code>。",
    "_note": ""
  },
  "When we print the parent of leaf again, this time we’ll get a Some variant holding branch: Now leaf can access its parent! When we print leaf, we also avoid the cycle that eventually ended in a stack overflow like we had in Listing 15-26; the Weak<Node> references are printed as (Weak):": {
    "_translate": "当我们再次打印 <code>leaf</code> 的父节点时，这次我们将得到一个持有 <code>branch</code> 的 <code>Some</code> 变体：现在 <code>leaf</code> 可以访问其父节点了！当我们打印 <code>leaf</code> 时，我们也避免了最终导致堆栈溢出的循环，就像我们在清单 15-26 中遇到的那样；<code>Weak&lt;Node&gt;</code> 引用被打印为 <code>(Weak)</code>：",
    "_note": ""
  },
  "After leaf is created, its Rc<Node> has a strong count of 1 and a weak count of 0. In the inner scope, we create branch and associate it with leaf, at which point when we print the counts, the Rc<Node> in branch will have a strong count of 1 and a weak count of 1 (for leaf.parent pointing to branch with a Weak<Node>). When we print the counts in leaf, we’ll see it will have a strong count of 2 because branch now has a clone of the Rc<Node> of leaf stored in branch.children but will still have a weak count of 0.": {
    "_translate": "在创建 <code>leaf</code> 之后，其 <code>Rc&lt;Node&gt;</code> 的强引用计数为 1，弱引用计数为 0。在内部作用域中，我们创建了 <code>branch</code> 并将其与 <code>leaf</code> 关联，此时当我们打印计数时，<code>branch</code> 中的 <code>Rc&lt;Node&gt;</code> 将具有强引用计数 1 和弱引用计数 1（因为 <code>leaf.parent</code> 通过 <code>Weak&lt;Node&gt;</code> 指向 <code>branch</code>）。当我们打印 <code>leaf</code> 的计数时，我们会看到它的强引用计数为 2，因为 <code>branch</code> 现在在 <code>branch.children</code> 中存储了 <code>leaf</code> 的 <code>Rc&lt;Node&gt;</code> 的一个克隆，但弱引用计数仍为 0。",
    "_note": ""
  },
  "This chapter covered how to use smart pointers to make different guarantees and trade-offs from those Rust makes by default with regular references. The Box<T> type has a known size and points to data allocated on the heap. The Rc<T> type keeps track of the number of references to data on the heap so that the data can have multiple owners. The RefCell<T> type with its interior mutability gives us a type that we can use when we need an immutable type but need to change an inner value of that type; it also enforces the borrowing rules at runtime instead of at compile time.": {
    "_translate": "本章介绍了如何使用智能指针来做出与 Rust 默认使用常规引用时不同的保证和权衡。<code>Box&lt;T&gt;</code> 类型具有已知大小，并指向堆上分配的数据。<code>Rc&lt;T&gt;</code> 类型跟踪堆上数据的引用数量，以便数据可以有多个所有者。<code>RefCell&lt;T&gt;</code> 类型通过其内部可变性，使我们可以在需要不可变类型但需要更改该类型内部值时使用；它还在运行时而不是编译时强制执行借用规则。",
    "_note": ""
  }
}