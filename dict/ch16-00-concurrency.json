{
  "Fearless Concurrency": {
    "_translate": "<a class=\"header\" href=\"#fearless-concurrency\">无畏的并发</a>",
    "_note": ""
  },
  "Handling concurrent programming safely and efficiently is another of Rust’s major goals. Concurrent programming, where different parts of a program execute independently, and parallel programming, where different parts of a program execute at the same time, are becoming increasingly important as more computers take advantage of their multiple processors. Historically, programming in these contexts has been difficult and error prone: Rust hopes to change that.": {
    "_translate": "处理并发编程的安全性和效率是 Rust 的另一个主要目标。在 <em>并发编程</em> 中，程序的不同部分独立执行，而在 <em>并行编程</em> 中，程序的不同部分同时执行，随着越来越多的计算机利用其多处理器，这两种编程方式变得越来越重要。历史上，在这些环境中编程一直很困难且容易出错：Rust 希望改变这一点。",
    "_note": ""
  },
  "Note: For simplicity’s sake, we’ll refer to many of the problems as concurrent rather than being more precise by saying concurrent and/or parallel. If this book were about concurrency and/or parallelism, we’d be more specific. For this chapter, please mentally substitute concurrent and/or parallel whenever we use concurrent.": {
    "_translate": "注意：为了简化起见，我们将许多问题称为<em>并发的</em>，而不是更精确地说<em>并发和/或并行的</em>。如果这本书是关于并发和/或并行的，我们会更具体。对于本章，请在我们使用<em>并发的</em>时，心理上代入<em>并发和/或并行的</em>。",
    "_note": ""
  },
  "Initially, the Rust team thought that ensuring memory safety and preventing concurrency problems were two separate challenges to be solved with different methods. Over time, the team discovered that the ownership and type systems are a powerful set of tools to help manage memory safety and concurrency problems! By leveraging ownership and type checking, many concurrency errors are compile-time errors in Rust rather than runtime errors. Therefore, rather than making you spend lots of time trying to reproduce the exact circumstances under which a runtime concurrency bug occurs, incorrect code will refuse to compile and present an error explaining the problem. As a result, you can fix your code while you’re working on it rather than potentially after it has been shipped to production. We’ve nicknamed this aspect of Rust fearless concurrency. Fearless concurrency allows you to write code that is free of subtle bugs and is easy to refactor without introducing new bugs.": {
    "_translate": "最初，Rust 团队认为确保内存安全和防止并发问题是要用不同方法解决的两个独立挑战。随着时间的推移，团队发现所有权和类型系统是一组强大的工具，可以帮助管理内存安全 <em>和</em> 并发问题！通过利用所有权和类型检查，许多并发错误在 Rust 中是编译时错误而不是运行时错误。因此，您不必花费大量时间尝试重现导致运行时并发错误的确切情况，错误代码将无法编译并呈现解释问题的错误。因此，您可以在编写代码时修复错误，而不是可能在代码发布到生产环境后才修复。我们给 Rust 的这一特性起了个绰号，叫做 <em>无畏的</em> <em>并发</em>。无畏的并发使您能够编写没有细微错误的代码，并且在重构时不容易引入新错误。",
    "_note": ""
  },
  "Here are the topics we’ll cover in this chapter:": {
    "_translate": "以下是本章将要讨论的主题：",
    "_note": ""
  },
  "Many languages are dogmatic about the solutions they offer for handling concurrent problems. For example, Erlang has elegant functionality for message-passing concurrency but has only obscure ways to share state between threads. Supporting only a subset of possible solutions is a reasonable strategy for higher-level languages, because a higher-level language promises benefits from giving up some control to gain abstractions. However, lower-level languages are expected to provide the solution with the best performance in any given situation and have fewer abstractions over the hardware. Therefore, Rust offers a variety of tools for modeling problems in whatever way is appropriate for your situation and requirements.": {
    "_translate": "许多语言对其提供的处理并发问题的解决方案持教条主义态度。例如，Erlang 在消息传递并发方面具有优雅的功能，但在线程之间共享状态的方法却很晦涩。对于高级语言来说，只支持可能解决方案的子集是一种合理的策略，因为高级语言承诺通过放弃一些控制来获得抽象的好处。然而，低级语言则期望在任何给定情况下提供性能最佳的解决方案，并且对硬件的抽象较少。因此，Rust 提供了多种工具，以适应您的情况和需求的任何适当方式来建模问题。",
    "_note": ""
  },
  "Fearless Concurrency - The Rust Programming Language": {
    "_translate": " fearless 并发 - 《Rust 编程语言》",
    "_note": ""
  },
  "How to create threads to run multiple pieces of code at the same time": {
    "_translate": "如何创建线程以同时运行多段代码",
    "_note": ""
  },
  "Message-passing concurrency, where channels send messages between threads": {
    "_translate": "<em>消息传递</em>并发，其中通道在线程之间发送消息，",
    "_note": ""
  },
  "Shared-state concurrency, where multiple threads have access to some piece of data": {
    "_translate": "<em>共享状态</em>并发，其中多个线程可以访问某块数据，",
    "_note": ""
  },
  "The Sync and Send traits, which extend Rust’s concurrency guarantees to user-defined types as well as types provided by the standard library": {
    "_translate": "<code>Sync</code> 和 <code>Send</code> 特性，它们将 Rust 的并发保证扩展到用户定义的类型以及标准库提供的类型。",
    "_note": ""
  },
  "Handling concurrent programming safely and efficiently is another of Rust’s major goals. Concurrent programming, in which different parts of a program execute independently, and parallel programming, in which different parts of a program execute at the same time, are becoming increasingly important as more computers take advantage of their multiple processors. Historically, programming in these contexts has been difficult and error prone. Rust hopes to change that.": {
    "_translate": "安全高效地处理并发编程是 Rust 的另一个主要目标。<em>并发编程</em>，即程序的不同部分独立执行，和 <em>并行编程</em>，即程序的不同部分同时执行，随着越来越多的计算机利用其多处理器，变得越来越重要。历史上，在这些环境中编程一直很困难且容易出错。Rust 希望改变这一点。",
    "_note": ""
  },
  "Note: For simplicity’s sake, we’ll refer to many of the problems as concurrent rather than being more precise by saying concurrent and/or parallel. For this chapter, please mentally substitute concurrent and/or parallel whenever we use concurrent. In the next chapter, where the distinction matters more, we’ll be more specific.": {
    "_translate": "注意：为了简化，我们将许多问题称为<em>并发的</em>，而不是更精确地说<em>并发和/或并行的</em>。对于本章，请在我们使用<em>并发的</em>时，心理上代入<em>并发和/或并行的</em>。在下一章中，这种区分更为重要，我们会更加具体。",
    "_note": ""
  },
  "Many languages are dogmatic about the solutions they offer for handling concurrent problems. For example, Erlang has elegant functionality for message-passing concurrency but has only obscure ways to share state between threads. Supporting only a subset of possible solutions is a reasonable strategy for higher-level languages because a higher-level language promises benefits from giving up some control to gain abstractions. However, lower-level languages are expected to provide the solution with the best performance in any given situation and have fewer abstractions over the hardware. Therefore, Rust offers a variety of tools for modeling problems in whatever way is appropriate for your situation and requirements.": {
    "_translate": "许多语言对其提供的处理并发问题的解决方案持教条主义态度。例如，Erlang 在消息传递并发方面具有优雅的功能，但在线程之间共享状态的方法却很晦涩。对于高级语言来说，仅支持可能解决方案的子集是一种合理的策略，因为高级语言承诺通过放弃一些控制来获得抽象的好处。然而，低级语言则期望在任何给定情况下提供性能最佳的解决方案，并且对硬件的抽象较少。因此，Rust 提供了多种工具，以适合您情况和需求的方式建模问题。",
    "_note": ""
  }
}