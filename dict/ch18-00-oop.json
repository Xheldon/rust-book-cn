{
  "Object-Oriented Programming Features of Rust": {
    "_translate": "<a class=\"header\" href=\"#object-oriented-programming-features-of-rust\">Rust 的面向对象编程特性</a>",
    "_note": ""
  },
  "Object-oriented programming (OOP) is a way of modeling programs. Objects as a programmatic concept were introduced in the programming language Simula in the 1960s. Those objects influenced Alan Kay’s programming architecture in which objects pass messages to each other. To describe this architecture, he coined the term object-oriented programming in 1967. Many competing definitions describe what OOP is, and by some of these definitions Rust is object-oriented, but by others it is not. In this chapter, we’ll explore certain characteristics that are commonly considered object-oriented and how those characteristics translate to idiomatic Rust. We’ll then show you how to implement an object-oriented design pattern in Rust and discuss the trade-offs of doing so versus implementing a solution using some of Rust’s strengths instead.": {
    "_translate": "面向对象编程（OOP）是一种程序建模方式。作为程序概念的对象是在1960年代的编程语言Simula中引入的。这些对象影响了Alan Kay的编程架构，在该架构中对象互相传递消息。为了描述这种架构，他在1967年创造了<em>面向对象编程</em>一词。许多竞争性的定义描述了什么是OOP，根据其中一些定义，Rust是面向对象的，但根据其他定义则不是。在本章中，我们将探讨通常被认为是面向对象的某些特征，以及这些特征如何转化为惯用的Rust。然后，我们将向您展示如何在Rust中实现面向对象的设计模式，并讨论与使用Rust的一些优势来实现解决方案相比的权衡。",
    "_note": ""
  },
  "Object Oriented Programming Features of Rust - The Rust Programming Language": {
    "_translate": "Rust 编程语言的面向对象编程特性 - The Rust Programming Language",
    "_note": ""
  }
}