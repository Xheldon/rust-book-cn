{
  "Advanced Features": {
    "_translate": "<a class=\"header\" href=\"#advanced-features\">高级特性</a>",
    "_note": ""
  },
  "In this chapter, we’ll cover:": {
    "_translate": "在本章中，我们将介绍：",
    "_note": ""
  },
  "By now, you’ve learned the most commonly used parts of the Rust programming language. Before we do one more project in Chapter 21, we’ll look at a few aspects of the language you might run into every once in a while, but may not use every day. You can use this chapter as a reference for when you encounter any unknowns. The features covered here are useful in very specific situations. Although you might not reach for them often, we want to make sure you have a grasp of all the features Rust has to offer.": {
    "_translate": "到目前为止，您已经学习了 Rust 编程语言中最常用的部分。在第 21 章我们再做一个项目之前，我们将看看一些您偶尔会遇到但可能不会每天使用的语言方面。您可以将本章用作遇到任何未知内容时的参考。这里涵盖的功能在非常特定的情况下很有用。虽然您可能不会经常使用它们，但我们希望确保您对 Rust 提供的所有功能都有所了解。",
    "_note": ""
  },
  "It’s a panoply of Rust features with something for everyone! Let’s dive in!": {
    "_translate": "这是一系列 Rust 特性，每个人都能找到自己感兴趣的内容！让我们开始吧！",
    "_note": ""
  },
  "Advanced Features - The Rust Programming Language": {
    "_translate": "高级特性 - 《Rust编程语言》",
    "_note": ""
  },
  "Unsafe Rust: how to opt out of some of Rust’s guarantees and take responsibility for manually upholding those guarantees": {
    "_translate": "Unsafe Rust: 如何选择退出 Rust 的某些保证并承担手动维护这些保证的责任",
    "_note": ""
  },
  "Advanced traits: associated types, default type parameters, fully qualified syntax, supertraits, and the newtype pattern in relation to traits": {
    "_translate": "高级特性：关联类型、默认类型参数、完全限定语法、超特性（supertraits）和与特性相关的新型模式。",
    "_note": ""
  },
  "Advanced functions and closures: function pointers and returning closures": {
    "_translate": "高级函数和闭包：函数指针和返回闭包",
    "_note": ""
  },
  "Advanced types: more about the newtype pattern, type aliases, the never type, and dynamically sized types": {
    "_translate": "高级类型：更多关于新类型模式、类型别名、永不类型和动态大小类型",
    "_note": ""
  },
  "Macros: ways to define code that defines more code at compile time": {
    "_translate": "宏：在编译时定义更多代码的代码定义方式",
    "_note": ""
  },
  "By now, you’ve learned the most commonly used parts of the Rust programming language. Before we do one more project, in Chapter 21, we’ll look at a few aspects of the language you might run into every once in a while, but may not use every day. You can use this chapter as a reference for when you encounter any unknowns. The features covered here are useful in very specific situations. Although you might not reach for them often, we want to make sure you have a grasp of all the features Rust has to offer.": {
    "_translate": "到目前为止，您已经学习了 Rust 编程语言中最常用的部分。在我们进行第 21 章的最后一个项目之前，我们将简要介绍一些您可能会偶尔遇到但不一定会每天使用的语言特性。您可以将本章用作遇到任何未知内容时的参考。这里涵盖的特性在非常特定的情况下非常有用。虽然您可能不会经常使用它们，但我们希望确保您对 Rust 提供的所有特性都有所了解。",
    "_note": ""
  },
  "Unsafe Rust: How to opt out of some of Rust’s guarantees and take responsibility for manually upholding those guarantees": {
    "_translate": "Unsafe Rust: 如何选择退出 Rust 的某些保证并承担手动维护这些保证的责任",
    "_note": ""
  },
  "By now, you’ve learned the most commonly used parts of the Rust programming language. Before we do one more project, in Chapter 21, we’ll look at a few aspects of the language you might run into every once in a while but may not use every day. You can use this chapter as a reference for when you encounter any unknowns. The features covered here are useful in very specific situations. Although you might not reach for them often, we want to make sure you have a grasp of all the features Rust has to offer.": {
    "_translate": "到目前为止，您已经学习了 Rust 编程语言中最常用的部分。在我们进行第 21 章的最后一个项目之前，我们将简要介绍一些您可能会偶尔遇到但不一定会每天使用的语言特性。您可以将本章用作遇到任何未知内容时的参考。这里涵盖的特性在非常特定的情况下非常有用。虽然您可能不会经常使用它们，但我们希望确保您对 Rust 提供的所有特性都有所了解。",
    "_note": ""
  },
  "Advanced traits: Associated types, default type parameters, fully qualified syntax, supertraits, and the newtype pattern in relation to traits": {
    "_translate": "高级特性：关联类型、默认类型参数、完全限定语法、超特性（supertraits）以及与特性（traits）相关的新类型模式",
    "_note": ""
  },
  "Advanced types: More about the newtype pattern, type aliases, the never type, and dynamically sized types": {
    "_translate": "高级类型：更多关于新类型模式、类型别名、永不类型和动态大小类型",
    "_note": ""
  },
  "Advanced functions and closures: Function pointers and returning closures": {
    "_translate": "高级函数和闭包：函数指针和返回闭包",
    "_note": ""
  },
  "Macros: Ways to define code that defines more code at compile time": {
    "_translate": "宏：在编译时定义更多代码的代码定义方式",
    "_note": ""
  }
}