{
  "Advanced Types - The Rust Programming Language": {
    "_translate": "高级类型 - 《Rust 编程语言》",
    "_note": ""
  },
  "Advanced Types": {
    "_translate": "<a class=\"header\" href=\"#advanced-types\">高级类型</a>",
    "_note": ""
  },
  "Using the Newtype Pattern for Type Safety and Abstraction": {
    "_translate": "<a class=\"header\" href=\"#using-the-newtype-pattern-for-type-safety-and-abstraction\">使用 Newtype 模式进行类型安全和抽象</a>",
    "_note": ""
  },
  "The Rust type system has some features that we’ve so far mentioned but haven’t yet discussed. We’ll start by discussing newtypes in general as we examine why newtypes are useful as types. Then we’ll move on to type aliases, a feature similar to newtypes but with slightly different semantics. We’ll also discuss the ! type and dynamically sized types.": {
    "_translate": "Rust 类型系统有一些我们迄今为止提到但尚未讨论的特性。我们将从讨论新类型（newtypes）开始，探讨新类型作为类型为何有用。然后，我们将转向类型别名，这是一种与新类型相似但语义略有不同的特性。我们还将讨论 <code>!</code> 类型和动态大小类型。",
    "_note": ""
  },
  "Note: This section assumes you’ve read the earlier section “Using the Newtype Pattern to Implement External Traits on External Types.”": {
    "_translate": "注意：本节假设您已经阅读了前面的部分<a href=\"ch20-02-advanced-traits.html#using-the-newtype-pattern-to-implement-external-traits-on-external-types\">“使用Newtype模式在外部类型上实现外部特征。”</a>",
    "_note": ""
  },
  "We can also use the newtype pattern to abstract away some implementation details of a type: the new type can expose a public API that is different from the API of the private inner type.": {
    "_translate": "我们还可以使用新类型模式来抽象某个类型的某些实现细节：新类型可以暴露一个与私有内部类型API不同的公共API。",
    "_note": ""
  },
  "The newtype pattern is also useful for tasks beyond those we’ve discussed so far, including statically enforcing that values are never confused and indicating the units of a value. You saw an example of using newtypes to indicate units in Listing 20-16: recall that the Millimeters and Meters structs wrapped u32 values in a newtype. If we wrote a function with a parameter of type Millimeters, we couldn’t compile a program that accidentally tried to call that function with a value of type Meters or a plain u32.": {
    "_translate": "新类型模式对于我们迄今为止讨论的任务之外的任务也非常有用，包括静态地强制值不会被混淆以及表示值的单位。你在清单 20-16 中看到了使用新类型来表示单位的示例：回想一下，<code>Millimeters</code> 和 <code>Meters</code> 结构体将 <code>u32</code> 值包装在一个新类型中。如果我们编写了一个参数类型为 <code>Millimeters</code> 的函数，我们就不能编译一个意外尝试用 <code>Meters</code> 类型或普通 <code>u32</code> 类型的值调用该函数的程序。",
    "_note": ""
  },
  "Creating Type Synonyms with Type Aliases": {
    "_translate": "<a class=\"header\" href=\"#creating-type-synonyms-with-type-aliases\">使用类型别名创建类型同义词</a>",
    "_note": ""
  },
  "Rust provides the ability to declare a type alias to give an existing type another name. For this we use the type keyword. For example, we can create the alias Kilometers to i32 like so:": {
    "_translate": "Rust 提供了声明 <em>类型别名</em> 的能力，为现有类型赋予另一个名称。为此我们使用 <code>type</code> 关键字。例如，我们可以创建 <code>Kilometers</code> 作为 <code>i32</code> 的别名，如下所示：",
    "_note": ""
  },
  "Newtypes can also hide internal implementation. For example, we could provide a People type to wrap a HashMap<i32, String> that stores a person’s ID associated with their name. Code using People would only interact with the public API we provide, such as a method to add a name string to the People collection; that code wouldn’t need to know that we assign an i32 ID to names internally. The newtype pattern is a lightweight way to achieve encapsulation to hide implementation details, which we discussed in the “Encapsulation that Hides Implementation Details” section of Chapter 18.": {
    "_translate": "新类型还可以隐藏内部实现。例如，我们可以提供一个 <code>People</code> 类型来包装一个 <code>HashMap&lt;i32, String&gt;</code>，该类型存储一个人的 ID 与他们的名字相关联。使用 <code>People</code> 的代码只会与我们提供的公共 API 交互，例如一个将名字字符串添加到 <code>People</code> 集合的方法；该代码不需要知道我们在内部为名字分配了一个 <code>i32</code> ID。新类型模式是一种轻量级的方法，用于实现封装以隐藏实现细节，我们在第 18 章的 <a href=\"ch18-01-what-is-oo.html#encapsulation-that-hides-implementation-details\">“封装隐藏实现细节”</a> 部分讨论了这一点。",
    "_note": ""
  },
  "Now, the alias Kilometers is a synonym for i32; unlike the Millimeters and Meters types we created in Listing 20-16, Kilometers is not a separate, new type. Values that have the type Kilometers will be treated the same as values of type i32:": {
    "_translate": "现在，别名 <code>Kilometers</code> 是 <code>i32</code> 的一个 <em>同义词</em>；与我们在清单 20-16 中创建的 <code>Millimeters</code>\n和 <code>Meters</code> 类型不同，<code>Kilometers</code> 不是一个独立的新类型。类型为 <code>Kilometers</code> 的值将被视为与类型为 <code>i32</code> 的值相同：",
    "_note": ""
  },
  "The main use case for type synonyms is to reduce repetition. For example, we might have a lengthy type like this:": {
    "_translate": "类型别名的主要用例是减少重复。例如，我们\n可能有一个冗长的类型，如下所示：",
    "_note": ""
  },
  "Because Kilometers and i32 are the same type, we can add values of both types and we can pass Kilometers values to functions that take i32 parameters. However, using this method, we don’t get the type checking benefits that we get from the newtype pattern discussed earlier. In other words, if we mix up Kilometers and i32 values somewhere, the compiler will not give us an error.": {
    "_translate": "因为 <code>Kilometers</code> 和 <code>i32</code> 是同一种类型，我们可以将这两种类型的值相加，并且可以将 <code>Kilometers</code> 值传递给接受 <code>i32</code> 参数的函数。然而，使用这种方法，我们无法获得前面讨论的新类型模式带来的类型检查优势。换句话说，如果我们 somewhere 混淆了 <code>Kilometers</code> 和 <code>i32</code> 值，编译器不会给我们错误。",
    "_note": ""
  },
  "Writing this lengthy type in function signatures and as type annotations all over the code can be tiresome and error prone. Imagine having a project full of code like that in Listing 20-25.": {
    "_translate": "在函数签名和类型注释中写这样冗长的类型，以及在整个代码中到处使用，可能会很累人且容易出错。想象一下，你的项目中充满了如清单 20-25 所示的代码。",
    "_note": ""
  },
  "A type alias makes this code more manageable by reducing the repetition. In Listing 20-26, we’ve introduced an alias named Thunk for the verbose type and can replace all uses of the type with the shorter alias Thunk.": {
    "_translate": "类型别名通过减少重复使这段代码更易于管理。在列表 20-26 中，我们引入了一个名为 <code>Thunk</code> 的别名，用于冗长的类型，并可以用较短的别名 <code>Thunk</code> 替换所有类型的使用。",
    "_note": ""
  },
  "This code is much easier to read and write! Choosing a meaningful name for a type alias can help communicate your intent as well (thunk is a word for code to be evaluated at a later time, so it’s an appropriate name for a closure that gets stored).": {
    "_translate": "这段代码更容易阅读和编写！为类型别名选择一个有意义的名称也有助于传达你的意图（<em>thunk</em> 是一个表示稍后要执行的代码的词，因此它是存储闭包的合适名称）。",
    "_note": ""
  },
  "The Result<..., Error> is repeated a lot. As such, std::io has this type alias declaration:": {
    "_translate": "<code>Result&lt;..., Error&gt;</code> 经常被重复使用。因此，<code>std::io</code> 有这样一个类型别名声明：",
    "_note": ""
  },
  "Type aliases are also commonly used with the Result<T, E> type for reducing repetition. Consider the std::io module in the standard library. I/O operations often return a Result<T, E> to handle situations when operations fail to work. This library has a std::io::Error struct that represents all possible I/O errors. Many of the functions in std::io will be returning Result<T, E> where the E is std::io::Error, such as these functions in the Write trait:": {
    "_translate": "类型别名也常用于<code>Result&lt;T, E&gt;</code>类型以减少重复。考虑标准库中的<code>std::io</code>模块。I/O操作经常返回一个<code>Result&lt;T, E&gt;</code>来处理操作失败的情况。这个库有一个<code>std::io::Error</code>结构体，表示所有可能的I/O错误。<code>std::io</code>中的许多函数将返回<code>Result&lt;T, E&gt;</code>，其中<code>E</code>是<code>std::io::Error</code>，例如<code>Write</code>特质中的这些函数：",
    "_note": ""
  },
  "Because this declaration is in the std::io module, we can use the fully qualified alias std::io::Result<T>; that is, a Result<T, E> with the E filled in as std::io::Error. The Write trait function signatures end up looking like this:": {
    "_translate": "因为这个声明在 <code>std::io</code> 模块中，我们可以使用完全限定的别名 <code>std::io::Result&lt;T&gt;</code>；也就是说，一个 <code>Result&lt;T, E&gt;</code>，其中 <code>E</code> 被填充为 <code>std::io::Error</code>。<code>Write</code> 特性函数签名最终看起来像这样：",
    "_note": ""
  },
  "The type alias helps in two ways: it makes code easier to write and it gives us a consistent interface across all of std::io. Because it’s an alias, it’s just another Result<T, E>, which means we can use any methods that work on Result<T, E> with it, as well as special syntax like the ? operator.": {
    "_translate": "类型别名在两个方面有所帮助：它使代码更容易编写<em>和</em>它为我们提供了在整个<code>std::io</code>中的一致接口。因为它是别名，所以它只是另一个<code>Result<T, E></code>，这意味着我们可以使用任何适用于<code>Result<T, E></code>的方法，以及像<code>?</code>运算符这样的特殊语法。",
    "_note": ""
  },
  "The Never Type that Never Returns": {
    "_translate": "<a class=\"header\" href=\"#the-never-type-that-never-returns\">永不返回的 Never 类型</a>",
    "_note": ""
  },
  "Rust has a special type named ! that’s known in type theory lingo as the empty type because it has no values. We prefer to call it the never type because it stands in the place of the return type when a function will never return. Here is an example:": {
    "_translate": "Rust 有一个特殊类型，名为 <code>!</code>，在类型理论术语中被称为 <em>空类型</em>，因为它没有值。我们更喜欢称它为 <em>永不返回类型</em>，因为它在函数永远不会返回时用作返回类型。这里是一个例子：",
    "_note": ""
  },
  "This code is read as “the function bar returns never.” Functions that return never are called diverging functions. We can’t create values of the type ! so bar can never possibly return.": {
    "_translate": "这段代码被解读为“函数 <code>bar</code> 永不返回。”永不返回的函数被称为 <em>发散函数</em>。我们不能创建类型为 <code>!</code> 的值，所以 <code>bar</code> 永远不可能返回。",
    "_note": ""
  },
  "But what use is a type you can never create values for? Recall the code from Listing 2-5, part of the number guessing game; we’ve reproduced a bit of it here in Listing 20-27.": {
    "_translate": "但是，一个你永远无法创建值的类型有什么用呢？回想一下第2-5列表中的代码，这是数字猜谜游戏的一部分；我们在这里的第20-27列表中重现了一部分。",
    "_note": ""
  },
  "At the time, we skipped over some details in this code. In Chapter 6 in “The match Control Flow Operator” section, we discussed that match arms must all return the same type. So, for example, the following code doesn’t work:": {
    "_translate": "当时，我们跳过了一些代码中的细节。在第6章的<a href=\"ch06-02-match.html#the-match-control-flow-operator\">“<code>match</code> 控制流操作符”</a>部分，我们讨论了<code>match</code>分支必须都返回相同类型。所以，例如，以下代码无法工作：",
    "_note": ""
  },
  "The type of guess in this code would have to be an integer and a string, and Rust requires that guess have only one type. So what does continue return? How were we allowed to return a u32 from one arm and have another arm that ends with continue in Listing 20-27?": {
    "_translate": "在这段代码中，<code>guess</code> 的类型必须是整数 <em>和</em> 字符串，而 Rust 要求 <code>guess</code> 只能有一种类型。那么 <code>continue</code> 返回什么？我们是如何在 Listing 20-27 中从一个分支返回 <code>u32</code>，而另一个分支以 <code>continue</code> 结束的？",
    "_note": ""
  },
  "As you might have guessed, continue has a ! value. That is, when Rust computes the type of guess, it looks at both match arms, the former with a value of u32 and the latter with a ! value. Because ! can never have a value, Rust decides that the type of guess is u32.": {
    "_translate": "正如你可能已经猜到的，<code>continue</code> 有一个 <code>!</code> 值。也就是说，当 Rust\n计算 <code>guess</code> 的类型时，它会查看两个匹配臂，前者有一个 <code>u32</code> 值，后者有一个 <code>!</code> 值。因为 <code>!</code> 永远不会有值，Rust 决定 <code>guess</code> 的类型是 <code>u32</code>。",
    "_note": ""
  },
  "The formal way of describing this behavior is that expressions of type ! can be coerced into any other type. We’re allowed to end this match arm with continue because continue doesn’t return a value; instead, it moves control back to the top of the loop, so in the Err case, we never assign a value to guess.": {
    "_translate": "正式描述这种行为的方式是，类型为<code>!</code>的表达式可以被强制转换为任何其他类型。我们可以在这个<code>match</code>分支的末尾使用<code>continue</code>，因为<code>continue</code>不返回值；相反，它将控制权移回循环的顶部，所以在<code>Err</code>情况下，我们从未给<code>guess</code>赋值。",
    "_note": ""
  },
  "The never type is useful with the panic! macro as well. Recall the unwrap function that we call on Option<T> values to produce a value or panic with this definition:": {
    "_translate": "never 类型在与 <code>panic!</code> 宏一起使用时也很有用。回想一下我们在 <code>Option&lt;T&gt;</code> 值上调用的 <code>unwrap</code> 函数，用于生成一个值或在以下定义中 panic：",
    "_note": ""
  },
  "One final expression that has the type ! is a loop:": {
    "_translate": "最后一个类型为 <code>!</code> 的表达式是 <code>loop</code>：",
    "_note": ""
  },
  "In this code, the same thing happens as in the match in Listing 20-27: Rust sees that val has the type T and panic! has the type !, so the result of the overall match expression is T. This code works because panic! doesn’t produce a value; it ends the program. In the None case, we won’t be returning a value from unwrap, so this code is valid.": {
    "_translate": "在这个代码中，与清单 20-27 中的 <code>match</code> 一样：Rust 看到 <code>val</code> 有类型 <code>T</code> 而 <code>panic!</code> 有类型 <code>!</code>，因此整个 <code>match</code> 表达式的结果是 <code>T</code>。这段代码可以工作，因为 <code>panic!</code> 不会产生值；它会结束程序。在 <code>None</code> 情况下，我们不会从 <code>unwrap</code> 返回值，所以这段代码是有效的。",
    "_note": ""
  },
  "Here, the loop never ends, so ! is the value of the expression. However, this wouldn’t be true if we included a break, because the loop would terminate when it got to the break.": {
    "_translate": "这里，循环永远不会结束，所以<code>!</code>是表达式的值。但是，如果我们包含了一个<code>break</code>，这就不会成立，因为当循环遇到<code>break</code>时会终止。",
    "_note": ""
  },
  "Dynamically Sized Types and the Sized Trait": {
    "_translate": "<a class=\"header\" href=\"#dynamically-sized-types-and-the-sized-trait\">动态大小类型和 <code>Sized</code> 特性</a>",
    "_note": ""
  },
  "Rust needs to know certain details about its types, such as how much space to allocate for a value of a particular type. This leaves one corner of its type system a little confusing at first: the concept of dynamically sized types. Sometimes referred to as DSTs or unsized types, these types let us write code using values whose size we can know only at runtime.": {
    "_translate": "Rust 需要知道其类型的一些详细信息，例如为特定类型的值分配多少空间。这使得其类型系统的一个角落一开始有点令人困惑：即 <em>动态大小类型</em> 的概念。有时也称为 <em>DSTs</em> 或 <em>未定大小类型</em>，这些类型让我们可以编写使用那些只能在运行时才知道大小的值的代码。",
    "_note": ""
  },
  "Let’s dig into the details of a dynamically sized type called str, which we’ve been using throughout the book. That’s right, not &str, but str on its own, is a DST. We can’t know how long the string is until runtime, meaning we can’t create a variable of type str, nor can we take an argument of type str. Consider the following code, which does not work:": {
    "_translate": "让我们深入探讨一种称为<code>str</code>的动态大小类型，我们在整本书中一直在使用它。没错，不是<code>&str</code>，而是单独的<code>str</code>，它是一个DST。我们无法在编译时知道字符串的长度，这意味着我们不能创建类型为<code>str</code>的变量，也不能接受类型为<code>str</code>的参数。考虑以下代码，它是无法工作的：",
    "_note": ""
  },
  "Rust needs to know how much memory to allocate for any value of a particular type, and all values of a type must use the same amount of memory. If Rust allowed us to write this code, these two str values would need to take up the same amount of space. But they have different lengths: s1 needs 12 bytes of storage and s2 needs 15. This is why it’s not possible to create a variable holding a dynamically sized type.": {
    "_translate": "Rust 需要知道为特定类型的任何值分配多少内存，并且所有该类型的值必须使用相同数量的内存。如果 Rust 允许我们编写此代码，这两个 <code>str</code> 值将需要占用相同的空间。但它们的长度不同：<code>s1</code> 需要 12 字节的存储空间，而 <code>s2</code> 需要 15 字节。这就是为什么无法创建一个持有动态大小类型的变量。",
    "_note": ""
  },
  "So what do we do? In this case, you already know the answer: we make the types of s1 and s2 a &str rather than a str. Recall from the “String Slices” section of Chapter 4 that the slice data structure just stores the starting position and the length of the slice. So although a &T is a single value that stores the memory address of where the T is located, a &str is two values: the address of the str and its length. As such, we can know the size of a &str value at compile time: it’s twice the length of a usize. That is, we always know the size of a &str, no matter how long the string it refers to is. In general, this is the way in which dynamically sized types are used in Rust: they have an extra bit of metadata that stores the size of the dynamic information. The golden rule of dynamically sized types is that we must always put values of dynamically sized types behind a pointer of some kind.": {
    "_translate": "那么我们该怎么做呢？在这种情况下，你已经知道答案：我们将 <code>s1</code> 和 <code>s2</code> 的类型改为 <code>&amp;str</code> 而不是 <code>str</code>。回想第 4 章的 <a href=\"ch04-03-slices.html#string-slices\">“字符串切片”</a> 部分，切片数据结构仅存储切片的起始位置和长度。因此，虽然 <code>&amp;T</code> 是一个存储 <code>T</code> 所在内存地址的单个值，<code>&amp;str</code> 是 <em>两个</em> 值：<code>str</code> 的地址及其长度。因此，我们可以在编译时知道 <code>&amp;str</code> 值的大小：它是 <code>usize</code> 长度的两倍。也就是说，无论它引用的字符串有多长，我们总是知道 <code>&amp;str</code> 的大小。一般来说，这就是 Rust 中动态大小类型使用的方式：它们有一个额外的元数据位来存储动态信息的大小。动态大小类型的黄金法则是，我们必须始终将动态大小类型的值放在某种指针后面。",
    "_note": ""
  },
  "We can combine str with all kinds of pointers: for example, Box<str> or Rc<str>. In fact, you’ve seen this before but with a different dynamically sized type: traits. Every trait is a dynamically sized type we can refer to by using the name of the trait. In Chapter 18 in the “Using Trait Objects That Allow for Values of Different Types” section, we mentioned that to use traits as trait objects, we must put them behind a pointer, such as &dyn Trait or Box<dyn Trait> (Rc<dyn Trait> would work too).": {
    "_translate": "我们可以将<code>str</code>与各种指针结合使用：例如，<code>Box&lt;str&gt;</code>或<code>Rc&lt;str&gt;</code>。事实上，你之前已经见过这种情况，但使用的是不同的动态大小类型：特质。每个特质都是一个可以通过特质名称引用的动态大小类型。在第18章的<a href=\"ch18-02-trait-objects.html#using-trait-objects-that-allow-for-values-of-different-types\">“使用允许不同类型的值的特质对象”</a>部分，我们提到，要将特质用作特质对象，我们必须将它们放在指针后面，例如<code>&amp;dyn Trait</code>或<code>Box&lt;dyn Trait&gt;</code>（<code>Rc&lt;dyn Trait&gt;</code>也可以）。",
    "_note": ""
  },
  "is actually treated as though we had written this:": {
    "_translate": "实际上被视为我们编写了以下内容：",
    "_note": ""
  },
  "To work with DSTs, Rust provides the Sized trait to determine whether or not a type’s size is known at compile time. This trait is automatically implemented for everything whose size is known at compile time. In addition, Rust implicitly adds a bound on Sized to every generic function. That is, a generic function definition like this:": {
    "_translate": "为了处理 DST，Rust 提供了 <code>Sized</code> 特性来确定类型在编译时的大小是否已知。这个特性会自动为所有在编译时大小已知的类型实现。此外，Rust 会隐式地为每个泛型函数添加一个 <code>Sized</code> 的边界。也就是说，像这样的泛型函数定义：",
    "_note": ""
  },
  "By default, generic functions will work only on types that have a known size at compile time. However, you can use the following special syntax to relax this restriction:": {
    "_translate": "默认情况下，泛型函数只能在编译时具有已知大小的类型上工作。但是，您可以使用以下特殊语法来放宽此限制：",
    "_note": ""
  },
  "Also note that we switched the type of the t parameter from T to &T. Because the type might not be Sized, we need to use it behind some kind of pointer. In this case, we’ve chosen a reference.": {
    "_translate": "还请注意，我们将 <code>t</code> 参数的类型从 <code>T</code> 更改为了 <code>&amp;T</code>。因为该类型可能不是 <code>Sized</code>，所以我们需要在某种指针后面使用它。在这种情况下，我们选择了一个引用。",
    "_note": ""
  },
  "A trait bound on ?Sized means “T may or may not be Sized” and this notation overrides the default that generic types must have a known size at compile time. The ?Trait syntax with this meaning is only available for Sized, not any other traits.": {
    "_translate": "<code>?Sized</code> 上的特征约束意味着 “<code>T</code> 可能是或可能不是 <code>Sized</code>”，并且此标记会覆盖泛型类型在编译时必须具有已知大小的默认要求。这种含义的 <code>?Trait</code> 语法仅适用于 <code>Sized</code>，不适用于任何其他特征。",
    "_note": ""
  },
  "Next, we’ll talk about functions and closures!": {
    "_translate": "接下来，我们将讨论函数和闭包！",
    "_note": ""
  },
  "This section assumes you’ve read the earlier section “Using the Newtype Pattern to Implement External Traits on External Types.” The newtype pattern is also useful for tasks beyond those we’ve discussed so far, including statically enforcing that values are never confused and indicating the units of a value. You saw an example of using newtypes to indicate units in Listing 20-16: recall that the Millimeters and Meters structs wrapped u32 values in a newtype. If we wrote a function with a parameter of type Millimeters, we couldn’t compile a program that accidentally tried to call that function with a value of type Meters or a plain u32.": {
    "_translate": "本节假设您已经阅读了前面的部分<a href=\"ch20-02-advanced-traits.html#using-the-newtype-pattern-to-implement-external-traits-on-external-types\">“使用新类型模式在外部类型上实现外部特征。”</a><!--\nignore --> 新类型模式对于我们迄今为止讨论的任务之外的任务也非常有用，包括静态强制值永不混淆和指示值的单位。您在列表 20-16 中看到了使用新类型来指示单位的示例：回想一下，<code>Millimeters</code> 和 <code>Meters</code> 结构体将 <code>u32</code> 值包装在新类型中。如果我们编写了一个参数类型为 <code>Millimeters</code> 的函数，我们无法编译一个意外尝试用 <code>Meters</code> 类型或普通 <code>u32</code> 值调用该函数的程序。",
    "_note": ""
  },
  "Newtypes can also hide internal implementation. For example, we could provide a People type to wrap a HashMap<i32, String> that stores a person’s ID associated with their name. Code using People would only interact with the public API we provide, such as a method to add a name string to the People collection; that code wouldn’t need to know that we assign an i32 ID to names internally. The newtype pattern is a lightweight way to achieve encapsulation to hide implementation details, which we discussed in “Encapsulation that Hides Implementation Details” in Chapter 18.": {
    "_translate": "新类型也可以隐藏内部实现。例如，我们可以提供一个<code>People</code>类型来包装一个<code>HashMap&lt;i32, String&gt;</code>，该类型存储一个人的ID及其姓名。使用<code>People</code>的代码只会与我们提供的公共API交互，例如一个将姓名字符串添加到<code>People</code>集合的方法；该代码不需要知道我们在内部为姓名分配了一个<code>i32</code> ID。新类型模式是一种轻量级的方法，用于实现隐藏实现细节的封装，我们在<a href=\"ch18-01-what-is-oo.html#encapsulation-that-hides-implementation-details\">“封装隐藏实现细节”</a><!--\nignore -->第18章中讨论过。",
    "_note": ""
  },
  "At the time, we skipped over some details in this code. In “The match Control Flow Operator” in Chapter 6, we discussed that match arms must all return the same type. So, for example, the following code doesn’t work:": {
    "_translate": "当时，我们跳过了一些代码中的细节。在<a href=\"ch06-02-match.html#the-match-control-flow-operator\">“<code>match</code> 控制流操作符”</a>一章中，我们讨论了<code>match</code>分支必须都返回相同的类型。所以，例如，以下代码无法工作：",
    "_note": ""
  },
  "We can combine str with all kinds of pointers: for example, Box<str> or Rc<str>. In fact, you’ve seen this before but with a different dynamically sized type: traits. Every trait is a dynamically sized type we can refer to by using the name of the trait. In “Using Trait Objects That Allow for Values of Different Types” in Chapter 18, we mentioned that to use traits as trait objects, we must put them behind a pointer, such as &dyn Trait or Box<dyn Trait> (Rc<dyn Trait> would work too).": {
    "_translate": "我们可以将<code>str</code>与各种指针结合使用：例如，<code>Box&lt;str&gt;</code>或<code>Rc&lt;str&gt;</code>。事实上，你之前已经见过这种情况，但使用的是不同的动态大小类型：特质。每个特质都是一个可以通过特质名称引用的动态大小类型。在<a href=\"ch18-02-trait-objects.html#using-trait-objects-that-allow-for-values-of-different-types\">“使用允许不同类型的值的特质对象”</a><!-- ignore\n-->第18章中，我们提到，要将特质用作特质对象，我们必须将它们放在指针后面，例如<code>&amp;dyn Trait</code>或<code>Box&lt;dyn Trait&gt;</code>（<code>Rc&lt;dyn Trait&gt;</code>也可以）。",
    "_note": ""
  },
  "So what do we do? In this case, you already know the answer: we make the types of s1 and s2 a &str rather than a str. Recall from “String Slices” in Chapter 4 that the slice data structure just stores the starting position and the length of the slice. So although a &T is a single value that stores the memory address of where the T is located, a &str is two values: the address of the str and its length. As such, we can know the size of a &str value at compile time: it’s twice the length of a usize. That is, we always know the size of a &str, no matter how long the string it refers to is. In general, this is the way in which dynamically sized types are used in Rust: they have an extra bit of metadata that stores the size of the dynamic information. The golden rule of dynamically sized types is that we must always put values of dynamically sized types behind a pointer of some kind.": {
    "_translate": "那么我们该怎么做呢？在这种情况下，你已经知道答案：我们将 <code>s1</code> 和 <code>s2</code> 的类型改为 <code>&amp;str</code> 而不是 <code>str</code>。回想第 4 章<a href=\"ch04-03-slices.html#string-slices\">“字符串切片”</a><!-- ignore --> 中的内容，切片数据结构仅存储切片的起始位置和长度。因此，虽然 <code>&amp;T</code> 是一个存储 <code>T</code> 所在内存地址的单个值，<code>&amp;str</code> 是 <em>两个</em> 值：<code>str</code> 的地址和它的长度。因此，我们可以在编译时知道 <code>&amp;str</code> 值的大小：它是 <code>usize</code> 长度的两倍。也就是说，无论它引用的字符串有多长，我们总是知道 <code>&amp;str</code> 的大小。一般来说，这就是 Rust 中动态大小类型使用的方式：它们有一个额外的元数据位来存储动态信息的大小。动态大小类型的黄金法则是，我们必须始终将动态大小类型的值放在某种指针后面。",
    "_note": ""
  },
  "Newtypes can also hide internal implementation. For example, we could provide a People type to wrap a HashMap<i32, String> that stores a person’s ID associated with their name. Code using People would only interact with the public API we provide, such as a method to add a name string to the People collection; that code wouldn’t need to know that we assign an i32 ID to names internally. The newtype pattern is a lightweight way to achieve encapsulation to hide implementation details, which we discussed in “Encapsulation That Hides Implementation Details” in Chapter 18.": {
    "_translate": "新类型也可以隐藏内部实现。例如，我们可以提供一个 <code>People</code> 类型来包装一个 <code>HashMap&lt;i32, String&gt;</code>，该类型存储一个人的 ID 与其姓名的关联。使用 <code>People</code> 的代码只会与我们提供的公共 API 交互，例如一个将姓名字符串添加到 <code>People</code> 集合的方法；该代码不需要知道我们在内部为姓名分配了一个 <code>i32</code> ID。新类型模式是一种轻量级的方法，用于实现封装以隐藏实现细节，我们在 <a href=\"ch18-01-what-is-oo.html#encapsulation-that-hides-implementation-details\">“封装隐藏实现细节”</a><!--\nignore --> 第 18 章中讨论过。",
    "_note": ""
  },
  "This section assumes you’ve read the earlier section “Using the Newtype Pattern to Implement External Traits on External Types.” The newtype pattern is also useful for tasks beyond those we’ve discussed so far, including statically enforcing that values are never confused and indicating the units of a value. You saw an example of using newtypes to indicate units in Listing 20-16: recall that the Millimeters and Meters structs wrapped u32 values in a newtype. If we wrote a function with a parameter of type Millimeters, we wouldn’t be able to compile a program that accidentally tried to call that function with a value of type Meters or a plain u32.": {
    "_translate": "本节假设您已经阅读了前面的部分<a href=\"ch20-02-advanced-traits.html#using-the-newtype-pattern-to-implement-external-traits-on-external-types\">“使用新类型模式在外部类型上实现外部特征。”</a><!--\nignore --> 新类型模式对于我们迄今为止讨论的任务之外的任务也非常有用，包括静态强制值永不混淆和指示值的单位。您在列表 20-16 中看到了使用新类型来指示单位的示例：回想一下，<code>Millimeters</code> 和 <code>Meters</code> 结构体将 <code>u32</code> 值包装在一个新类型中。如果我们编写了一个参数类型为 <code>Millimeters</code> 的函数，那么我们无法编译一个意外尝试用 <code>Meters</code> 类型或普通 <code>u32</code> 类型的值调用该函数的程序。",
    "_note": ""
  },
  "The Never Type That Never Returns": {
    "_translate": "<a class=\"header\" href=\"#the-never-type-that-never-returns\">永远不会返回的 Never 类型</a>",
    "_note": ""
  },
  "Because Kilometers and i32 are the same type, we can add values of both types and we can pass Kilometers values to functions that take i32 parameters. However, using this method, we don’t get the type-checking benefits that we get from the newtype pattern discussed earlier. In other words, if we mix up Kilometers and i32 values somewhere, the compiler will not give us an error.": {
    "_translate": "因为 <code>Kilometers</code> 和 <code>i32</code> 是同一种类型，我们可以将这两种类型的值相加，并且可以将 <code>Kilometers</code> 值传递给接受 <code>i32</code> 参数的函数。然而，使用这种方法，我们无法获得前面讨论的新类型模式带来的类型检查好处。换句话说，如果我们 somewhere 混淆了 <code>Kilometers</code> 和 <code>i32</code> 值，编译器不会给我们错误。",
    "_note": ""
  },
  "But what use is a type you can never create values for? Recall the code from Listing 2-5, part of the number-guessing game; we’ve reproduced a bit of it here in Listing 20-27.": {
    "_translate": "但是，一个你永远无法为其创建值的类型有什么用呢？回想一下第 2-5 列表中的代码，这是数字猜谜游戏的一部分；我们在这里重新展示了其中的一部分，如第 20-27 列表所示。",
    "_note": ""
  }
}