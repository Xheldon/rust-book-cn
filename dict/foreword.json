{
  "Foreword": {
    "_translate": "<a class=\"header\" href=\"#foreword\">前言</a>",
    "_note": ""
  },
  "It wasn’t always so clear, but the Rust programming language is fundamentally about empowerment: no matter what kind of code you are writing now, Rust empowers you to reach farther, to program with confidence in a wider variety of domains than you did before.": {
    "_translate": "它并不总是如此明确，但 Rust 编程语言从根本上是关于<em>赋能</em>：无论你现在编写什么样的代码，Rust 都能让你走得更远，让你在更广泛的领域中自信地编程，而这是你之前所不能做到的。",
    "_note": ""
  },
  "Take, for example, “systems-level” work that deals with low-level details of memory management, data representation, and concurrency. Traditionally, this realm of programming is seen as arcane, accessible only to a select few who have devoted the necessary years learning to avoid its infamous pitfalls. And even those who practice it do so with caution, lest their code be open to exploits, crashes, or corruption.": {
    "_translate": "例如，处理内存管理、数据表示和并发等低级细节的“系统级”工作。传统上，这一编程领域被视为深奥难懂，只有少数投入必要年份学习以避免其臭名昭著的陷阱的人才能掌握。即使是那些从事这一领域的人也必须谨慎行事，以免他们的代码容易受到攻击、崩溃或损坏。",
    "_note": ""
  },
  "Rust breaks down these barriers by eliminating the old pitfalls and providing a friendly, polished set of tools to help you along the way. Programmers who need to “dip down” into lower-level control can do so with Rust, without taking on the customary risk of crashes or security holes, and without having to learn the fine points of a fickle toolchain. Better yet, the language is designed to guide you naturally towards reliable code that is efficient in terms of speed and memory usage.": {
    "_translate": "Rust 通过消除旧的陷阱并提供一套友好、精致的工具来帮助你，从而打破了这些障碍。需要“深入”到更低级别控制的程序员可以使用 Rust 来实现，而无需承担崩溃或安全漏洞的常规风险，也无需学习挑剔工具链的细微之处。更好的是，该语言旨在自然地引导你编写可靠且在速度和内存使用方面高效的代码。",
    "_note": ""
  },
  "Programmers who are already working with low-level code can use Rust to raise their ambitions. For example, introducing parallelism in Rust is a relatively low-risk operation: the compiler will catch the classical mistakes for you. And you can tackle more aggressive optimizations in your code with the confidence that you won’t accidentally introduce crashes or vulnerabilities.": {
    "_translate": "已经使用低级代码的程序员可以使用 Rust 来提升他们的目标。例如，在 Rust 中引入并行性是一个相对低风险的操作：编译器会为您捕获经典的错误。并且您可以更有信心地在代码中进行更激进的优化，确信不会意外引入崩溃或漏洞。",
    "_note": ""
  },
  "But Rust isn’t limited to low-level systems programming. It’s expressive and ergonomic enough to make CLI apps, web servers, and many other kinds of code quite pleasant to write — you’ll find simple examples of both later in the book. Working with Rust allows you to build skills that transfer from one domain to another; you can learn Rust by writing a web app, then apply those same skills to target your Raspberry Pi.": {
    "_translate": "但是 Rust 并不局限于低级系统编程。它的表达性和易用性足以使编写 CLI 应用、Web 服务器和许多其他类型的代码变得相当愉快——你将在本书后面找到两者的简单示例。使用 Rust 工作可以让你建立从一个领域转移到另一个领域的技能；你可以通过编写 Web 应用来学习 Rust，然后将这些相同的技能应用于你的 Raspberry Pi。",
    "_note": ""
  },
  "This book fully embraces the potential of Rust to empower its users. It’s a friendly and approachable text intended to help you level up not just your knowledge of Rust, but also your reach and confidence as a programmer in general. So dive in, get ready to learn—and welcome to the Rust community!": {
    "_translate": "这本书充分拥抱了 Rust 赋能其用户的可能性。它是一本友好且易于接近的文本，旨在帮助你不仅提升对 Rust 的了解，也提升你作为程序员的整体影响力和信心。所以，跳进来，准备好学习——欢迎加入 Rust 社区！",
    "_note": ""
  },
  "— Nicholas Matsakis and Aaron Turon": {
    "_translate": "— 尼古拉斯·马茨亚基斯和亚伦·图龙",
    "_note": ""
  },
  "Foreword - The Rust Programming Language": {
    "_translate": "前言 - 《Rust编程语言》",
    "_note": ""
  },
  "The Rust programming language has come a long way in a few short years, from its creation and incubation by a small and nascent community of enthusiasts, to becoming one of the most loved and in-demand programming languages in the world. Looking back, it was inevitable that the power and promise of Rust would turn heads and gain a foothold in systems programming. What was not inevitable was the global growth in interest and innovation that permeated through open source communities and catalyzed wide-scale adoption across industries.": {
    "_translate": "Rust 编程语言在短短几年内取得了长足的进步，从由一小群热心爱好者创建和孵化，到成为世界上最受喜爱和需求量最大的编程语言之一。回顾过去，Rust 的强大和潜力必然会吸引人们的注意，并在系统编程中占据一席之地。但全球范围内兴趣和创新的增长，渗透到开源社区并催化各行各业的广泛采用，这并不是必然的。",
    "_note": ""
  },
  "At this point in time, it is easy to point to the wonderful features that Rust has to offer to explain this explosion in interest and adoption. Who doesn’t want memory safety, and fast performance, and a friendly compiler, and great tooling, among a host of other wonderful features? The Rust language you see today combines years of research in systems programming with the practical wisdom of a vibrant and passionate community. This language was designed with purpose and crafted with care, offering developers a tool that makes it easier to write safe, fast, and reliable code.": {
    "_translate": "目前，很容易指出 Rust 拥有的出色特性来解释这种兴趣和采用的爆炸性增长。谁不想要内存安全，<em>和</em>高性能，<em>和</em>友好的编译器，<em>和</em>出色的工具，以及其他许多出色的特性呢？你今天看到的 Rust 语言结合了多年在系统编程领域的研究和一个充满活力且热情的社区的实践经验。这门语言是有目的性地设计和精心打造的，为开发者提供了一个更容易编写安全、快速和可靠代码的工具。",
    "_note": ""
  },
  "But what makes Rust truly special is its roots in empowering you, the user, to achieve your goals. This is a language that wants you to succeed, and the principle of empowerment runs through the core of the community that builds, maintains, and advocates for this language. Since the previous edition of this definitive text, Rust has further developed into a truly global and trusted language. The Rust Project is now robustly supported by the Rust Foundation, which also invests in key initiatives to ensure that Rust is secure, stable, and sustainable.": {
    "_translate": "但是，使 Rust 真正特别的是它植根于赋予你，用户，实现目标的能力。这是一种希望你成功的语言，赋权的原则贯穿于构建、维护和推广这种语言的社区的核心。自上一版这本权威文本以来，Rust 已进一步发展成为一种真正全球性和值得信赖的语言。Rust 项目现在得到了 Rust 基金会的有力支持，该基金会还投资于关键计划，以确保 Rust 的安全性、稳定性和可持续性。",
    "_note": ""
  },
  "This edition of The Rust Programming Language is a comprehensive update, reflecting the language’s evolution over the years and providing valuable new information. But it is not just a guide to syntax and libraries—it’s an invitation to join a community that values quality, performance, and thoughtful design. Whether you’re a seasoned developer looking to explore Rust for the first time or an experienced Rustacean looking to refine your skills, this edition offers something for everyone.": {
    "_translate": "这版的<em>The Rust Programming Language</em>是一次全面的更新，反映了多年来语言的演变，并提供了宝贵的新信息。但这不仅仅是一本关于语法和库的指南——它是一份邀请，邀请您加入一个重视质量、性能和深思熟虑设计的社区。无论您是第一次探索Rust的经验丰富的开发人员，还是希望精进技能的资深Rustacean，这版都为每个人提供了内容。",
    "_note": ""
  },
  "The Rust journey has been one of collaboration, learning, and iteration. The growth of the language and its ecosystem is a direct reflection of the vibrant, diverse community behind it. The contributions of thousands of developers, from core language designers to casual contributors, are what make Rust such a unique and powerful tool. By picking up this book, you’re not just learning a new programming language—you’re joining a movement to make software better, safer, and more enjoyable to work with.": {
    "_translate": "Rust 的旅程是一段协作、学习和迭代的过程。语言及其生态系统的成长直接反映了其背后充满活力、多样化的社区。成千上万的开发者的贡献，从核心语言设计者到偶尔的贡献者，使得 Rust 成为一种独特而强大的工具。通过拿起这本书，你不仅是在学习一门新的编程语言——你正在加入一个使软件更好、更安全、更愉快的运动。",
    "_note": ""
  },
  "Welcome to the Rust community!": {
    "_translate": "欢迎加入 Rust 社区！",
    "_note": ""
  },
  "Bec Rumbul, Executive Director of the Rust Foundation": {
    "_translate": "Bec Rumbul，Rust 基金会执行董事",
    "_note": ""
  }
}