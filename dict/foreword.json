{
  "Foreword": {
    "_translate": "<a class=\"header\" href=\"#foreword\">前言</a>",
    "_note": ""
  },
  "It wasn’t always so clear, but the Rust programming language is fundamentally about empowerment: no matter what kind of code you are writing now, Rust empowers you to reach farther, to program with confidence in a wider variety of domains than you did before.": {
    "_translate": "它并不总是如此明确，但 Rust 编程语言从根本上是关于<em>赋能</em>：无论你现在编写什么样的代码，Rust 都能让你走得更远，让你在更广泛的领域中自信地编程，而这是你之前所不能做到的。",
    "_note": ""
  },
  "Take, for example, “systems-level” work that deals with low-level details of memory management, data representation, and concurrency. Traditionally, this realm of programming is seen as arcane, accessible only to a select few who have devoted the necessary years learning to avoid its infamous pitfalls. And even those who practice it do so with caution, lest their code be open to exploits, crashes, or corruption.": {
    "_translate": "例如，处理内存管理、数据表示和并发等低级细节的“系统级”工作。传统上，这一编程领域被视为深奥难懂，只有少数投入必要年份学习以避免其臭名昭著的陷阱的人才能掌握。即使是那些从事这一领域的人也必须谨慎行事，以免他们的代码容易受到攻击、崩溃或损坏。",
    "_note": ""
  },
  "Rust breaks down these barriers by eliminating the old pitfalls and providing a friendly, polished set of tools to help you along the way. Programmers who need to “dip down” into lower-level control can do so with Rust, without taking on the customary risk of crashes or security holes, and without having to learn the fine points of a fickle toolchain. Better yet, the language is designed to guide you naturally towards reliable code that is efficient in terms of speed and memory usage.": {
    "_translate": "Rust 通过消除旧的陷阱并提供一套友好、精致的工具来帮助你，从而打破了这些障碍。需要“深入”到更低级别控制的程序员可以使用 Rust 来实现，而无需承担崩溃或安全漏洞的常规风险，也无需学习挑剔工具链的细微之处。更好的是，该语言旨在自然地引导你编写可靠且在速度和内存使用方面高效的代码。",
    "_note": ""
  },
  "Programmers who are already working with low-level code can use Rust to raise their ambitions. For example, introducing parallelism in Rust is a relatively low-risk operation: the compiler will catch the classical mistakes for you. And you can tackle more aggressive optimizations in your code with the confidence that you won’t accidentally introduce crashes or vulnerabilities.": {
    "_translate": "已经使用低级代码的程序员可以使用 Rust 来提升他们的目标。例如，在 Rust 中引入并行性是一个相对低风险的操作：编译器会为您捕获经典的错误。并且您可以更有信心地在代码中进行更激进的优化，确信不会意外引入崩溃或漏洞。",
    "_note": ""
  },
  "But Rust isn’t limited to low-level systems programming. It’s expressive and ergonomic enough to make CLI apps, web servers, and many other kinds of code quite pleasant to write — you’ll find simple examples of both later in the book. Working with Rust allows you to build skills that transfer from one domain to another; you can learn Rust by writing a web app, then apply those same skills to target your Raspberry Pi.": {
    "_translate": "但是 Rust 并不局限于低级系统编程。它的表达性和易用性足以使编写 CLI 应用、Web 服务器和许多其他类型的代码变得相当愉快——你将在本书后面找到两者的简单示例。使用 Rust 工作可以让你建立从一个领域转移到另一个领域的技能；你可以通过编写 Web 应用来学习 Rust，然后将这些相同的技能应用于你的 Raspberry Pi。",
    "_note": ""
  },
  "This book fully embraces the potential of Rust to empower its users. It’s a friendly and approachable text intended to help you level up not just your knowledge of Rust, but also your reach and confidence as a programmer in general. So dive in, get ready to learn—and welcome to the Rust community!": {
    "_translate": "这本书充分拥抱了 Rust 赋能其用户的可能性。它是一本友好且易于接近的文本，旨在帮助你不仅提升对 Rust 的了解，也提升你作为程序员的整体影响力和信心。所以，跳进来，准备好学习——欢迎加入 Rust 社区！",
    "_note": ""
  },
  "— Nicholas Matsakis and Aaron Turon": {
    "_translate": "— 尼古拉斯·马茨亚基斯和亚伦·图龙",
    "_note": ""
  }
}